// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace PDFiumSharp.Native
{
    public enum FPDF_TEXT_RENDERMODE
    {
        FPDF_TEXTRENDERMODE_UNKNOWN = -1,
        FPDF_TEXTRENDERMODE_FILL = 0,
        FPDF_TEXTRENDERMODE_STROKE = 1,
        FPDF_TEXTRENDERMODE_FILL_STROKE = 2,
        FPDF_TEXTRENDERMODE_INVISIBLE = 3,
        FPDF_TEXTRENDERMODE_FILL_CLIP = 4,
        FPDF_TEXTRENDERMODE_STROKE_CLIP = 5,
        FPDF_TEXTRENDERMODE_FILL_STROKE_CLIP = 6,
        FPDF_TEXTRENDERMODE_CLIP = 7,
        FPDF_TEXTRENDERMODE_LAST = 7
    }

    public enum FPDF_DUPLEXTYPE_
    {
        DuplexUndefined = 0,
        Simplex = 1,
        DuplexFlipShortEdge = 2,
        DuplexFlipLongEdge = 3
    }

    public unsafe partial class FpdfActionT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfActionT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfActionT>();

        protected bool __ownsNativeInstance;

        internal static FpdfActionT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfActionT(native.ToPointer(), skipVTables);
        }

        internal static FpdfActionT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfActionT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfActionT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfActionT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfActionT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfActionT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfAnnotationT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfAnnotationT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfAnnotationT>();

        protected bool __ownsNativeInstance;

        internal static FpdfAnnotationT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfAnnotationT(native.ToPointer(), skipVTables);
        }

        internal static FpdfAnnotationT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfAnnotationT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfAnnotationT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfAnnotationT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfAnnotationT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfAnnotationT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfAttachmentT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfAttachmentT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfAttachmentT>();

        protected bool __ownsNativeInstance;

        internal static FpdfAttachmentT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfAttachmentT(native.ToPointer(), skipVTables);
        }

        internal static FpdfAttachmentT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfAttachmentT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfAttachmentT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfAttachmentT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfAttachmentT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfAttachmentT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfAvailT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfAvailT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfAvailT>();

        protected bool __ownsNativeInstance;

        internal static FpdfAvailT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfAvailT(native.ToPointer(), skipVTables);
        }

        internal static FpdfAvailT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfAvailT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfAvailT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfAvailT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfAvailT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfAvailT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfBitmapT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfBitmapT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfBitmapT>();

        protected bool __ownsNativeInstance;

        internal static FpdfBitmapT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfBitmapT(native.ToPointer(), skipVTables);
        }

        internal static FpdfBitmapT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfBitmapT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfBitmapT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfBitmapT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfBitmapT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfBitmapT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfBookmarkT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfBookmarkT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfBookmarkT>();

        protected bool __ownsNativeInstance;

        internal static FpdfBookmarkT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfBookmarkT(native.ToPointer(), skipVTables);
        }

        internal static FpdfBookmarkT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfBookmarkT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfBookmarkT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfBookmarkT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfBookmarkT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfBookmarkT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfClippathT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfClippathT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfClippathT>();

        protected bool __ownsNativeInstance;

        internal static FpdfClippathT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfClippathT(native.ToPointer(), skipVTables);
        }

        internal static FpdfClippathT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfClippathT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfClippathT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfClippathT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfClippathT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfClippathT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfDestT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfDestT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfDestT>();

        protected bool __ownsNativeInstance;

        internal static FpdfDestT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfDestT(native.ToPointer(), skipVTables);
        }

        internal static FpdfDestT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfDestT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfDestT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfDestT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfDestT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfDestT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfDocumentT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfDocumentT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfDocumentT>();

        protected bool __ownsNativeInstance;

        internal static FpdfDocumentT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfDocumentT(native.ToPointer(), skipVTables);
        }

        internal static FpdfDocumentT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfDocumentT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfDocumentT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfDocumentT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfDocumentT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfDocumentT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfFontT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfFontT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfFontT>();

        protected bool __ownsNativeInstance;

        internal static FpdfFontT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfFontT(native.ToPointer(), skipVTables);
        }

        internal static FpdfFontT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfFontT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfFontT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfFontT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfFontT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfFontT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfFormHandleT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfFormHandleT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfFormHandleT>();

        protected bool __ownsNativeInstance;

        internal static FpdfFormHandleT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfFormHandleT(native.ToPointer(), skipVTables);
        }

        internal static FpdfFormHandleT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfFormHandleT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfFormHandleT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfFormHandleT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfFormHandleT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfFormHandleT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfGlyphpathT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfGlyphpathT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfGlyphpathT>();

        protected bool __ownsNativeInstance;

        internal static FpdfGlyphpathT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfGlyphpathT(native.ToPointer(), skipVTables);
        }

        internal static FpdfGlyphpathT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfGlyphpathT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfGlyphpathT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfGlyphpathT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfGlyphpathT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfGlyphpathT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfJavascriptActionT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfJavascriptActionT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfJavascriptActionT>();

        protected bool __ownsNativeInstance;

        internal static FpdfJavascriptActionT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfJavascriptActionT(native.ToPointer(), skipVTables);
        }

        internal static FpdfJavascriptActionT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfJavascriptActionT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfJavascriptActionT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfJavascriptActionT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfJavascriptActionT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfJavascriptActionT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfLinkT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfLinkT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfLinkT>();

        protected bool __ownsNativeInstance;

        internal static FpdfLinkT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfLinkT(native.ToPointer(), skipVTables);
        }

        internal static FpdfLinkT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfLinkT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfLinkT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfLinkT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfLinkT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfLinkT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfPageT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfPageT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfPageT>();

        protected bool __ownsNativeInstance;

        internal static FpdfPageT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfPageT(native.ToPointer(), skipVTables);
        }

        internal static FpdfPageT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfPageT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfPageT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfPageT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfPageT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfPageT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfPagelinkT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfPagelinkT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfPagelinkT>();

        protected bool __ownsNativeInstance;

        internal static FpdfPagelinkT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfPagelinkT(native.ToPointer(), skipVTables);
        }

        internal static FpdfPagelinkT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfPagelinkT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfPagelinkT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfPagelinkT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfPagelinkT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfPagelinkT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfPageobjectT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfPageobjectT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfPageobjectT>();

        protected bool __ownsNativeInstance;

        internal static FpdfPageobjectT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfPageobjectT(native.ToPointer(), skipVTables);
        }

        internal static FpdfPageobjectT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfPageobjectT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfPageobjectT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfPageobjectT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfPageobjectT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfPageobjectT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfPageobjectmarkT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfPageobjectmarkT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfPageobjectmarkT>();

        protected bool __ownsNativeInstance;

        internal static FpdfPageobjectmarkT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfPageobjectmarkT(native.ToPointer(), skipVTables);
        }

        internal static FpdfPageobjectmarkT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfPageobjectmarkT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfPageobjectmarkT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfPageobjectmarkT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfPageobjectmarkT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfPageobjectmarkT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfPagerangeT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfPagerangeT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfPagerangeT>();

        protected bool __ownsNativeInstance;

        internal static FpdfPagerangeT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfPagerangeT(native.ToPointer(), skipVTables);
        }

        internal static FpdfPagerangeT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfPagerangeT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfPagerangeT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfPagerangeT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfPagerangeT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfPagerangeT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfPathsegmentT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfPathsegmentT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfPathsegmentT>();

        protected bool __ownsNativeInstance;

        internal static FpdfPathsegmentT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfPathsegmentT(native.ToPointer(), skipVTables);
        }

        internal static FpdfPathsegmentT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfPathsegmentT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfPathsegmentT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfPathsegmentT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfPathsegmentT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfPathsegmentT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfSchhandleT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfSchhandleT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfSchhandleT>();

        protected bool __ownsNativeInstance;

        internal static FpdfSchhandleT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfSchhandleT(native.ToPointer(), skipVTables);
        }

        internal static FpdfSchhandleT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfSchhandleT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfSchhandleT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfSchhandleT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfSchhandleT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfSchhandleT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfSignatureT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfSignatureT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfSignatureT>();

        protected bool __ownsNativeInstance;

        internal static FpdfSignatureT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfSignatureT(native.ToPointer(), skipVTables);
        }

        internal static FpdfSignatureT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfSignatureT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfSignatureT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfSignatureT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfSignatureT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfSignatureT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfStructelementT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfStructelementT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfStructelementT>();

        protected bool __ownsNativeInstance;

        internal static FpdfStructelementT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfStructelementT(native.ToPointer(), skipVTables);
        }

        internal static FpdfStructelementT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfStructelementT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfStructelementT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfStructelementT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfStructelementT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfStructelementT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfStructtreeT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfStructtreeT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfStructtreeT>();

        protected bool __ownsNativeInstance;

        internal static FpdfStructtreeT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfStructtreeT(native.ToPointer(), skipVTables);
        }

        internal static FpdfStructtreeT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfStructtreeT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfStructtreeT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfStructtreeT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfStructtreeT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfStructtreeT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfTextpageT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfTextpageT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfTextpageT>();

        protected bool __ownsNativeInstance;

        internal static FpdfTextpageT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfTextpageT(native.ToPointer(), skipVTables);
        }

        internal static FpdfTextpageT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfTextpageT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfTextpageT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfTextpageT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfTextpageT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfTextpageT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfWidgetT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfWidgetT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfWidgetT>();

        protected bool __ownsNativeInstance;

        internal static FpdfWidgetT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfWidgetT(native.ToPointer(), skipVTables);
        }

        internal static FpdfWidgetT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfWidgetT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfWidgetT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfWidgetT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfWidgetT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfWidgetT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FpdfXobjectT
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfXobjectT> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FpdfXobjectT>();

        protected bool __ownsNativeInstance;

        internal static FpdfXobjectT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FpdfXobjectT(native.ToPointer(), skipVTables);
        }

        internal static FpdfXobjectT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FpdfXobjectT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FpdfXobjectT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FpdfXobjectT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FpdfXobjectT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FpdfXobjectT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class FPDF_BSTR_ : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal __IntPtr str;
            internal int len;

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FPDF_BSTR_@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDF_BSTR_> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDF_BSTR_>();

        protected bool __ownsNativeInstance;

        internal static FPDF_BSTR_ __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDF_BSTR_(native.ToPointer(), skipVTables);
        }

        internal static FPDF_BSTR_ __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDF_BSTR_)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDF_BSTR_ __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDF_BSTR_(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDF_BSTR_(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDF_BSTR_(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDF_BSTR_()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDF_BSTR_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDF_BSTR_(global::PDFiumSharp.Native.FPDF_BSTR_ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDF_BSTR_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDF_BSTR_.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDF_BSTR_.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte* Str
        {
            get
            {
                return (sbyte*) ((__Internal*)__Instance)->str;
            }

            set
            {
                ((__Internal*)__Instance)->str = (__IntPtr) value;
            }
        }

        public int Len
        {
            get
            {
                return ((__Internal*)__Instance)->len;
            }

            set
            {
                ((__Internal*)__Instance)->len = value;
            }
        }
    }

    public unsafe partial class FS_MATRIX_ : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal float a;
            internal float b;
            internal float c;
            internal float d;
            internal float e;
            internal float f;

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0_FS_MATRIX_@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FS_MATRIX_> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FS_MATRIX_>();

        protected bool __ownsNativeInstance;

        internal static FS_MATRIX_ __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FS_MATRIX_(native.ToPointer(), skipVTables);
        }

        internal static FS_MATRIX_ __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FS_MATRIX_)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FS_MATRIX_ __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FS_MATRIX_(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FS_MATRIX_(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FS_MATRIX_(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FS_MATRIX_()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FS_MATRIX_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FS_MATRIX_(global::PDFiumSharp.Native.FS_MATRIX_ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FS_MATRIX_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FS_MATRIX_.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FS_MATRIX_.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float A
        {
            get
            {
                return ((__Internal*)__Instance)->a;
            }

            set
            {
                ((__Internal*)__Instance)->a = value;
            }
        }

        public float B
        {
            get
            {
                return ((__Internal*)__Instance)->b;
            }

            set
            {
                ((__Internal*)__Instance)->b = value;
            }
        }

        public float C
        {
            get
            {
                return ((__Internal*)__Instance)->c;
            }

            set
            {
                ((__Internal*)__Instance)->c = value;
            }
        }

        public float D
        {
            get
            {
                return ((__Internal*)__Instance)->d;
            }

            set
            {
                ((__Internal*)__Instance)->d = value;
            }
        }

        public float E
        {
            get
            {
                return ((__Internal*)__Instance)->e;
            }

            set
            {
                ((__Internal*)__Instance)->e = value;
            }
        }

        public float F
        {
            get
            {
                return ((__Internal*)__Instance)->f;
            }

            set
            {
                ((__Internal*)__Instance)->f = value;
            }
        }
    }

    public unsafe partial class FS_RECTF_ : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal float left;
            internal float top;
            internal float right;
            internal float bottom;

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0_FS_RECTF_@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FS_RECTF_> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FS_RECTF_>();

        protected bool __ownsNativeInstance;

        internal static FS_RECTF_ __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FS_RECTF_(native.ToPointer(), skipVTables);
        }

        internal static FS_RECTF_ __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FS_RECTF_)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FS_RECTF_ __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FS_RECTF_(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FS_RECTF_(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FS_RECTF_(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FS_RECTF_()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FS_RECTF_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FS_RECTF_(global::PDFiumSharp.Native.FS_RECTF_ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FS_RECTF_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FS_RECTF_.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FS_RECTF_.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float Left
        {
            get
            {
                return ((__Internal*)__Instance)->left;
            }

            set
            {
                ((__Internal*)__Instance)->left = value;
            }
        }

        public float Top
        {
            get
            {
                return ((__Internal*)__Instance)->top;
            }

            set
            {
                ((__Internal*)__Instance)->top = value;
            }
        }

        public float Right
        {
            get
            {
                return ((__Internal*)__Instance)->right;
            }

            set
            {
                ((__Internal*)__Instance)->right = value;
            }
        }

        public float Bottom
        {
            get
            {
                return ((__Internal*)__Instance)->bottom;
            }

            set
            {
                ((__Internal*)__Instance)->bottom = value;
            }
        }
    }

    public unsafe partial class FS_SIZEF_ : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal float width;
            internal float height;

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FS_SIZEF_@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FS_SIZEF_> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FS_SIZEF_>();

        protected bool __ownsNativeInstance;

        internal static FS_SIZEF_ __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FS_SIZEF_(native.ToPointer(), skipVTables);
        }

        internal static FS_SIZEF_ __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FS_SIZEF_)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FS_SIZEF_ __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FS_SIZEF_(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FS_SIZEF_(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FS_SIZEF_(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FS_SIZEF_()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FS_SIZEF_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FS_SIZEF_(global::PDFiumSharp.Native.FS_SIZEF_ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FS_SIZEF_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FS_SIZEF_.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FS_SIZEF_.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float Width
        {
            get
            {
                return ((__Internal*)__Instance)->width;
            }

            set
            {
                ((__Internal*)__Instance)->width = value;
            }
        }

        public float Height
        {
            get
            {
                return ((__Internal*)__Instance)->height;
            }

            set
            {
                ((__Internal*)__Instance)->height = value;
            }
        }
    }

    public unsafe partial class FS_POINTF_ : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 8)]
        public partial struct __Internal
        {
            internal float x;
            internal float y;

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FS_POINTF_@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FS_POINTF_> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FS_POINTF_>();

        protected bool __ownsNativeInstance;

        internal static FS_POINTF_ __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FS_POINTF_(native.ToPointer(), skipVTables);
        }

        internal static FS_POINTF_ __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FS_POINTF_)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FS_POINTF_ __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FS_POINTF_(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FS_POINTF_(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FS_POINTF_(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FS_POINTF_()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FS_POINTF_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FS_POINTF_(global::PDFiumSharp.Native.FS_POINTF_ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FS_POINTF_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FS_POINTF_.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FS_POINTF_.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float X
        {
            get
            {
                return ((__Internal*)__Instance)->x;
            }

            set
            {
                ((__Internal*)__Instance)->x = value;
            }
        }

        public float Y
        {
            get
            {
                return ((__Internal*)__Instance)->y;
            }

            set
            {
                ((__Internal*)__Instance)->y = value;
            }
        }
    }

    public unsafe partial class FPDF_LIBRARY_CONFIG_ : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 40)]
        public partial struct __Internal
        {
            internal int version;
            internal __IntPtr m_pUserFontPaths;
            internal __IntPtr m_pIsolate;
            internal uint m_v8EmbedderSlot;
            internal __IntPtr m_pPlatform;

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FPDF_LIBRARY_CONFIG_@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDF_LIBRARY_CONFIG_> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDF_LIBRARY_CONFIG_>();

        protected bool __ownsNativeInstance;

        internal static FPDF_LIBRARY_CONFIG_ __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDF_LIBRARY_CONFIG_(native.ToPointer(), skipVTables);
        }

        internal static FPDF_LIBRARY_CONFIG_ __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDF_LIBRARY_CONFIG_)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDF_LIBRARY_CONFIG_ __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDF_LIBRARY_CONFIG_(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDF_LIBRARY_CONFIG_(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDF_LIBRARY_CONFIG_(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDF_LIBRARY_CONFIG_()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDF_LIBRARY_CONFIG_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDF_LIBRARY_CONFIG_(global::PDFiumSharp.Native.FPDF_LIBRARY_CONFIG_ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDF_LIBRARY_CONFIG_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDF_LIBRARY_CONFIG_.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDF_LIBRARY_CONFIG_.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Version
        {
            get
            {
                return ((__Internal*)__Instance)->version;
            }

            set
            {
                ((__Internal*)__Instance)->version = value;
            }
        }

        public __IntPtr MPIsolate
        {
            get
            {
                return ((__Internal*)__Instance)->m_pIsolate;
            }

            set
            {
                ((__Internal*)__Instance)->m_pIsolate = (__IntPtr) value;
            }
        }

        public uint MV8EmbedderSlot
        {
            get
            {
                return ((__Internal*)__Instance)->m_v8EmbedderSlot;
            }

            set
            {
                ((__Internal*)__Instance)->m_v8EmbedderSlot = value;
            }
        }

        public __IntPtr MPPlatform
        {
            get
            {
                return ((__Internal*)__Instance)->m_pPlatform;
            }

            set
            {
                ((__Internal*)__Instance)->m_pPlatform = (__IntPtr) value;
            }
        }
    }

    public unsafe partial class FPDF_FILEACCESS : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal uint m_FileLen;
            internal __IntPtr m_GetBlock;
            internal __IntPtr m_Param;

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FPDF_FILEACCESS@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr __0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDF_FILEACCESS> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDF_FILEACCESS>();

        protected bool __ownsNativeInstance;

        internal static FPDF_FILEACCESS __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDF_FILEACCESS(native.ToPointer(), skipVTables);
        }

        internal static FPDF_FILEACCESS __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDF_FILEACCESS)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDF_FILEACCESS __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDF_FILEACCESS(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDF_FILEACCESS(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDF_FILEACCESS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDF_FILEACCESS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDF_FILEACCESS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDF_FILEACCESS(global::PDFiumSharp.Native.FPDF_FILEACCESS __0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDF_FILEACCESS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDF_FILEACCESS.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDF_FILEACCESS.__Internal*) __0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MFileLen
        {
            get
            {
                return ((__Internal*)__Instance)->m_FileLen;
            }

            set
            {
                ((__Internal*)__Instance)->m_FileLen = value;
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_int___IntPtr_uint_bytePtr_uint MGetBlock
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->m_GetBlock;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_int___IntPtr_uint_bytePtr_uint) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_int___IntPtr_uint_bytePtr_uint));
            }

            set
            {
                ((__Internal*)__Instance)->m_GetBlock = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public __IntPtr MParam
        {
            get
            {
                return ((__Internal*)__Instance)->m_Param;
            }

            set
            {
                ((__Internal*)__Instance)->m_Param = (__IntPtr) value;
            }
        }
    }

    public unsafe partial class FPDF_FILEHANDLER_ : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 56)]
        public partial struct __Internal
        {
            internal __IntPtr clientData;
            internal __IntPtr Release;
            internal __IntPtr GetSize;
            internal __IntPtr ReadBlock;
            internal __IntPtr WriteBlock;
            internal __IntPtr Flush;
            internal __IntPtr Truncate;

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FPDF_FILEHANDLER_@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDF_FILEHANDLER_> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDF_FILEHANDLER_>();

        protected bool __ownsNativeInstance;

        internal static FPDF_FILEHANDLER_ __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDF_FILEHANDLER_(native.ToPointer(), skipVTables);
        }

        internal static FPDF_FILEHANDLER_ __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDF_FILEHANDLER_)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDF_FILEHANDLER_ __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDF_FILEHANDLER_(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDF_FILEHANDLER_(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDF_FILEHANDLER_(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDF_FILEHANDLER_()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDF_FILEHANDLER_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDF_FILEHANDLER_(global::PDFiumSharp.Native.FPDF_FILEHANDLER_ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDF_FILEHANDLER_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDF_FILEHANDLER_.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDF_FILEHANDLER_.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public __IntPtr ClientData
        {
            get
            {
                return ((__Internal*)__Instance)->clientData;
            }

            set
            {
                ((__Internal*)__Instance)->clientData = (__IntPtr) value;
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr Release
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Release;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->Release = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_uint___IntPtr GetSize
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->GetSize;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_uint___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_uint___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->GetSize = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_int___IntPtr_uint___IntPtr_uint ReadBlock
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->ReadBlock;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_int___IntPtr_uint___IntPtr_uint) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_int___IntPtr_uint___IntPtr_uint));
            }

            set
            {
                ((__Internal*)__Instance)->ReadBlock = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_int___IntPtr_uint___IntPtr_uint WriteBlock
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->WriteBlock;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_int___IntPtr_uint___IntPtr_uint) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_int___IntPtr_uint___IntPtr_uint));
            }

            set
            {
                ((__Internal*)__Instance)->WriteBlock = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_int___IntPtr Flush
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Flush;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_int___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_int___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->Flush = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_int___IntPtr_uint Truncate
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Truncate;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_int___IntPtr_uint) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_int___IntPtr_uint));
            }

            set
            {
                ((__Internal*)__Instance)->Truncate = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public unsafe partial class FPDF_COLORSCHEME_ : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal uint path_fill_color;
            internal uint path_stroke_color;
            internal uint text_fill_color;
            internal uint text_stroke_color;

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FPDF_COLORSCHEME_@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDF_COLORSCHEME_> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDF_COLORSCHEME_>();

        protected bool __ownsNativeInstance;

        internal static FPDF_COLORSCHEME_ __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDF_COLORSCHEME_(native.ToPointer(), skipVTables);
        }

        internal static FPDF_COLORSCHEME_ __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDF_COLORSCHEME_)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDF_COLORSCHEME_ __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDF_COLORSCHEME_(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDF_COLORSCHEME_(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDF_COLORSCHEME_(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDF_COLORSCHEME_()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDF_COLORSCHEME_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDF_COLORSCHEME_(global::PDFiumSharp.Native.FPDF_COLORSCHEME_ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDF_COLORSCHEME_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDF_COLORSCHEME_.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDF_COLORSCHEME_.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint PathFillColor
        {
            get
            {
                return ((__Internal*)__Instance)->path_fill_color;
            }

            set
            {
                ((__Internal*)__Instance)->path_fill_color = value;
            }
        }

        public uint PathStrokeColor
        {
            get
            {
                return ((__Internal*)__Instance)->path_stroke_color;
            }

            set
            {
                ((__Internal*)__Instance)->path_stroke_color = value;
            }
        }

        public uint TextFillColor
        {
            get
            {
                return ((__Internal*)__Instance)->text_fill_color;
            }

            set
            {
                ((__Internal*)__Instance)->text_fill_color = value;
            }
        }

        public uint TextStrokeColor
        {
            get
            {
                return ((__Internal*)__Instance)->text_stroke_color;
            }

            set
            {
                ((__Internal*)__Instance)->text_stroke_color = value;
            }
        }
    }

    public unsafe partial class fpdfview
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_InitLibrary", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_InitLibrary();

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_InitLibraryWithConfig", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_InitLibraryWithConfig(__IntPtr config);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_DestroyLibrary", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_DestroyLibrary();

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_SetSandBoxPolicy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_SetSandBoxPolicy(uint policy, bool enable);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_SetPrintMode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDF_SetPrintMode(int mode);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_LoadDocument", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_LoadDocument([MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string file_path, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string password);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_LoadMemDocument", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_LoadMemDocument(__IntPtr data_buf, int size, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string password);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_LoadMemDocument64", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_LoadMemDocument64(__IntPtr data_buf, ulong size, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string password);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_LoadCustomDocument", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_LoadCustomDocument(__IntPtr pFileAccess, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string password);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetFileVersion", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDF_GetFileVersion(__IntPtr doc, int* fileVersion);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetLastError", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDF_GetLastError();

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_DocumentHasValidCrossReferenceTable", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDF_DocumentHasValidCrossReferenceTable(__IntPtr document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetTrailerEnds", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDF_GetTrailerEnds(__IntPtr document, uint* buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetDocPermissions", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDF_GetDocPermissions(__IntPtr document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetSecurityHandlerRevision", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDF_GetSecurityHandlerRevision(__IntPtr document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetPageCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDF_GetPageCount(__IntPtr document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_LoadPage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_LoadPage(__IntPtr document, int page_index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetPageWidthF", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float FPDF_GetPageWidthF(__IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetPageWidth", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double FPDF_GetPageWidth(__IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetPageHeightF", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float FPDF_GetPageHeightF(__IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetPageHeight", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double FPDF_GetPageHeight(__IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetPageBoundingBox", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDF_GetPageBoundingBox(__IntPtr page, __IntPtr rect);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetPageSizeByIndexF", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDF_GetPageSizeByIndexF(__IntPtr document, int page_index, __IntPtr size);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetPageSizeByIndex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDF_GetPageSizeByIndex(__IntPtr document, int page_index, double* width, double* height);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_RenderPageBitmap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_RenderPageBitmap(__IntPtr bitmap, __IntPtr page, int start_x, int start_y, int size_x, int size_y, int rotate, int flags);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_RenderPageBitmapWithMatrix", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_RenderPageBitmapWithMatrix(__IntPtr bitmap, __IntPtr page, __IntPtr matrix, __IntPtr clipping, int flags);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_ClosePage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_ClosePage(__IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_CloseDocument", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_CloseDocument(__IntPtr document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_DeviceToPage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDF_DeviceToPage(__IntPtr page, int start_x, int start_y, int size_x, int size_y, int rotate, int device_x, int device_y, double* page_x, double* page_y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_PageToDevice", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDF_PageToDevice(__IntPtr page, int start_x, int start_y, int size_x, int size_y, int rotate, double page_x, double page_y, int* device_x, int* device_y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFBitmap_Create", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFBitmapCreate(int width, int height, int alpha);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFBitmap_CreateEx", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFBitmapCreateEx(int width, int height, int format, __IntPtr first_scan, int stride);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFBitmap_GetFormat", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFBitmapGetFormat(__IntPtr bitmap);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFBitmap_FillRect", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFBitmapFillRect(__IntPtr bitmap, int left, int top, int width, int height, uint color);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFBitmap_GetBuffer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFBitmapGetBuffer(__IntPtr bitmap);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFBitmap_GetWidth", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFBitmapGetWidth(__IntPtr bitmap);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFBitmap_GetHeight", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFBitmapGetHeight(__IntPtr bitmap);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFBitmap_GetStride", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFBitmapGetStride(__IntPtr bitmap);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFBitmap_Destroy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFBitmapDestroy(__IntPtr bitmap);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_VIEWERREF_GetPrintScaling", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDF_VIEWERREF_GetPrintScaling(__IntPtr document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_VIEWERREF_GetNumCopies", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDF_VIEWERREF_GetNumCopies(__IntPtr document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_VIEWERREF_GetPrintPageRange", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_VIEWERREF_GetPrintPageRange(__IntPtr document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_VIEWERREF_GetPrintPageRangeCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong FPDF_VIEWERREF_GetPrintPageRangeCount(__IntPtr pagerange);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_VIEWERREF_GetPrintPageRangeElement", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDF_VIEWERREF_GetPrintPageRangeElement(__IntPtr pagerange, ulong index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_VIEWERREF_GetDuplex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PDFiumSharp.Native.FPDF_DUPLEXTYPE_ FPDF_VIEWERREF_GetDuplex(__IntPtr document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_VIEWERREF_GetName", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDF_VIEWERREF_GetName(__IntPtr document, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string key, sbyte* buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_CountNamedDests", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDF_CountNamedDests(__IntPtr document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetNamedDestByName", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_GetNamedDestByName(__IntPtr document, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetNamedDest", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_GetNamedDest(__IntPtr document, int index, __IntPtr buffer, int* buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetXFAPacketCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDF_GetXFAPacketCount(__IntPtr document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetXFAPacketName", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDF_GetXFAPacketName(__IntPtr document, int index, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetXFAPacketContent", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDF_GetXFAPacketContent(__IntPtr document, int index, __IntPtr buffer, uint buflen, uint* out_buflen);
        }

        public static void FPDF_InitLibrary()
        {
            __Internal.FPDF_InitLibrary();
        }

        public static void FPDF_InitLibraryWithConfig(global::PDFiumSharp.Native.FPDF_LIBRARY_CONFIG_ config)
        {
            var __arg0 = config is null ? __IntPtr.Zero : config.__Instance;
            __Internal.FPDF_InitLibraryWithConfig(__arg0);
        }

        public static void FPDF_DestroyLibrary()
        {
            __Internal.FPDF_DestroyLibrary();
        }

        public static void FPDF_SetSandBoxPolicy(uint policy, bool enable)
        {
            __Internal.FPDF_SetSandBoxPolicy(policy, enable);
        }

        public static bool FPDF_SetPrintMode(int mode)
        {
            var __ret = __Internal.FPDF_SetPrintMode(mode);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfDocumentT FPDF_LoadDocument(string file_path, string password)
        {
            var __ret = __Internal.FPDF_LoadDocument(file_path, password);
            var __result0 = global::PDFiumSharp.Native.FpdfDocumentT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static global::PDFiumSharp.Native.FpdfDocumentT FPDF_LoadMemDocument(__IntPtr data_buf, int size, string password)
        {
            var __ret = __Internal.FPDF_LoadMemDocument(data_buf, size, password);
            var __result0 = global::PDFiumSharp.Native.FpdfDocumentT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static global::PDFiumSharp.Native.FpdfDocumentT FPDF_LoadMemDocument64(__IntPtr data_buf, ulong size, string password)
        {
            var __ret = __Internal.FPDF_LoadMemDocument64(data_buf, size, password);
            var __result0 = global::PDFiumSharp.Native.FpdfDocumentT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static global::PDFiumSharp.Native.FpdfDocumentT FPDF_LoadCustomDocument(global::PDFiumSharp.Native.FPDF_FILEACCESS pFileAccess, string password)
        {
            var __arg0 = pFileAccess is null ? __IntPtr.Zero : pFileAccess.__Instance;
            var __ret = __Internal.FPDF_LoadCustomDocument(__arg0, password);
            var __result0 = global::PDFiumSharp.Native.FpdfDocumentT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static bool FPDF_GetFileVersion(global::PDFiumSharp.Native.FpdfDocumentT doc, ref int fileVersion)
        {
            var __arg0 = doc is null ? __IntPtr.Zero : doc.__Instance;
            fixed (int* __fileVersion1 = &fileVersion)
            {
                var __arg1 = __fileVersion1;
                var __ret = __Internal.FPDF_GetFileVersion(__arg0, __arg1);
                return __ret;
            }
        }

        public static uint FPDF_GetLastError()
        {
            var __ret = __Internal.FPDF_GetLastError();
            return __ret;
        }

        public static bool FPDF_DocumentHasValidCrossReferenceTable(global::PDFiumSharp.Native.FpdfDocumentT document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDF_DocumentHasValidCrossReferenceTable(__arg0);
            return __ret;
        }

        public static uint FPDF_GetTrailerEnds(global::PDFiumSharp.Native.FpdfDocumentT document, ref uint buffer, uint length)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            fixed (uint* __buffer1 = &buffer)
            {
                var __arg1 = __buffer1;
                var __ret = __Internal.FPDF_GetTrailerEnds(__arg0, __arg1, length);
                return __ret;
            }
        }

        public static uint FPDF_GetDocPermissions(global::PDFiumSharp.Native.FpdfDocumentT document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDF_GetDocPermissions(__arg0);
            return __ret;
        }

        public static int FPDF_GetSecurityHandlerRevision(global::PDFiumSharp.Native.FpdfDocumentT document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDF_GetSecurityHandlerRevision(__arg0);
            return __ret;
        }

        public static int FPDF_GetPageCount(global::PDFiumSharp.Native.FpdfDocumentT document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDF_GetPageCount(__arg0);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfPageT FPDF_LoadPage(global::PDFiumSharp.Native.FpdfDocumentT document, int page_index)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDF_LoadPage(__arg0, page_index);
            var __result0 = global::PDFiumSharp.Native.FpdfPageT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static float FPDF_GetPageWidthF(global::PDFiumSharp.Native.FpdfPageT page)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDF_GetPageWidthF(__arg0);
            return __ret;
        }

        public static double FPDF_GetPageWidth(global::PDFiumSharp.Native.FpdfPageT page)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDF_GetPageWidth(__arg0);
            return __ret;
        }

        public static float FPDF_GetPageHeightF(global::PDFiumSharp.Native.FpdfPageT page)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDF_GetPageHeightF(__arg0);
            return __ret;
        }

        public static double FPDF_GetPageHeight(global::PDFiumSharp.Native.FpdfPageT page)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDF_GetPageHeight(__arg0);
            return __ret;
        }

        public static bool FPDF_GetPageBoundingBox(global::PDFiumSharp.Native.FpdfPageT page, global::PDFiumSharp.Native.FS_RECTF_ rect)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg1 = rect is null ? __IntPtr.Zero : rect.__Instance;
            var __ret = __Internal.FPDF_GetPageBoundingBox(__arg0, __arg1);
            return __ret;
        }

        public static bool FPDF_GetPageSizeByIndexF(global::PDFiumSharp.Native.FpdfDocumentT document, int page_index, global::PDFiumSharp.Native.FS_SIZEF_ size)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg2 = size is null ? __IntPtr.Zero : size.__Instance;
            var __ret = __Internal.FPDF_GetPageSizeByIndexF(__arg0, page_index, __arg2);
            return __ret;
        }

        public static int FPDF_GetPageSizeByIndex(global::PDFiumSharp.Native.FpdfDocumentT document, int page_index, ref double width, ref double height)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            fixed (double* __width2 = &width)
            {
                var __arg2 = __width2;
                fixed (double* __height3 = &height)
                {
                    var __arg3 = __height3;
                    var __ret = __Internal.FPDF_GetPageSizeByIndex(__arg0, page_index, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static void FPDF_RenderPageBitmap(global::PDFiumSharp.Native.FpdfBitmapT bitmap, global::PDFiumSharp.Native.FpdfPageT page, int start_x, int start_y, int size_x, int size_y, int rotate, int flags)
        {
            var __arg0 = bitmap is null ? __IntPtr.Zero : bitmap.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            __Internal.FPDF_RenderPageBitmap(__arg0, __arg1, start_x, start_y, size_x, size_y, rotate, flags);
        }

        public static void FPDF_RenderPageBitmapWithMatrix(global::PDFiumSharp.Native.FpdfBitmapT bitmap, global::PDFiumSharp.Native.FpdfPageT page, global::PDFiumSharp.Native.FS_MATRIX_ matrix, global::PDFiumSharp.Native.FS_RECTF_ clipping, int flags)
        {
            var __arg0 = bitmap is null ? __IntPtr.Zero : bitmap.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg2 = matrix is null ? __IntPtr.Zero : matrix.__Instance;
            var __arg3 = clipping is null ? __IntPtr.Zero : clipping.__Instance;
            __Internal.FPDF_RenderPageBitmapWithMatrix(__arg0, __arg1, __arg2, __arg3, flags);
        }

        public static void FPDF_ClosePage(global::PDFiumSharp.Native.FpdfPageT page)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            __Internal.FPDF_ClosePage(__arg0);
        }

        public static void FPDF_CloseDocument(global::PDFiumSharp.Native.FpdfDocumentT document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            __Internal.FPDF_CloseDocument(__arg0);
        }

        public static bool FPDF_DeviceToPage(global::PDFiumSharp.Native.FpdfPageT page, int start_x, int start_y, int size_x, int size_y, int rotate, int device_x, int device_y, ref double page_x, ref double page_y)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            fixed (double* __page_x8 = &page_x)
            {
                var __arg8 = __page_x8;
                fixed (double* __page_y9 = &page_y)
                {
                    var __arg9 = __page_y9;
                    var __ret = __Internal.FPDF_DeviceToPage(__arg0, start_x, start_y, size_x, size_y, rotate, device_x, device_y, __arg8, __arg9);
                    return __ret;
                }
            }
        }

        public static bool FPDF_PageToDevice(global::PDFiumSharp.Native.FpdfPageT page, int start_x, int start_y, int size_x, int size_y, int rotate, double page_x, double page_y, ref int device_x, ref int device_y)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            fixed (int* __device_x8 = &device_x)
            {
                var __arg8 = __device_x8;
                fixed (int* __device_y9 = &device_y)
                {
                    var __arg9 = __device_y9;
                    var __ret = __Internal.FPDF_PageToDevice(__arg0, start_x, start_y, size_x, size_y, rotate, page_x, page_y, __arg8, __arg9);
                    return __ret;
                }
            }
        }

        public static global::PDFiumSharp.Native.FpdfBitmapT FPDFBitmapCreate(int width, int height, int alpha)
        {
            var __ret = __Internal.FPDFBitmapCreate(width, height, alpha);
            var __result0 = global::PDFiumSharp.Native.FpdfBitmapT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static global::PDFiumSharp.Native.FpdfBitmapT FPDFBitmapCreateEx(int width, int height, int format, __IntPtr first_scan, int stride)
        {
            var __ret = __Internal.FPDFBitmapCreateEx(width, height, format, first_scan, stride);
            var __result0 = global::PDFiumSharp.Native.FpdfBitmapT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static int FPDFBitmapGetFormat(global::PDFiumSharp.Native.FpdfBitmapT bitmap)
        {
            var __arg0 = bitmap is null ? __IntPtr.Zero : bitmap.__Instance;
            var __ret = __Internal.FPDFBitmapGetFormat(__arg0);
            return __ret;
        }

        public static void FPDFBitmapFillRect(global::PDFiumSharp.Native.FpdfBitmapT bitmap, int left, int top, int width, int height, uint color)
        {
            var __arg0 = bitmap is null ? __IntPtr.Zero : bitmap.__Instance;
            __Internal.FPDFBitmapFillRect(__arg0, left, top, width, height, color);
        }

        public static __IntPtr FPDFBitmapGetBuffer(global::PDFiumSharp.Native.FpdfBitmapT bitmap)
        {
            var __arg0 = bitmap is null ? __IntPtr.Zero : bitmap.__Instance;
            var __ret = __Internal.FPDFBitmapGetBuffer(__arg0);
            return __ret;
        }

        public static int FPDFBitmapGetWidth(global::PDFiumSharp.Native.FpdfBitmapT bitmap)
        {
            var __arg0 = bitmap is null ? __IntPtr.Zero : bitmap.__Instance;
            var __ret = __Internal.FPDFBitmapGetWidth(__arg0);
            return __ret;
        }

        public static int FPDFBitmapGetHeight(global::PDFiumSharp.Native.FpdfBitmapT bitmap)
        {
            var __arg0 = bitmap is null ? __IntPtr.Zero : bitmap.__Instance;
            var __ret = __Internal.FPDFBitmapGetHeight(__arg0);
            return __ret;
        }

        public static int FPDFBitmapGetStride(global::PDFiumSharp.Native.FpdfBitmapT bitmap)
        {
            var __arg0 = bitmap is null ? __IntPtr.Zero : bitmap.__Instance;
            var __ret = __Internal.FPDFBitmapGetStride(__arg0);
            return __ret;
        }

        public static void FPDFBitmapDestroy(global::PDFiumSharp.Native.FpdfBitmapT bitmap)
        {
            var __arg0 = bitmap is null ? __IntPtr.Zero : bitmap.__Instance;
            __Internal.FPDFBitmapDestroy(__arg0);
        }

        public static bool FPDF_VIEWERREF_GetPrintScaling(global::PDFiumSharp.Native.FpdfDocumentT document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDF_VIEWERREF_GetPrintScaling(__arg0);
            return __ret;
        }

        public static int FPDF_VIEWERREF_GetNumCopies(global::PDFiumSharp.Native.FpdfDocumentT document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDF_VIEWERREF_GetNumCopies(__arg0);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfPagerangeT FPDF_VIEWERREF_GetPrintPageRange(global::PDFiumSharp.Native.FpdfDocumentT document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDF_VIEWERREF_GetPrintPageRange(__arg0);
            var __result0 = global::PDFiumSharp.Native.FpdfPagerangeT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static ulong FPDF_VIEWERREF_GetPrintPageRangeCount(global::PDFiumSharp.Native.FpdfPagerangeT pagerange)
        {
            var __arg0 = pagerange is null ? __IntPtr.Zero : pagerange.__Instance;
            var __ret = __Internal.FPDF_VIEWERREF_GetPrintPageRangeCount(__arg0);
            return __ret;
        }

        public static int FPDF_VIEWERREF_GetPrintPageRangeElement(global::PDFiumSharp.Native.FpdfPagerangeT pagerange, ulong index)
        {
            var __arg0 = pagerange is null ? __IntPtr.Zero : pagerange.__Instance;
            var __ret = __Internal.FPDF_VIEWERREF_GetPrintPageRangeElement(__arg0, index);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FPDF_DUPLEXTYPE_ FPDF_VIEWERREF_GetDuplex(global::PDFiumSharp.Native.FpdfDocumentT document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDF_VIEWERREF_GetDuplex(__arg0);
            return __ret;
        }

        public static uint FPDF_VIEWERREF_GetName(global::PDFiumSharp.Native.FpdfDocumentT document, string key, sbyte* buffer, uint length)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDF_VIEWERREF_GetName(__arg0, key, buffer, length);
            return __ret;
        }

        public static uint FPDF_CountNamedDests(global::PDFiumSharp.Native.FpdfDocumentT document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDF_CountNamedDests(__arg0);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfDestT FPDF_GetNamedDestByName(global::PDFiumSharp.Native.FpdfDocumentT document, string name)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDF_GetNamedDestByName(__arg0, name);
            var __result0 = global::PDFiumSharp.Native.FpdfDestT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static global::PDFiumSharp.Native.FpdfDestT FPDF_GetNamedDest(global::PDFiumSharp.Native.FpdfDocumentT document, int index, __IntPtr buffer, ref int buflen)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            fixed (int* __buflen3 = &buflen)
            {
                var __arg3 = __buflen3;
                var __ret = __Internal.FPDF_GetNamedDest(__arg0, index, buffer, __arg3);
                var __result0 = global::PDFiumSharp.Native.FpdfDestT.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public static int FPDF_GetXFAPacketCount(global::PDFiumSharp.Native.FpdfDocumentT document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDF_GetXFAPacketCount(__arg0);
            return __ret;
        }

        public static uint FPDF_GetXFAPacketName(global::PDFiumSharp.Native.FpdfDocumentT document, int index, __IntPtr buffer, uint buflen)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDF_GetXFAPacketName(__arg0, index, buffer, buflen);
            return __ret;
        }

        public static bool FPDF_GetXFAPacketContent(global::PDFiumSharp.Native.FpdfDocumentT document, int index, __IntPtr buffer, uint buflen, ref uint out_buflen)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            fixed (uint* __out_buflen4 = &out_buflen)
            {
                var __arg4 = __out_buflen4;
                var __ret = __Internal.FPDF_GetXFAPacketContent(__arg0, index, buffer, buflen, __arg4);
                return __ret;
            }
        }
    }

    public enum FPDFANNOT_COLORTYPE
    {
        FPDFANNOT_COLORTYPE_Color = 0,
        FPDFANNOT_COLORTYPE_InteriorColor = 1
    }

    public unsafe partial class fpdf_annot
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_IsSupportedSubtype", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotIsSupportedSubtype(int subtype);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_CreateAnnot", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPageCreateAnnot(__IntPtr page, int subtype);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_GetAnnotCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPageGetAnnotCount(__IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_GetAnnot", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPageGetAnnot(__IntPtr page, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_GetAnnotIndex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPageGetAnnotIndex(__IntPtr page, __IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_CloseAnnot", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPageCloseAnnot(__IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_RemoveAnnot", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageRemoveAnnot(__IntPtr page, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetSubtype", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAnnotGetSubtype(__IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_IsObjectSupportedSubtype", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotIsObjectSupportedSubtype(int subtype);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_UpdateObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotUpdateObject(__IntPtr annot, __IntPtr obj);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_AddInkStroke", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAnnotAddInkStroke(__IntPtr annot, __IntPtr points, ulong point_count);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_RemoveInkList", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotRemoveInkList(__IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_AppendObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotAppendObject(__IntPtr annot, __IntPtr obj);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetObjectCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAnnotGetObjectCount(__IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFAnnotGetObject(__IntPtr annot, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_RemoveObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotRemoveObject(__IntPtr annot, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_SetColor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotSetColor(__IntPtr annot, global::PDFiumSharp.Native.FPDFANNOT_COLORTYPE type, uint R, uint G, uint B, uint A);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetColor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotGetColor(__IntPtr annot, global::PDFiumSharp.Native.FPDFANNOT_COLORTYPE type, uint* R, uint* G, uint* B, uint* A);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_HasAttachmentPoints", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotHasAttachmentPoints(__IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_SetAttachmentPoints", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotSetAttachmentPoints(__IntPtr annot, ulong quad_index, __IntPtr quad_points);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_AppendAttachmentPoints", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotAppendAttachmentPoints(__IntPtr annot, __IntPtr quad_points);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_CountAttachmentPoints", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong FPDFAnnotCountAttachmentPoints(__IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetAttachmentPoints", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotGetAttachmentPoints(__IntPtr annot, ulong quad_index, __IntPtr quad_points);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_SetRect", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotSetRect(__IntPtr annot, __IntPtr rect);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetRect", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotGetRect(__IntPtr annot, __IntPtr rect);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetVertices", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFAnnotGetVertices(__IntPtr annot, __IntPtr buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetInkListCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFAnnotGetInkListCount(__IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetInkListPath", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFAnnotGetInkListPath(__IntPtr annot, uint path_index, __IntPtr buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetLine", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotGetLine(__IntPtr annot, __IntPtr start, __IntPtr end);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_SetBorder", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotSetBorder(__IntPtr annot, float horizontal_radius, float vertical_radius, float border_width);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetBorder", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotGetBorder(__IntPtr annot, float* horizontal_radius, float* vertical_radius, float* border_width);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_HasKey", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotHasKey(__IntPtr annot, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string key);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetValueType", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAnnotGetValueType(__IntPtr annot, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string key);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_SetStringValue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotSetStringValue(__IntPtr annot, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string key, [MarshalAs(UnmanagedType.LPWStr)] string value);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetStringValue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFAnnotGetStringValue(__IntPtr annot, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string key, char* buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetNumberValue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotGetNumberValue(__IntPtr annot, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string key, float* value);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_SetAP", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotSetAP(__IntPtr annot, int appearanceMode, [MarshalAs(UnmanagedType.LPWStr)] string value);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetAP", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFAnnotGetAP(__IntPtr annot, int appearanceMode, char* buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetLinkedAnnot", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFAnnotGetLinkedAnnot(__IntPtr annot, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string key);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetFlags", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAnnotGetFlags(__IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_SetFlags", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotSetFlags(__IntPtr annot, int flags);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetFormFieldFlags", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAnnotGetFormFieldFlags(__IntPtr handle, __IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetFormFieldAtPoint", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFAnnotGetFormFieldAtPoint(__IntPtr hHandle, __IntPtr page, __IntPtr point);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetFormFieldName", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFAnnotGetFormFieldName(__IntPtr hHandle, __IntPtr annot, char* buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetFormFieldType", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAnnotGetFormFieldType(__IntPtr hHandle, __IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetFormFieldValue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFAnnotGetFormFieldValue(__IntPtr hHandle, __IntPtr annot, char* buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetOptionCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAnnotGetOptionCount(__IntPtr hHandle, __IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetOptionLabel", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFAnnotGetOptionLabel(__IntPtr hHandle, __IntPtr annot, int index, char* buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_IsOptionSelected", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotIsOptionSelected(__IntPtr handle, __IntPtr annot, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetFontSize", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotGetFontSize(__IntPtr hHandle, __IntPtr annot, float* value);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_IsChecked", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotIsChecked(__IntPtr hHandle, __IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_SetFocusableSubtypes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotSetFocusableSubtypes(__IntPtr hHandle, int* subtypes, ulong count);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetFocusableSubtypesCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAnnotGetFocusableSubtypesCount(__IntPtr hHandle);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetFocusableSubtypes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotGetFocusableSubtypes(__IntPtr hHandle, int* subtypes, ulong count);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetLink", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFAnnotGetLink(__IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetFormControlCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAnnotGetFormControlCount(__IntPtr hHandle, __IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetFormControlIndex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAnnotGetFormControlIndex(__IntPtr hHandle, __IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_GetFormFieldExportValue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFAnnotGetFormFieldExportValue(__IntPtr hHandle, __IntPtr annot, char* buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAnnot_SetURI", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAnnotSetURI(__IntPtr annot, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string uri);
        }

        public static bool FPDFAnnotIsSupportedSubtype(int subtype)
        {
            var __ret = __Internal.FPDFAnnotIsSupportedSubtype(subtype);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfAnnotationT FPDFPageCreateAnnot(global::PDFiumSharp.Native.FpdfPageT page, int subtype)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDFPageCreateAnnot(__arg0, subtype);
            var __result0 = global::PDFiumSharp.Native.FpdfAnnotationT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static int FPDFPageGetAnnotCount(global::PDFiumSharp.Native.FpdfPageT page)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDFPageGetAnnotCount(__arg0);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfAnnotationT FPDFPageGetAnnot(global::PDFiumSharp.Native.FpdfPageT page, int index)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDFPageGetAnnot(__arg0, index);
            var __result0 = global::PDFiumSharp.Native.FpdfAnnotationT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static int FPDFPageGetAnnotIndex(global::PDFiumSharp.Native.FpdfPageT page, global::PDFiumSharp.Native.FpdfAnnotationT annot)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFPageGetAnnotIndex(__arg0, __arg1);
            return __ret;
        }

        public static void FPDFPageCloseAnnot(global::PDFiumSharp.Native.FpdfAnnotationT annot)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            __Internal.FPDFPageCloseAnnot(__arg0);
        }

        public static bool FPDFPageRemoveAnnot(global::PDFiumSharp.Native.FpdfPageT page, int index)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDFPageRemoveAnnot(__arg0, index);
            return __ret;
        }

        public static int FPDFAnnotGetSubtype(global::PDFiumSharp.Native.FpdfAnnotationT annot)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotGetSubtype(__arg0);
            return __ret;
        }

        public static bool FPDFAnnotIsObjectSupportedSubtype(int subtype)
        {
            var __ret = __Internal.FPDFAnnotIsObjectSupportedSubtype(subtype);
            return __ret;
        }

        public static bool FPDFAnnotUpdateObject(global::PDFiumSharp.Native.FpdfAnnotationT annot, global::PDFiumSharp.Native.FpdfPageobjectT obj)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __arg1 = obj is null ? __IntPtr.Zero : obj.__Instance;
            var __ret = __Internal.FPDFAnnotUpdateObject(__arg0, __arg1);
            return __ret;
        }

        public static int FPDFAnnotAddInkStroke(global::PDFiumSharp.Native.FpdfAnnotationT annot, global::PDFiumSharp.Native.FS_POINTF_ points, ulong point_count)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __arg1 = points is null ? __IntPtr.Zero : points.__Instance;
            var __ret = __Internal.FPDFAnnotAddInkStroke(__arg0, __arg1, point_count);
            return __ret;
        }

        public static bool FPDFAnnotRemoveInkList(global::PDFiumSharp.Native.FpdfAnnotationT annot)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotRemoveInkList(__arg0);
            return __ret;
        }

        public static bool FPDFAnnotAppendObject(global::PDFiumSharp.Native.FpdfAnnotationT annot, global::PDFiumSharp.Native.FpdfPageobjectT obj)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __arg1 = obj is null ? __IntPtr.Zero : obj.__Instance;
            var __ret = __Internal.FPDFAnnotAppendObject(__arg0, __arg1);
            return __ret;
        }

        public static int FPDFAnnotGetObjectCount(global::PDFiumSharp.Native.FpdfAnnotationT annot)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotGetObjectCount(__arg0);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfPageobjectT FPDFAnnotGetObject(global::PDFiumSharp.Native.FpdfAnnotationT annot, int index)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotGetObject(__arg0, index);
            var __result0 = global::PDFiumSharp.Native.FpdfPageobjectT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static bool FPDFAnnotRemoveObject(global::PDFiumSharp.Native.FpdfAnnotationT annot, int index)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotRemoveObject(__arg0, index);
            return __ret;
        }

        public static bool FPDFAnnotSetColor(global::PDFiumSharp.Native.FpdfAnnotationT annot, global::PDFiumSharp.Native.FPDFANNOT_COLORTYPE type, uint R, uint G, uint B, uint A)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotSetColor(__arg0, type, R, G, B, A);
            return __ret;
        }

        public static bool FPDFAnnotGetColor(global::PDFiumSharp.Native.FpdfAnnotationT annot, global::PDFiumSharp.Native.FPDFANNOT_COLORTYPE type, ref uint R, ref uint G, ref uint B, ref uint A)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            fixed (uint* __R2 = &R)
            {
                var __arg2 = __R2;
                fixed (uint* __G3 = &G)
                {
                    var __arg3 = __G3;
                    fixed (uint* __B4 = &B)
                    {
                        var __arg4 = __B4;
                        fixed (uint* __A5 = &A)
                        {
                            var __arg5 = __A5;
                            var __ret = __Internal.FPDFAnnotGetColor(__arg0, type, __arg2, __arg3, __arg4, __arg5);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static bool FPDFAnnotHasAttachmentPoints(global::PDFiumSharp.Native.FpdfAnnotationT annot)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotHasAttachmentPoints(__arg0);
            return __ret;
        }

        public static bool FPDFAnnotSetAttachmentPoints(global::PDFiumSharp.Native.FpdfAnnotationT annot, ulong quad_index, global::PDFiumSharp.Native.FS_QUADPOINTSF quad_points)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __arg2 = quad_points is null ? __IntPtr.Zero : quad_points.__Instance;
            var __ret = __Internal.FPDFAnnotSetAttachmentPoints(__arg0, quad_index, __arg2);
            return __ret;
        }

        public static bool FPDFAnnotAppendAttachmentPoints(global::PDFiumSharp.Native.FpdfAnnotationT annot, global::PDFiumSharp.Native.FS_QUADPOINTSF quad_points)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __arg1 = quad_points is null ? __IntPtr.Zero : quad_points.__Instance;
            var __ret = __Internal.FPDFAnnotAppendAttachmentPoints(__arg0, __arg1);
            return __ret;
        }

        public static ulong FPDFAnnotCountAttachmentPoints(global::PDFiumSharp.Native.FpdfAnnotationT annot)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotCountAttachmentPoints(__arg0);
            return __ret;
        }

        public static bool FPDFAnnotGetAttachmentPoints(global::PDFiumSharp.Native.FpdfAnnotationT annot, ulong quad_index, global::PDFiumSharp.Native.FS_QUADPOINTSF quad_points)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __arg2 = quad_points is null ? __IntPtr.Zero : quad_points.__Instance;
            var __ret = __Internal.FPDFAnnotGetAttachmentPoints(__arg0, quad_index, __arg2);
            return __ret;
        }

        public static bool FPDFAnnotSetRect(global::PDFiumSharp.Native.FpdfAnnotationT annot, global::PDFiumSharp.Native.FS_RECTF_ rect)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __arg1 = rect is null ? __IntPtr.Zero : rect.__Instance;
            var __ret = __Internal.FPDFAnnotSetRect(__arg0, __arg1);
            return __ret;
        }

        public static bool FPDFAnnotGetRect(global::PDFiumSharp.Native.FpdfAnnotationT annot, global::PDFiumSharp.Native.FS_RECTF_ rect)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __arg1 = rect is null ? __IntPtr.Zero : rect.__Instance;
            var __ret = __Internal.FPDFAnnotGetRect(__arg0, __arg1);
            return __ret;
        }

        public static uint FPDFAnnotGetVertices(global::PDFiumSharp.Native.FpdfAnnotationT annot, global::PDFiumSharp.Native.FS_POINTF_ buffer, uint length)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __arg1 = buffer is null ? __IntPtr.Zero : buffer.__Instance;
            var __ret = __Internal.FPDFAnnotGetVertices(__arg0, __arg1, length);
            return __ret;
        }

        public static uint FPDFAnnotGetInkListCount(global::PDFiumSharp.Native.FpdfAnnotationT annot)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotGetInkListCount(__arg0);
            return __ret;
        }

        public static uint FPDFAnnotGetInkListPath(global::PDFiumSharp.Native.FpdfAnnotationT annot, uint path_index, global::PDFiumSharp.Native.FS_POINTF_ buffer, uint length)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __arg2 = buffer is null ? __IntPtr.Zero : buffer.__Instance;
            var __ret = __Internal.FPDFAnnotGetInkListPath(__arg0, path_index, __arg2, length);
            return __ret;
        }

        public static bool FPDFAnnotGetLine(global::PDFiumSharp.Native.FpdfAnnotationT annot, global::PDFiumSharp.Native.FS_POINTF_ start, global::PDFiumSharp.Native.FS_POINTF_ end)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __arg1 = start is null ? __IntPtr.Zero : start.__Instance;
            var __arg2 = end is null ? __IntPtr.Zero : end.__Instance;
            var __ret = __Internal.FPDFAnnotGetLine(__arg0, __arg1, __arg2);
            return __ret;
        }

        public static bool FPDFAnnotSetBorder(global::PDFiumSharp.Native.FpdfAnnotationT annot, float horizontal_radius, float vertical_radius, float border_width)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotSetBorder(__arg0, horizontal_radius, vertical_radius, border_width);
            return __ret;
        }

        public static bool FPDFAnnotGetBorder(global::PDFiumSharp.Native.FpdfAnnotationT annot, ref float horizontal_radius, ref float vertical_radius, ref float border_width)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            fixed (float* __horizontal_radius1 = &horizontal_radius)
            {
                var __arg1 = __horizontal_radius1;
                fixed (float* __vertical_radius2 = &vertical_radius)
                {
                    var __arg2 = __vertical_radius2;
                    fixed (float* __border_width3 = &border_width)
                    {
                        var __arg3 = __border_width3;
                        var __ret = __Internal.FPDFAnnotGetBorder(__arg0, __arg1, __arg2, __arg3);
                        return __ret;
                    }
                }
            }
        }

        public static bool FPDFAnnotHasKey(global::PDFiumSharp.Native.FpdfAnnotationT annot, string key)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotHasKey(__arg0, key);
            return __ret;
        }

        public static int FPDFAnnotGetValueType(global::PDFiumSharp.Native.FpdfAnnotationT annot, string key)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotGetValueType(__arg0, key);
            return __ret;
        }

        public static bool FPDFAnnotSetStringValue(global::PDFiumSharp.Native.FpdfAnnotationT annot, string key, string value)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotSetStringValue(__arg0, key, value);
            return __ret;
        }

        public static uint FPDFAnnotGetStringValue(global::PDFiumSharp.Native.FpdfAnnotationT annot, string key, char* buffer, uint buflen)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotGetStringValue(__arg0, key, buffer, buflen);
            return __ret;
        }

        public static bool FPDFAnnotGetNumberValue(global::PDFiumSharp.Native.FpdfAnnotationT annot, string key, ref float value)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            fixed (float* __value2 = &value)
            {
                var __arg2 = __value2;
                var __ret = __Internal.FPDFAnnotGetNumberValue(__arg0, key, __arg2);
                return __ret;
            }
        }

        public static bool FPDFAnnotSetAP(global::PDFiumSharp.Native.FpdfAnnotationT annot, int appearanceMode, string value)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotSetAP(__arg0, appearanceMode, value);
            return __ret;
        }

        public static uint FPDFAnnotGetAP(global::PDFiumSharp.Native.FpdfAnnotationT annot, int appearanceMode, char* buffer, uint buflen)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotGetAP(__arg0, appearanceMode, buffer, buflen);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfAnnotationT FPDFAnnotGetLinkedAnnot(global::PDFiumSharp.Native.FpdfAnnotationT annot, string key)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotGetLinkedAnnot(__arg0, key);
            var __result0 = global::PDFiumSharp.Native.FpdfAnnotationT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static int FPDFAnnotGetFlags(global::PDFiumSharp.Native.FpdfAnnotationT annot)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotGetFlags(__arg0);
            return __ret;
        }

        public static bool FPDFAnnotSetFlags(global::PDFiumSharp.Native.FpdfAnnotationT annot, int flags)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotSetFlags(__arg0, flags);
            return __ret;
        }

        public static int FPDFAnnotGetFormFieldFlags(global::PDFiumSharp.Native.FpdfFormHandleT handle, global::PDFiumSharp.Native.FpdfAnnotationT annot)
        {
            var __arg0 = handle is null ? __IntPtr.Zero : handle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotGetFormFieldFlags(__arg0, __arg1);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfAnnotationT FPDFAnnotGetFormFieldAtPoint(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page, global::PDFiumSharp.Native.FS_POINTF_ point)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg2 = point is null ? __IntPtr.Zero : point.__Instance;
            var __ret = __Internal.FPDFAnnotGetFormFieldAtPoint(__arg0, __arg1, __arg2);
            var __result0 = global::PDFiumSharp.Native.FpdfAnnotationT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static uint FPDFAnnotGetFormFieldName(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfAnnotationT annot, char* buffer, uint buflen)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotGetFormFieldName(__arg0, __arg1, buffer, buflen);
            return __ret;
        }

        public static int FPDFAnnotGetFormFieldType(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfAnnotationT annot)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotGetFormFieldType(__arg0, __arg1);
            return __ret;
        }

        public static uint FPDFAnnotGetFormFieldValue(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfAnnotationT annot, char* buffer, uint buflen)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotGetFormFieldValue(__arg0, __arg1, buffer, buflen);
            return __ret;
        }

        public static int FPDFAnnotGetOptionCount(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfAnnotationT annot)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotGetOptionCount(__arg0, __arg1);
            return __ret;
        }

        public static uint FPDFAnnotGetOptionLabel(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfAnnotationT annot, int index, char* buffer, uint buflen)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotGetOptionLabel(__arg0, __arg1, index, buffer, buflen);
            return __ret;
        }

        public static bool FPDFAnnotIsOptionSelected(global::PDFiumSharp.Native.FpdfFormHandleT handle, global::PDFiumSharp.Native.FpdfAnnotationT annot, int index)
        {
            var __arg0 = handle is null ? __IntPtr.Zero : handle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotIsOptionSelected(__arg0, __arg1, index);
            return __ret;
        }

        public static bool FPDFAnnotGetFontSize(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfAnnotationT annot, ref float value)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            fixed (float* __value2 = &value)
            {
                var __arg2 = __value2;
                var __ret = __Internal.FPDFAnnotGetFontSize(__arg0, __arg1, __arg2);
                return __ret;
            }
        }

        public static bool FPDFAnnotIsChecked(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfAnnotationT annot)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotIsChecked(__arg0, __arg1);
            return __ret;
        }

        public static bool FPDFAnnotSetFocusableSubtypes(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, ref int subtypes, ulong count)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            fixed (int* __subtypes1 = &subtypes)
            {
                var __arg1 = __subtypes1;
                var __ret = __Internal.FPDFAnnotSetFocusableSubtypes(__arg0, __arg1, count);
                return __ret;
            }
        }

        public static int FPDFAnnotGetFocusableSubtypesCount(global::PDFiumSharp.Native.FpdfFormHandleT hHandle)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __ret = __Internal.FPDFAnnotGetFocusableSubtypesCount(__arg0);
            return __ret;
        }

        public static bool FPDFAnnotGetFocusableSubtypes(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, ref int subtypes, ulong count)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            fixed (int* __subtypes1 = &subtypes)
            {
                var __arg1 = __subtypes1;
                var __ret = __Internal.FPDFAnnotGetFocusableSubtypes(__arg0, __arg1, count);
                return __ret;
            }
        }

        public static global::PDFiumSharp.Native.FpdfLinkT FPDFAnnotGetLink(global::PDFiumSharp.Native.FpdfAnnotationT annot)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotGetLink(__arg0);
            var __result0 = global::PDFiumSharp.Native.FpdfLinkT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static int FPDFAnnotGetFormControlCount(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfAnnotationT annot)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotGetFormControlCount(__arg0, __arg1);
            return __ret;
        }

        public static int FPDFAnnotGetFormControlIndex(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfAnnotationT annot)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotGetFormControlIndex(__arg0, __arg1);
            return __ret;
        }

        public static uint FPDFAnnotGetFormFieldExportValue(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfAnnotationT annot, char* buffer, uint buflen)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotGetFormFieldExportValue(__arg0, __arg1, buffer, buflen);
            return __ret;
        }

        public static bool FPDFAnnotSetURI(global::PDFiumSharp.Native.FpdfAnnotationT annot, string uri)
        {
            var __arg0 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FPDFAnnotSetURI(__arg0, uri);
            return __ret;
        }
    }

    public enum FPDF_FILEIDTYPE
    {
        FILEIDTYPE_PERMANENT = 0,
        FILEIDTYPE_CHANGING = 1
    }

    public unsafe partial class FS_QUADPOINTSF : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 32)]
        public partial struct __Internal
        {
            internal float x1;
            internal float y1;
            internal float x2;
            internal float y2;
            internal float x3;
            internal float y3;
            internal float x4;
            internal float y4;

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0_FS_QUADPOINTSF@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FS_QUADPOINTSF> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FS_QUADPOINTSF>();

        protected bool __ownsNativeInstance;

        internal static FS_QUADPOINTSF __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FS_QUADPOINTSF(native.ToPointer(), skipVTables);
        }

        internal static FS_QUADPOINTSF __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FS_QUADPOINTSF)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FS_QUADPOINTSF __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FS_QUADPOINTSF(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FS_QUADPOINTSF(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FS_QUADPOINTSF(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FS_QUADPOINTSF()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FS_QUADPOINTSF.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FS_QUADPOINTSF(global::PDFiumSharp.Native.FS_QUADPOINTSF _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FS_QUADPOINTSF.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FS_QUADPOINTSF.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FS_QUADPOINTSF.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float X1
        {
            get
            {
                return ((__Internal*)__Instance)->x1;
            }

            set
            {
                ((__Internal*)__Instance)->x1 = value;
            }
        }

        public float Y1
        {
            get
            {
                return ((__Internal*)__Instance)->y1;
            }

            set
            {
                ((__Internal*)__Instance)->y1 = value;
            }
        }

        public float X2
        {
            get
            {
                return ((__Internal*)__Instance)->x2;
            }

            set
            {
                ((__Internal*)__Instance)->x2 = value;
            }
        }

        public float Y2
        {
            get
            {
                return ((__Internal*)__Instance)->y2;
            }

            set
            {
                ((__Internal*)__Instance)->y2 = value;
            }
        }

        public float X3
        {
            get
            {
                return ((__Internal*)__Instance)->x3;
            }

            set
            {
                ((__Internal*)__Instance)->x3 = value;
            }
        }

        public float Y3
        {
            get
            {
                return ((__Internal*)__Instance)->y3;
            }

            set
            {
                ((__Internal*)__Instance)->y3 = value;
            }
        }

        public float X4
        {
            get
            {
                return ((__Internal*)__Instance)->x4;
            }

            set
            {
                ((__Internal*)__Instance)->x4 = value;
            }
        }

        public float Y4
        {
            get
            {
                return ((__Internal*)__Instance)->y4;
            }

            set
            {
                ((__Internal*)__Instance)->y4 = value;
            }
        }
    }

    public unsafe partial class fpdf_doc
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFBookmark_GetFirstChild", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFBookmarkGetFirstChild(__IntPtr document, __IntPtr bookmark);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFBookmark_GetNextSibling", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFBookmarkGetNextSibling(__IntPtr document, __IntPtr bookmark);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFBookmark_GetTitle", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFBookmarkGetTitle(__IntPtr bookmark, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFBookmark_Find", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFBookmarkFind(__IntPtr document, [MarshalAs(UnmanagedType.LPWStr)] string title);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFBookmark_GetDest", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFBookmarkGetDest(__IntPtr document, __IntPtr bookmark);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFBookmark_GetAction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFBookmarkGetAction(__IntPtr bookmark);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAction_GetType", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFActionGetType(__IntPtr action);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAction_GetDest", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFActionGetDest(__IntPtr document, __IntPtr action);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAction_GetFilePath", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFActionGetFilePath(__IntPtr action, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAction_GetURIPath", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFActionGetURIPath(__IntPtr document, __IntPtr action, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFDest_GetDestPageIndex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFDestGetDestPageIndex(__IntPtr document, __IntPtr dest);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFDest_GetView", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFDestGetView(__IntPtr dest, uint* pNumParams, float* pParams);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFDest_GetLocationInPage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFDestGetLocationInPage(__IntPtr dest, bool* hasXVal, bool* hasYVal, bool* hasZoomVal, float* x, float* y, float* zoom);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFLink_GetLinkAtPoint", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFLinkGetLinkAtPoint(__IntPtr page, double x, double y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFLink_GetLinkZOrderAtPoint", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFLinkGetLinkZOrderAtPoint(__IntPtr page, double x, double y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFLink_GetDest", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFLinkGetDest(__IntPtr document, __IntPtr link);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFLink_GetAction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFLinkGetAction(__IntPtr link);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFLink_Enumerate", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFLinkEnumerate(__IntPtr page, int* start_pos, __IntPtr link_annot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFLink_GetAnnot", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFLinkGetAnnot(__IntPtr page, __IntPtr link_annot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFLink_GetAnnotRect", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFLinkGetAnnotRect(__IntPtr link_annot, __IntPtr rect);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFLink_CountQuadPoints", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFLinkCountQuadPoints(__IntPtr link_annot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFLink_GetQuadPoints", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFLinkGetQuadPoints(__IntPtr link_annot, int quad_index, __IntPtr quad_points);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetPageAAction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_GetPageAAction(__IntPtr page, int aa_type);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetFileIdentifier", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDF_GetFileIdentifier(__IntPtr document, global::PDFiumSharp.Native.FPDF_FILEIDTYPE id_type, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetMetaText", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDF_GetMetaText(__IntPtr document, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string tag, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetPageLabel", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDF_GetPageLabel(__IntPtr document, int page_index, __IntPtr buffer, uint buflen);
        }

        public static global::PDFiumSharp.Native.FpdfBookmarkT FPDFBookmarkGetFirstChild(global::PDFiumSharp.Native.FpdfDocumentT document, global::PDFiumSharp.Native.FpdfBookmarkT bookmark)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg1 = bookmark is null ? __IntPtr.Zero : bookmark.__Instance;
            var __ret = __Internal.FPDFBookmarkGetFirstChild(__arg0, __arg1);
            var __result0 = global::PDFiumSharp.Native.FpdfBookmarkT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static global::PDFiumSharp.Native.FpdfBookmarkT FPDFBookmarkGetNextSibling(global::PDFiumSharp.Native.FpdfDocumentT document, global::PDFiumSharp.Native.FpdfBookmarkT bookmark)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg1 = bookmark is null ? __IntPtr.Zero : bookmark.__Instance;
            var __ret = __Internal.FPDFBookmarkGetNextSibling(__arg0, __arg1);
            var __result0 = global::PDFiumSharp.Native.FpdfBookmarkT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static uint FPDFBookmarkGetTitle(global::PDFiumSharp.Native.FpdfBookmarkT bookmark, __IntPtr buffer, uint buflen)
        {
            var __arg0 = bookmark is null ? __IntPtr.Zero : bookmark.__Instance;
            var __ret = __Internal.FPDFBookmarkGetTitle(__arg0, buffer, buflen);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfBookmarkT FPDFBookmarkFind(global::PDFiumSharp.Native.FpdfDocumentT document, string title)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDFBookmarkFind(__arg0, title);
            var __result0 = global::PDFiumSharp.Native.FpdfBookmarkT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static global::PDFiumSharp.Native.FpdfDestT FPDFBookmarkGetDest(global::PDFiumSharp.Native.FpdfDocumentT document, global::PDFiumSharp.Native.FpdfBookmarkT bookmark)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg1 = bookmark is null ? __IntPtr.Zero : bookmark.__Instance;
            var __ret = __Internal.FPDFBookmarkGetDest(__arg0, __arg1);
            var __result0 = global::PDFiumSharp.Native.FpdfDestT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static global::PDFiumSharp.Native.FpdfActionT FPDFBookmarkGetAction(global::PDFiumSharp.Native.FpdfBookmarkT bookmark)
        {
            var __arg0 = bookmark is null ? __IntPtr.Zero : bookmark.__Instance;
            var __ret = __Internal.FPDFBookmarkGetAction(__arg0);
            var __result0 = global::PDFiumSharp.Native.FpdfActionT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static uint FPDFActionGetType(global::PDFiumSharp.Native.FpdfActionT action)
        {
            var __arg0 = action is null ? __IntPtr.Zero : action.__Instance;
            var __ret = __Internal.FPDFActionGetType(__arg0);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfDestT FPDFActionGetDest(global::PDFiumSharp.Native.FpdfDocumentT document, global::PDFiumSharp.Native.FpdfActionT action)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg1 = action is null ? __IntPtr.Zero : action.__Instance;
            var __ret = __Internal.FPDFActionGetDest(__arg0, __arg1);
            var __result0 = global::PDFiumSharp.Native.FpdfDestT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static uint FPDFActionGetFilePath(global::PDFiumSharp.Native.FpdfActionT action, __IntPtr buffer, uint buflen)
        {
            var __arg0 = action is null ? __IntPtr.Zero : action.__Instance;
            var __ret = __Internal.FPDFActionGetFilePath(__arg0, buffer, buflen);
            return __ret;
        }

        public static uint FPDFActionGetURIPath(global::PDFiumSharp.Native.FpdfDocumentT document, global::PDFiumSharp.Native.FpdfActionT action, __IntPtr buffer, uint buflen)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg1 = action is null ? __IntPtr.Zero : action.__Instance;
            var __ret = __Internal.FPDFActionGetURIPath(__arg0, __arg1, buffer, buflen);
            return __ret;
        }

        public static int FPDFDestGetDestPageIndex(global::PDFiumSharp.Native.FpdfDocumentT document, global::PDFiumSharp.Native.FpdfDestT dest)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg1 = dest is null ? __IntPtr.Zero : dest.__Instance;
            var __ret = __Internal.FPDFDestGetDestPageIndex(__arg0, __arg1);
            return __ret;
        }

        public static uint FPDFDestGetView(global::PDFiumSharp.Native.FpdfDestT dest, ref uint pNumParams, ref float pParams)
        {
            var __arg0 = dest is null ? __IntPtr.Zero : dest.__Instance;
            fixed (uint* __pNumParams1 = &pNumParams)
            {
                var __arg1 = __pNumParams1;
                fixed (float* __pParams2 = &pParams)
                {
                    var __arg2 = __pParams2;
                    var __ret = __Internal.FPDFDestGetView(__arg0, __arg1, __arg2);
                    return __ret;
                }
            }
        }

        public static bool FPDFDestGetLocationInPage(global::PDFiumSharp.Native.FpdfDestT dest, ref bool hasXVal, ref bool hasYVal, ref bool hasZoomVal, ref float x, ref float y, ref float zoom)
        {
            var __arg0 = dest is null ? __IntPtr.Zero : dest.__Instance;
            fixed (bool* __hasXVal1 = &hasXVal)
            {
                var __arg1 = __hasXVal1;
                fixed (bool* __hasYVal2 = &hasYVal)
                {
                    var __arg2 = __hasYVal2;
                    fixed (bool* __hasZoomVal3 = &hasZoomVal)
                    {
                        var __arg3 = __hasZoomVal3;
                        fixed (float* __x4 = &x)
                        {
                            var __arg4 = __x4;
                            fixed (float* __y5 = &y)
                            {
                                var __arg5 = __y5;
                                fixed (float* __zoom6 = &zoom)
                                {
                                    var __arg6 = __zoom6;
                                    var __ret = __Internal.FPDFDestGetLocationInPage(__arg0, __arg1, __arg2, __arg3, __arg4, __arg5, __arg6);
                                    return __ret;
                                }
                            }
                        }
                    }
                }
            }
        }

        public static global::PDFiumSharp.Native.FpdfLinkT FPDFLinkGetLinkAtPoint(global::PDFiumSharp.Native.FpdfPageT page, double x, double y)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDFLinkGetLinkAtPoint(__arg0, x, y);
            var __result0 = global::PDFiumSharp.Native.FpdfLinkT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static int FPDFLinkGetLinkZOrderAtPoint(global::PDFiumSharp.Native.FpdfPageT page, double x, double y)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDFLinkGetLinkZOrderAtPoint(__arg0, x, y);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfDestT FPDFLinkGetDest(global::PDFiumSharp.Native.FpdfDocumentT document, global::PDFiumSharp.Native.FpdfLinkT link)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg1 = link is null ? __IntPtr.Zero : link.__Instance;
            var __ret = __Internal.FPDFLinkGetDest(__arg0, __arg1);
            var __result0 = global::PDFiumSharp.Native.FpdfDestT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static global::PDFiumSharp.Native.FpdfActionT FPDFLinkGetAction(global::PDFiumSharp.Native.FpdfLinkT link)
        {
            var __arg0 = link is null ? __IntPtr.Zero : link.__Instance;
            var __ret = __Internal.FPDFLinkGetAction(__arg0);
            var __result0 = global::PDFiumSharp.Native.FpdfActionT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static bool FPDFLinkEnumerate(global::PDFiumSharp.Native.FpdfPageT page, ref int start_pos, global::PDFiumSharp.Native.FpdfLinkT link_annot)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            fixed (int* __start_pos1 = &start_pos)
            {
                var __arg1 = __start_pos1;
                var ____arg2 = link_annot is null ? __IntPtr.Zero : link_annot.__Instance;
                var __arg2 = new __IntPtr(&____arg2);
                var __ret = __Internal.FPDFLinkEnumerate(__arg0, __arg1, __arg2);
                return __ret;
            }
        }

        public static global::PDFiumSharp.Native.FpdfAnnotationT FPDFLinkGetAnnot(global::PDFiumSharp.Native.FpdfPageT page, global::PDFiumSharp.Native.FpdfLinkT link_annot)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg1 = link_annot is null ? __IntPtr.Zero : link_annot.__Instance;
            var __ret = __Internal.FPDFLinkGetAnnot(__arg0, __arg1);
            var __result0 = global::PDFiumSharp.Native.FpdfAnnotationT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static bool FPDFLinkGetAnnotRect(global::PDFiumSharp.Native.FpdfLinkT link_annot, global::PDFiumSharp.Native.FS_RECTF_ rect)
        {
            var __arg0 = link_annot is null ? __IntPtr.Zero : link_annot.__Instance;
            var __arg1 = rect is null ? __IntPtr.Zero : rect.__Instance;
            var __ret = __Internal.FPDFLinkGetAnnotRect(__arg0, __arg1);
            return __ret;
        }

        public static int FPDFLinkCountQuadPoints(global::PDFiumSharp.Native.FpdfLinkT link_annot)
        {
            var __arg0 = link_annot is null ? __IntPtr.Zero : link_annot.__Instance;
            var __ret = __Internal.FPDFLinkCountQuadPoints(__arg0);
            return __ret;
        }

        public static bool FPDFLinkGetQuadPoints(global::PDFiumSharp.Native.FpdfLinkT link_annot, int quad_index, global::PDFiumSharp.Native.FS_QUADPOINTSF quad_points)
        {
            var __arg0 = link_annot is null ? __IntPtr.Zero : link_annot.__Instance;
            var __arg2 = quad_points is null ? __IntPtr.Zero : quad_points.__Instance;
            var __ret = __Internal.FPDFLinkGetQuadPoints(__arg0, quad_index, __arg2);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfActionT FPDF_GetPageAAction(global::PDFiumSharp.Native.FpdfPageT page, int aa_type)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDF_GetPageAAction(__arg0, aa_type);
            var __result0 = global::PDFiumSharp.Native.FpdfActionT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static uint FPDF_GetFileIdentifier(global::PDFiumSharp.Native.FpdfDocumentT document, global::PDFiumSharp.Native.FPDF_FILEIDTYPE id_type, __IntPtr buffer, uint buflen)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDF_GetFileIdentifier(__arg0, id_type, buffer, buflen);
            return __ret;
        }

        public static uint FPDF_GetMetaText(global::PDFiumSharp.Native.FpdfDocumentT document, string tag, __IntPtr buffer, uint buflen)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDF_GetMetaText(__arg0, tag, buffer, buflen);
            return __ret;
        }

        public static uint FPDF_GetPageLabel(global::PDFiumSharp.Native.FpdfDocumentT document, int page_index, __IntPtr buffer, uint buflen)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDF_GetPageLabel(__arg0, page_index, buffer, buflen);
            return __ret;
        }
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void TimerCallback(int idEvent);

    public unsafe partial class IPDF_JsPlatform : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 104)]
        public partial struct __Internal
        {
            internal int version;
            internal __IntPtr app_alert;
            internal __IntPtr app_beep;
            internal __IntPtr app_response;
            internal __IntPtr Doc_getFilePath;
            internal __IntPtr Doc_mail;
            internal __IntPtr Doc_print;
            internal __IntPtr Doc_submitForm;
            internal __IntPtr Doc_gotoPage;
            internal __IntPtr Field_browse;
            internal __IntPtr m_pFormfillinfo;
            internal __IntPtr m_isolate;
            internal uint m_v8EmbedderSlot;

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0_IPDF_JsPlatform@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.IPDF_JsPlatform> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.IPDF_JsPlatform>();

        protected bool __ownsNativeInstance;

        internal static IPDF_JsPlatform __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new IPDF_JsPlatform(native.ToPointer(), skipVTables);
        }

        internal static IPDF_JsPlatform __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (IPDF_JsPlatform)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static IPDF_JsPlatform __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IPDF_JsPlatform(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IPDF_JsPlatform(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IPDF_JsPlatform(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public IPDF_JsPlatform()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.IPDF_JsPlatform.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public IPDF_JsPlatform(global::PDFiumSharp.Native.IPDF_JsPlatform _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.IPDF_JsPlatform.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.IPDF_JsPlatform.__Internal*) __Instance) = *((global::PDFiumSharp.Native.IPDF_JsPlatform.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Version
        {
            get
            {
                return ((__Internal*)__Instance)->version;
            }

            set
            {
                ((__Internal*)__Instance)->version = value;
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_int___IntPtr_string_string_int_int AppAlert
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->app_alert;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_int___IntPtr_string_string_int_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_int___IntPtr_string_string_int_int));
            }

            set
            {
                ((__Internal*)__Instance)->app_alert = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr_int AppBeep
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->app_beep;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->app_beep = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_int___IntPtr_string_string_string_string_bool___IntPtr_int AppResponse
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->app_response;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_int___IntPtr_string_string_string_string_bool___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_int___IntPtr_string_string_string_string_bool___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->app_response = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr_int Doc_getFilePath
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Doc_getFilePath;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->Doc_getFilePath = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_int_bool_string_string_string_string_string Doc_mail
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Doc_mail;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_int_bool_string_string_string_string_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_int_bool_string_string_string_string_string));
            }

            set
            {
                ((__Internal*)__Instance)->Doc_mail = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr_bool_int_int_bool_bool_bool_bool_bool Doc_print
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Doc_print;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr_bool_int_int_bool_bool_bool_bool_bool) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr_bool_int_int_bool_bool_bool_bool_bool));
            }

            set
            {
                ((__Internal*)__Instance)->Doc_print = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_int_string Doc_submitForm
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Doc_submitForm;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_int_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_int_string));
            }

            set
            {
                ((__Internal*)__Instance)->Doc_submitForm = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr_int Doc_gotoPage
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Doc_gotoPage;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->Doc_gotoPage = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr_int Field_browse
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Field_browse;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->Field_browse = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public __IntPtr MPFormfillinfo
        {
            get
            {
                return ((__Internal*)__Instance)->m_pFormfillinfo;
            }

            set
            {
                ((__Internal*)__Instance)->m_pFormfillinfo = (__IntPtr) value;
            }
        }

        public __IntPtr MIsolate
        {
            get
            {
                return ((__Internal*)__Instance)->m_isolate;
            }

            set
            {
                ((__Internal*)__Instance)->m_isolate = (__IntPtr) value;
            }
        }

        public uint MV8EmbedderSlot
        {
            get
            {
                return ((__Internal*)__Instance)->m_v8EmbedderSlot;
            }

            set
            {
                ((__Internal*)__Instance)->m_v8EmbedderSlot = value;
            }
        }
    }

    public unsafe partial class FPDF_SYSTEMTIME : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal ushort wYear;
            internal ushort wMonth;
            internal ushort wDayOfWeek;
            internal ushort wDay;
            internal ushort wHour;
            internal ushort wMinute;
            internal ushort wSecond;
            internal ushort wMilliseconds;

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0_FPDF_SYSTEMTIME@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDF_SYSTEMTIME> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDF_SYSTEMTIME>();

        protected bool __ownsNativeInstance;

        internal static FPDF_SYSTEMTIME __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDF_SYSTEMTIME(native.ToPointer(), skipVTables);
        }

        internal static FPDF_SYSTEMTIME __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDF_SYSTEMTIME)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDF_SYSTEMTIME __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDF_SYSTEMTIME(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDF_SYSTEMTIME(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDF_SYSTEMTIME(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDF_SYSTEMTIME()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDF_SYSTEMTIME.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDF_SYSTEMTIME(global::PDFiumSharp.Native.FPDF_SYSTEMTIME _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDF_SYSTEMTIME.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDF_SYSTEMTIME.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDF_SYSTEMTIME.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ushort WYear
        {
            get
            {
                return ((__Internal*)__Instance)->wYear;
            }

            set
            {
                ((__Internal*)__Instance)->wYear = value;
            }
        }

        public ushort WMonth
        {
            get
            {
                return ((__Internal*)__Instance)->wMonth;
            }

            set
            {
                ((__Internal*)__Instance)->wMonth = value;
            }
        }

        public ushort WDayOfWeek
        {
            get
            {
                return ((__Internal*)__Instance)->wDayOfWeek;
            }

            set
            {
                ((__Internal*)__Instance)->wDayOfWeek = value;
            }
        }

        public ushort WDay
        {
            get
            {
                return ((__Internal*)__Instance)->wDay;
            }

            set
            {
                ((__Internal*)__Instance)->wDay = value;
            }
        }

        public ushort WHour
        {
            get
            {
                return ((__Internal*)__Instance)->wHour;
            }

            set
            {
                ((__Internal*)__Instance)->wHour = value;
            }
        }

        public ushort WMinute
        {
            get
            {
                return ((__Internal*)__Instance)->wMinute;
            }

            set
            {
                ((__Internal*)__Instance)->wMinute = value;
            }
        }

        public ushort WSecond
        {
            get
            {
                return ((__Internal*)__Instance)->wSecond;
            }

            set
            {
                ((__Internal*)__Instance)->wSecond = value;
            }
        }

        public ushort WMilliseconds
        {
            get
            {
                return ((__Internal*)__Instance)->wMilliseconds;
            }

            set
            {
                ((__Internal*)__Instance)->wMilliseconds = value;
            }
        }
    }

    public unsafe partial class FPDF_FORMFILLINFO : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 280)]
        public partial struct __Internal
        {
            internal int version;
            internal __IntPtr Release;
            internal __IntPtr FFI_Invalidate;
            internal __IntPtr FFI_OutputSelectedRect;
            internal __IntPtr FFI_SetCursor;
            internal __IntPtr FFI_SetTimer;
            internal __IntPtr FFI_KillTimer;
            internal __IntPtr FFI_GetLocalTime;
            internal __IntPtr FFI_OnChange;
            internal __IntPtr FFI_GetPage;
            internal __IntPtr FFI_GetCurrentPage;
            internal __IntPtr FFI_GetRotation;
            internal __IntPtr FFI_ExecuteNamedAction;
            internal __IntPtr FFI_SetTextFieldFocus;
            internal __IntPtr FFI_DoURIAction;
            internal __IntPtr FFI_DoGoToAction;
            internal __IntPtr m_pJsPlatform;
            internal bool xfa_disabled;
            internal __IntPtr FFI_DisplayCaret;
            internal __IntPtr FFI_GetCurrentPageIndex;
            internal __IntPtr FFI_SetCurrentPage;
            internal __IntPtr FFI_GotoURL;
            internal __IntPtr FFI_GetPageViewRect;
            internal __IntPtr FFI_PageEvent;
            internal __IntPtr FFI_PopupMenu;
            internal __IntPtr FFI_OpenFile;
            internal __IntPtr FFI_EmailTo;
            internal __IntPtr FFI_UploadTo;
            internal __IntPtr FFI_GetPlatform;
            internal __IntPtr FFI_GetLanguage;
            internal __IntPtr FFI_DownloadFromURL;
            internal __IntPtr FFI_PostRequestURL;
            internal __IntPtr FFI_PutRequestURL;
            internal __IntPtr FFI_OnFocusChange;
            internal __IntPtr FFI_DoURIActionWithKeyboardModifier;

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0_FPDF_FORMFILLINFO@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDF_FORMFILLINFO> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDF_FORMFILLINFO>();

        protected bool __ownsNativeInstance;

        internal static FPDF_FORMFILLINFO __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDF_FORMFILLINFO(native.ToPointer(), skipVTables);
        }

        internal static FPDF_FORMFILLINFO __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDF_FORMFILLINFO)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDF_FORMFILLINFO __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDF_FORMFILLINFO(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDF_FORMFILLINFO(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDF_FORMFILLINFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDF_FORMFILLINFO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDF_FORMFILLINFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDF_FORMFILLINFO(global::PDFiumSharp.Native.FPDF_FORMFILLINFO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDF_FORMFILLINFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDF_FORMFILLINFO.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDF_FORMFILLINFO.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Version
        {
            get
            {
                return ((__Internal*)__Instance)->version;
            }

            set
            {
                ((__Internal*)__Instance)->version = value;
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr Release
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Release;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->Release = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_double_double_double_double FFI_Invalidate
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_Invalidate;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_double_double_double_double) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_double_double_double_double));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_Invalidate = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_double_double_double_double FFI_OutputSelectedRect
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_OutputSelectedRect;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_double_double_double_double) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_double_double_double_double));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_OutputSelectedRect = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr_int FFI_SetCursor
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_SetCursor;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_SetCursor = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_int___IntPtr_int_PDFiumSharp_Native_TimerCallback FFI_SetTimer
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_SetTimer;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_int___IntPtr_int_PDFiumSharp_Native_TimerCallback) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_int___IntPtr_int_PDFiumSharp_Native_TimerCallback));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_SetTimer = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr_int FFI_KillTimer
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_KillTimer;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_KillTimer = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_PDFiumSharp_Native__FPDF_SYSTEMTIME___Internal___IntPtr FFI_GetLocalTime
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_GetLocalTime;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_PDFiumSharp_Native__FPDF_SYSTEMTIME___Internal___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_PDFiumSharp_Native__FPDF_SYSTEMTIME___Internal___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_GetLocalTime = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr FFI_OnChange
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_OnChange;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_OnChange = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func___IntPtr___IntPtr___IntPtr_int FFI_GetPage
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_GetPage;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func___IntPtr___IntPtr___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func___IntPtr___IntPtr___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_GetPage = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func___IntPtr___IntPtr___IntPtr FFI_GetCurrentPage
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_GetCurrentPage;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func___IntPtr___IntPtr___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func___IntPtr___IntPtr___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_GetCurrentPage = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr FFI_GetRotation
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_GetRotation;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_GetRotation = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string FFI_ExecuteNamedAction
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_ExecuteNamedAction;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_ExecuteNamedAction = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr_string_uint_bool FFI_SetTextFieldFocus
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_SetTextFieldFocus;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr_string_uint_bool) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr_string_uint_bool));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_SetTextFieldFocus = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string FFI_DoURIAction
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_DoURIAction;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_DoURIAction = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr_int_int_floatPtr_int FFI_DoGoToAction
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_DoGoToAction;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr_int_int_floatPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr_int_int_floatPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_DoGoToAction = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.IPDF_JsPlatform MPJsPlatform
        {
            get
            {
                var __result0 = global::PDFiumSharp.Native.IPDF_JsPlatform.__GetOrCreateInstance(((__Internal*)__Instance)->m_pJsPlatform, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pJsPlatform = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public bool XfaDisabled
        {
            get
            {
                return ((__Internal*)__Instance)->xfa_disabled;
            }

            set
            {
                ((__Internal*)__Instance)->xfa_disabled = value;
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_bool_double_double_double_double FFI_DisplayCaret
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_DisplayCaret;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_bool_double_double_double_double) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_bool_double_double_double_double));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_DisplayCaret = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr FFI_GetCurrentPageIndex
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_GetCurrentPageIndex;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_GetCurrentPageIndex = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_int FFI_SetCurrentPage
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_SetCurrentPage;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_SetCurrentPage = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_string FFI_GotoURL
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_GotoURL;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_string));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_GotoURL = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_doublePtr_doublePtr_doublePtr_doublePtr FFI_GetPageViewRect
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_GetPageViewRect;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_doublePtr_doublePtr_doublePtr_doublePtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_doublePtr_doublePtr_doublePtr_doublePtr));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_GetPageViewRect = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr_int_uint FFI_PageEvent
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_PageEvent;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr_int_uint) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr_int_uint));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_PageEvent = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_bool___IntPtr___IntPtr___IntPtr_int_float_float FFI_PopupMenu
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_PopupMenu;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_bool___IntPtr___IntPtr___IntPtr_int_float_float) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_bool___IntPtr___IntPtr___IntPtr_int_float_float));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_PopupMenu = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func___IntPtr___IntPtr_int_string__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string FFI_OpenFile
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_OpenFile;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func___IntPtr___IntPtr_int_string__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func___IntPtr___IntPtr_int_string__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_OpenFile = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_string_string_string_string_string FFI_EmailTo
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_EmailTo;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_string_string_string_string_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_string_string_string_string_string));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_EmailTo = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_int_string FFI_UploadTo
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_UploadTo;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_int_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_int_string));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_UploadTo = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr_int FFI_GetPlatform
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_GetPlatform;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_GetPlatform = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr_int FFI_GetLanguage
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_GetLanguage;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_GetLanguage = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func___IntPtr___IntPtr_string FFI_DownloadFromURL
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_DownloadFromURL;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func___IntPtr___IntPtr_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func___IntPtr___IntPtr_string));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_DownloadFromURL = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_bool___IntPtr_string_string_string_string_string___IntPtr FFI_PostRequestURL
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_PostRequestURL;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_bool___IntPtr_string_string_string_string_string___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_bool___IntPtr_string_string_string_string_string___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_PostRequestURL = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_bool___IntPtr_string_string_string FFI_PutRequestURL
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_PutRequestURL;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_bool___IntPtr_string_string_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_bool___IntPtr_string_string_string));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_PutRequestURL = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_int FFI_OnFocusChange
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_OnFocusChange;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_OnFocusChange = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string_int FFI_DoURIActionWithKeyboardModifier
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FFI_DoURIActionWithKeyboardModifier;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string_int));
            }

            set
            {
                ((__Internal*)__Instance)->FFI_DoURIActionWithKeyboardModifier = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public unsafe partial class fpdf_formfill
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFDOC_InitFormFillEnvironment", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFDOC_InitFormFillEnvironment(__IntPtr document, __IntPtr formInfo);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFDOC_ExitFormFillEnvironment", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFDOC_ExitFormFillEnvironment(__IntPtr hHandle);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_OnAfterLoadPage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FORM_OnAfterLoadPage(__IntPtr page, __IntPtr hHandle);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_OnBeforeClosePage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FORM_OnBeforeClosePage(__IntPtr page, __IntPtr hHandle);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_DoDocumentJSAction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FORM_DoDocumentJSAction(__IntPtr hHandle);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_DoDocumentOpenAction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FORM_DoDocumentOpenAction(__IntPtr hHandle);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_DoDocumentAAction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FORM_DoDocumentAAction(__IntPtr hHandle, int aaType);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_DoPageAAction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FORM_DoPageAAction(__IntPtr page, __IntPtr hHandle, int aaType);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_OnMouseMove", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FORM_OnMouseMove(__IntPtr hHandle, __IntPtr page, int modifier, double page_x, double page_y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_OnMouseWheel", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FORM_OnMouseWheel(__IntPtr hHandle, __IntPtr page, int modifier, __IntPtr page_coord, int delta_x, int delta_y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_OnFocus", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FORM_OnFocus(__IntPtr hHandle, __IntPtr page, int modifier, double page_x, double page_y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_OnLButtonDown", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FORM_OnLButtonDown(__IntPtr hHandle, __IntPtr page, int modifier, double page_x, double page_y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_OnRButtonDown", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FORM_OnRButtonDown(__IntPtr hHandle, __IntPtr page, int modifier, double page_x, double page_y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_OnLButtonUp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FORM_OnLButtonUp(__IntPtr hHandle, __IntPtr page, int modifier, double page_x, double page_y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_OnRButtonUp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FORM_OnRButtonUp(__IntPtr hHandle, __IntPtr page, int modifier, double page_x, double page_y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_OnLButtonDoubleClick", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FORM_OnLButtonDoubleClick(__IntPtr hHandle, __IntPtr page, int modifier, double page_x, double page_y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_OnKeyDown", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FORM_OnKeyDown(__IntPtr hHandle, __IntPtr page, int nKeyCode, int modifier);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_OnKeyUp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FORM_OnKeyUp(__IntPtr hHandle, __IntPtr page, int nKeyCode, int modifier);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_OnChar", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FORM_OnChar(__IntPtr hHandle, __IntPtr page, int nChar, int modifier);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_GetFocusedText", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FORM_GetFocusedText(__IntPtr hHandle, __IntPtr page, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_GetSelectedText", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FORM_GetSelectedText(__IntPtr hHandle, __IntPtr page, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_ReplaceSelection", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FORM_ReplaceSelection(__IntPtr hHandle, __IntPtr page, [MarshalAs(UnmanagedType.LPWStr)] string wsText);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_SelectAllText", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FORM_SelectAllText(__IntPtr hHandle, __IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_CanUndo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FORM_CanUndo(__IntPtr hHandle, __IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_CanRedo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FORM_CanRedo(__IntPtr hHandle, __IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_Undo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FORM_Undo(__IntPtr hHandle, __IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_Redo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FORM_Redo(__IntPtr hHandle, __IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_ForceToKillFocus", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FORM_ForceToKillFocus(__IntPtr hHandle);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_GetFocusedAnnot", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FORM_GetFocusedAnnot(__IntPtr handle, int* page_index, __IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_SetFocusedAnnot", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FORM_SetFocusedAnnot(__IntPtr handle, __IntPtr annot);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_HasFormFieldAtPoint", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPageHasFormFieldAtPoint(__IntPtr hHandle, __IntPtr page, double page_x, double page_y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_FormFieldZOrderAtPoint", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPageFormFieldZOrderAtPoint(__IntPtr hHandle, __IntPtr page, double page_x, double page_y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_SetFormFieldHighlightColor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_SetFormFieldHighlightColor(__IntPtr hHandle, int fieldType, uint color);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_SetFormFieldHighlightAlpha", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_SetFormFieldHighlightAlpha(__IntPtr hHandle, byte alpha);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_RemoveFormFieldHighlight", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_RemoveFormFieldHighlight(__IntPtr hHandle);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_FFLDraw", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_FFLDraw(__IntPtr hHandle, __IntPtr bitmap, __IntPtr page, int start_x, int start_y, int size_x, int size_y, int rotate, int flags);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetFormType", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDF_GetFormType(__IntPtr document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_SetIndexSelected", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FORM_SetIndexSelected(__IntPtr hHandle, __IntPtr page, int index, bool selected);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FORM_IsIndexSelected", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FORM_IsIndexSelected(__IntPtr hHandle, __IntPtr page, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_LoadXFA", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDF_LoadXFA(__IntPtr document);
        }

        public static global::PDFiumSharp.Native.FpdfFormHandleT FPDFDOC_InitFormFillEnvironment(global::PDFiumSharp.Native.FpdfDocumentT document, global::PDFiumSharp.Native.FPDF_FORMFILLINFO formInfo)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg1 = formInfo is null ? __IntPtr.Zero : formInfo.__Instance;
            var __ret = __Internal.FPDFDOC_InitFormFillEnvironment(__arg0, __arg1);
            var __result0 = global::PDFiumSharp.Native.FpdfFormHandleT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static void FPDFDOC_ExitFormFillEnvironment(global::PDFiumSharp.Native.FpdfFormHandleT hHandle)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            __Internal.FPDFDOC_ExitFormFillEnvironment(__arg0);
        }

        public static void FORM_OnAfterLoadPage(global::PDFiumSharp.Native.FpdfPageT page, global::PDFiumSharp.Native.FpdfFormHandleT hHandle)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg1 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            __Internal.FORM_OnAfterLoadPage(__arg0, __arg1);
        }

        public static void FORM_OnBeforeClosePage(global::PDFiumSharp.Native.FpdfPageT page, global::PDFiumSharp.Native.FpdfFormHandleT hHandle)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg1 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            __Internal.FORM_OnBeforeClosePage(__arg0, __arg1);
        }

        public static void FORM_DoDocumentJSAction(global::PDFiumSharp.Native.FpdfFormHandleT hHandle)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            __Internal.FORM_DoDocumentJSAction(__arg0);
        }

        public static void FORM_DoDocumentOpenAction(global::PDFiumSharp.Native.FpdfFormHandleT hHandle)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            __Internal.FORM_DoDocumentOpenAction(__arg0);
        }

        public static void FORM_DoDocumentAAction(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, int aaType)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            __Internal.FORM_DoDocumentAAction(__arg0, aaType);
        }

        public static void FORM_DoPageAAction(global::PDFiumSharp.Native.FpdfPageT page, global::PDFiumSharp.Native.FpdfFormHandleT hHandle, int aaType)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg1 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            __Internal.FORM_DoPageAAction(__arg0, __arg1, aaType);
        }

        public static bool FORM_OnMouseMove(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page, int modifier, double page_x, double page_y)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FORM_OnMouseMove(__arg0, __arg1, modifier, page_x, page_y);
            return __ret;
        }

        public static bool FORM_OnMouseWheel(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page, int modifier, global::PDFiumSharp.Native.FS_POINTF_ page_coord, int delta_x, int delta_y)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg3 = page_coord is null ? __IntPtr.Zero : page_coord.__Instance;
            var __ret = __Internal.FORM_OnMouseWheel(__arg0, __arg1, modifier, __arg3, delta_x, delta_y);
            return __ret;
        }

        public static bool FORM_OnFocus(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page, int modifier, double page_x, double page_y)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FORM_OnFocus(__arg0, __arg1, modifier, page_x, page_y);
            return __ret;
        }

        public static bool FORM_OnLButtonDown(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page, int modifier, double page_x, double page_y)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FORM_OnLButtonDown(__arg0, __arg1, modifier, page_x, page_y);
            return __ret;
        }

        public static bool FORM_OnRButtonDown(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page, int modifier, double page_x, double page_y)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FORM_OnRButtonDown(__arg0, __arg1, modifier, page_x, page_y);
            return __ret;
        }

        public static bool FORM_OnLButtonUp(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page, int modifier, double page_x, double page_y)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FORM_OnLButtonUp(__arg0, __arg1, modifier, page_x, page_y);
            return __ret;
        }

        public static bool FORM_OnRButtonUp(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page, int modifier, double page_x, double page_y)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FORM_OnRButtonUp(__arg0, __arg1, modifier, page_x, page_y);
            return __ret;
        }

        public static bool FORM_OnLButtonDoubleClick(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page, int modifier, double page_x, double page_y)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FORM_OnLButtonDoubleClick(__arg0, __arg1, modifier, page_x, page_y);
            return __ret;
        }

        public static bool FORM_OnKeyDown(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page, int nKeyCode, int modifier)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FORM_OnKeyDown(__arg0, __arg1, nKeyCode, modifier);
            return __ret;
        }

        public static bool FORM_OnKeyUp(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page, int nKeyCode, int modifier)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FORM_OnKeyUp(__arg0, __arg1, nKeyCode, modifier);
            return __ret;
        }

        public static bool FORM_OnChar(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page, int nChar, int modifier)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FORM_OnChar(__arg0, __arg1, nChar, modifier);
            return __ret;
        }

        public static uint FORM_GetFocusedText(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page, __IntPtr buffer, uint buflen)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FORM_GetFocusedText(__arg0, __arg1, buffer, buflen);
            return __ret;
        }

        public static uint FORM_GetSelectedText(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page, __IntPtr buffer, uint buflen)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FORM_GetSelectedText(__arg0, __arg1, buffer, buflen);
            return __ret;
        }

        public static void FORM_ReplaceSelection(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page, string wsText)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            __Internal.FORM_ReplaceSelection(__arg0, __arg1, wsText);
        }

        public static bool FORM_SelectAllText(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FORM_SelectAllText(__arg0, __arg1);
            return __ret;
        }

        public static bool FORM_CanUndo(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FORM_CanUndo(__arg0, __arg1);
            return __ret;
        }

        public static bool FORM_CanRedo(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FORM_CanRedo(__arg0, __arg1);
            return __ret;
        }

        public static bool FORM_Undo(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FORM_Undo(__arg0, __arg1);
            return __ret;
        }

        public static bool FORM_Redo(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FORM_Redo(__arg0, __arg1);
            return __ret;
        }

        public static bool FORM_ForceToKillFocus(global::PDFiumSharp.Native.FpdfFormHandleT hHandle)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __ret = __Internal.FORM_ForceToKillFocus(__arg0);
            return __ret;
        }

        public static bool FORM_GetFocusedAnnot(global::PDFiumSharp.Native.FpdfFormHandleT handle, ref int page_index, global::PDFiumSharp.Native.FpdfAnnotationT annot)
        {
            var __arg0 = handle is null ? __IntPtr.Zero : handle.__Instance;
            fixed (int* __page_index1 = &page_index)
            {
                var __arg1 = __page_index1;
                var ____arg2 = annot is null ? __IntPtr.Zero : annot.__Instance;
                var __arg2 = new __IntPtr(&____arg2);
                var __ret = __Internal.FORM_GetFocusedAnnot(__arg0, __arg1, __arg2);
                return __ret;
            }
        }

        public static bool FORM_SetFocusedAnnot(global::PDFiumSharp.Native.FpdfFormHandleT handle, global::PDFiumSharp.Native.FpdfAnnotationT annot)
        {
            var __arg0 = handle is null ? __IntPtr.Zero : handle.__Instance;
            var __arg1 = annot is null ? __IntPtr.Zero : annot.__Instance;
            var __ret = __Internal.FORM_SetFocusedAnnot(__arg0, __arg1);
            return __ret;
        }

        public static int FPDFPageHasFormFieldAtPoint(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page, double page_x, double page_y)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDFPageHasFormFieldAtPoint(__arg0, __arg1, page_x, page_y);
            return __ret;
        }

        public static int FPDFPageFormFieldZOrderAtPoint(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page, double page_x, double page_y)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDFPageFormFieldZOrderAtPoint(__arg0, __arg1, page_x, page_y);
            return __ret;
        }

        public static void FPDF_SetFormFieldHighlightColor(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, int fieldType, uint color)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            __Internal.FPDF_SetFormFieldHighlightColor(__arg0, fieldType, color);
        }

        public static void FPDF_SetFormFieldHighlightAlpha(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, byte alpha)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            __Internal.FPDF_SetFormFieldHighlightAlpha(__arg0, alpha);
        }

        public static void FPDF_RemoveFormFieldHighlight(global::PDFiumSharp.Native.FpdfFormHandleT hHandle)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            __Internal.FPDF_RemoveFormFieldHighlight(__arg0);
        }

        public static void FPDF_FFLDraw(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfBitmapT bitmap, global::PDFiumSharp.Native.FpdfPageT page, int start_x, int start_y, int size_x, int size_y, int rotate, int flags)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = bitmap is null ? __IntPtr.Zero : bitmap.__Instance;
            var __arg2 = page is null ? __IntPtr.Zero : page.__Instance;
            __Internal.FPDF_FFLDraw(__arg0, __arg1, __arg2, start_x, start_y, size_x, size_y, rotate, flags);
        }

        public static int FPDF_GetFormType(global::PDFiumSharp.Native.FpdfDocumentT document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDF_GetFormType(__arg0);
            return __ret;
        }

        public static bool FORM_SetIndexSelected(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page, int index, bool selected)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FORM_SetIndexSelected(__arg0, __arg1, index, selected);
            return __ret;
        }

        public static bool FORM_IsIndexSelected(global::PDFiumSharp.Native.FpdfFormHandleT hHandle, global::PDFiumSharp.Native.FpdfPageT page, int index)
        {
            var __arg0 = hHandle is null ? __IntPtr.Zero : hHandle.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FORM_IsIndexSelected(__arg0, __arg1, index);
            return __ret;
        }

        public static bool FPDF_LoadXFA(global::PDFiumSharp.Native.FpdfDocumentT document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDF_LoadXFA(__arg0);
            return __ret;
        }
    }

    public unsafe partial class fpdf_attachment
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFDoc_GetAttachmentCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFDocGetAttachmentCount(__IntPtr document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFDoc_AddAttachment", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFDocAddAttachment(__IntPtr document, [MarshalAs(UnmanagedType.LPWStr)] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFDoc_GetAttachment", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFDocGetAttachment(__IntPtr document, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFDoc_DeleteAttachment", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFDocDeleteAttachment(__IntPtr document, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAttachment_GetName", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFAttachmentGetName(__IntPtr attachment, char* buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAttachment_HasKey", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAttachmentHasKey(__IntPtr attachment, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string key);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAttachment_GetValueType", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAttachmentGetValueType(__IntPtr attachment, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string key);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAttachment_SetStringValue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAttachmentSetStringValue(__IntPtr attachment, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string key, [MarshalAs(UnmanagedType.LPWStr)] string value);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAttachment_GetStringValue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFAttachmentGetStringValue(__IntPtr attachment, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string key, char* buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAttachment_SetFile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAttachmentSetFile(__IntPtr attachment, __IntPtr document, __IntPtr contents, uint len);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAttachment_GetFile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFAttachmentGetFile(__IntPtr attachment, __IntPtr buffer, uint buflen, uint* out_buflen);
        }

        public static int FPDFDocGetAttachmentCount(global::PDFiumSharp.Native.FpdfDocumentT document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDFDocGetAttachmentCount(__arg0);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfAttachmentT FPDFDocAddAttachment(global::PDFiumSharp.Native.FpdfDocumentT document, string name)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDFDocAddAttachment(__arg0, name);
            var __result0 = global::PDFiumSharp.Native.FpdfAttachmentT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static global::PDFiumSharp.Native.FpdfAttachmentT FPDFDocGetAttachment(global::PDFiumSharp.Native.FpdfDocumentT document, int index)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDFDocGetAttachment(__arg0, index);
            var __result0 = global::PDFiumSharp.Native.FpdfAttachmentT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static bool FPDFDocDeleteAttachment(global::PDFiumSharp.Native.FpdfDocumentT document, int index)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDFDocDeleteAttachment(__arg0, index);
            return __ret;
        }

        public static uint FPDFAttachmentGetName(global::PDFiumSharp.Native.FpdfAttachmentT attachment, char* buffer, uint buflen)
        {
            var __arg0 = attachment is null ? __IntPtr.Zero : attachment.__Instance;
            var __ret = __Internal.FPDFAttachmentGetName(__arg0, buffer, buflen);
            return __ret;
        }

        public static bool FPDFAttachmentHasKey(global::PDFiumSharp.Native.FpdfAttachmentT attachment, string key)
        {
            var __arg0 = attachment is null ? __IntPtr.Zero : attachment.__Instance;
            var __ret = __Internal.FPDFAttachmentHasKey(__arg0, key);
            return __ret;
        }

        public static int FPDFAttachmentGetValueType(global::PDFiumSharp.Native.FpdfAttachmentT attachment, string key)
        {
            var __arg0 = attachment is null ? __IntPtr.Zero : attachment.__Instance;
            var __ret = __Internal.FPDFAttachmentGetValueType(__arg0, key);
            return __ret;
        }

        public static bool FPDFAttachmentSetStringValue(global::PDFiumSharp.Native.FpdfAttachmentT attachment, string key, string value)
        {
            var __arg0 = attachment is null ? __IntPtr.Zero : attachment.__Instance;
            var __ret = __Internal.FPDFAttachmentSetStringValue(__arg0, key, value);
            return __ret;
        }

        public static uint FPDFAttachmentGetStringValue(global::PDFiumSharp.Native.FpdfAttachmentT attachment, string key, char* buffer, uint buflen)
        {
            var __arg0 = attachment is null ? __IntPtr.Zero : attachment.__Instance;
            var __ret = __Internal.FPDFAttachmentGetStringValue(__arg0, key, buffer, buflen);
            return __ret;
        }

        public static bool FPDFAttachmentSetFile(global::PDFiumSharp.Native.FpdfAttachmentT attachment, global::PDFiumSharp.Native.FpdfDocumentT document, __IntPtr contents, uint len)
        {
            var __arg0 = attachment is null ? __IntPtr.Zero : attachment.__Instance;
            var __arg1 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDFAttachmentSetFile(__arg0, __arg1, contents, len);
            return __ret;
        }

        public static bool FPDFAttachmentGetFile(global::PDFiumSharp.Native.FpdfAttachmentT attachment, __IntPtr buffer, uint buflen, ref uint out_buflen)
        {
            var __arg0 = attachment is null ? __IntPtr.Zero : attachment.__Instance;
            fixed (uint* __out_buflen3 = &out_buflen)
            {
                var __arg3 = __out_buflen3;
                var __ret = __Internal.FPDFAttachmentGetFile(__arg0, buffer, buflen, __arg3);
                return __ret;
            }
        }
    }

    public unsafe partial class fpdf_catalog
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFCatalog_IsTagged", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFCatalogIsTagged(__IntPtr document);
        }

        /// <summary>Experimental API.</summary>
        /// <remarks>
        /// <para>Determine if |document| represents a tagged PDF.</para>
        /// <para>For the definition of tagged PDF, See (see 10.7 &quot;Tagged PDF&quot; in PDF</para>
        /// <para>Reference 1.7).</para>
        /// <para>document - handle to a document.</para>
        /// <para>Returns |true| iff |document| is a tagged PDF.</para>
        /// </remarks>
        public static bool FPDFCatalogIsTagged(global::PDFiumSharp.Native.FpdfDocumentT document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDFCatalogIsTagged(__arg0);
            return __ret;
        }
    }

    public unsafe partial class FX_FILEAVAIL : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal int version;
            internal __IntPtr IsDataAvail;

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0_FX_FILEAVAIL@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FX_FILEAVAIL> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FX_FILEAVAIL>();

        protected bool __ownsNativeInstance;

        internal static FX_FILEAVAIL __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FX_FILEAVAIL(native.ToPointer(), skipVTables);
        }

        internal static FX_FILEAVAIL __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FX_FILEAVAIL)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FX_FILEAVAIL __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FX_FILEAVAIL(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FX_FILEAVAIL(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FX_FILEAVAIL(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FX_FILEAVAIL()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FX_FILEAVAIL.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FX_FILEAVAIL(global::PDFiumSharp.Native.FX_FILEAVAIL _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FX_FILEAVAIL.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FX_FILEAVAIL.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FX_FILEAVAIL.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Version
        {
            get
            {
                return ((__Internal*)__Instance)->version;
            }

            set
            {
                ((__Internal*)__Instance)->version = value;
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_bool___IntPtr_ulong_ulong IsDataAvail
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->IsDataAvail;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_bool___IntPtr_ulong_ulong) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_bool___IntPtr_ulong_ulong));
            }

            set
            {
                ((__Internal*)__Instance)->IsDataAvail = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public unsafe partial class FX_DOWNLOADHINTS : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal int version;
            internal __IntPtr AddSegment;

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0_FX_DOWNLOADHINTS@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FX_DOWNLOADHINTS> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FX_DOWNLOADHINTS>();

        protected bool __ownsNativeInstance;

        internal static FX_DOWNLOADHINTS __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FX_DOWNLOADHINTS(native.ToPointer(), skipVTables);
        }

        internal static FX_DOWNLOADHINTS __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FX_DOWNLOADHINTS)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FX_DOWNLOADHINTS __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FX_DOWNLOADHINTS(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FX_DOWNLOADHINTS(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FX_DOWNLOADHINTS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FX_DOWNLOADHINTS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FX_DOWNLOADHINTS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FX_DOWNLOADHINTS(global::PDFiumSharp.Native.FX_DOWNLOADHINTS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FX_DOWNLOADHINTS.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FX_DOWNLOADHINTS.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FX_DOWNLOADHINTS.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Version
        {
            get
            {
                return ((__Internal*)__Instance)->version;
            }

            set
            {
                ((__Internal*)__Instance)->version = value;
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr_ulong_ulong AddSegment
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->AddSegment;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr_ulong_ulong) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr_ulong_ulong));
            }

            set
            {
                ((__Internal*)__Instance)->AddSegment = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public unsafe partial class fpdf_dataavail
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAvail_Create", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFAvailCreate(__IntPtr file_avail, __IntPtr file);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAvail_Destroy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFAvailDestroy(__IntPtr avail);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAvail_IsDocAvail", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAvailIsDocAvail(__IntPtr avail, __IntPtr hints);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAvail_GetDocument", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFAvailGetDocument(__IntPtr avail, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string password);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAvail_GetFirstPageNum", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAvailGetFirstPageNum(__IntPtr doc);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAvail_IsPageAvail", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAvailIsPageAvail(__IntPtr avail, int page_index, __IntPtr hints);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAvail_IsFormAvail", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAvailIsFormAvail(__IntPtr avail, __IntPtr hints);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFAvail_IsLinearized", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFAvailIsLinearized(__IntPtr avail);
        }

        public static global::PDFiumSharp.Native.FpdfAvailT FPDFAvailCreate(global::PDFiumSharp.Native.FX_FILEAVAIL file_avail, global::PDFiumSharp.Native.FPDF_FILEACCESS file)
        {
            var __arg0 = file_avail is null ? __IntPtr.Zero : file_avail.__Instance;
            var __arg1 = file is null ? __IntPtr.Zero : file.__Instance;
            var __ret = __Internal.FPDFAvailCreate(__arg0, __arg1);
            var __result0 = global::PDFiumSharp.Native.FpdfAvailT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static void FPDFAvailDestroy(global::PDFiumSharp.Native.FpdfAvailT avail)
        {
            var __arg0 = avail is null ? __IntPtr.Zero : avail.__Instance;
            __Internal.FPDFAvailDestroy(__arg0);
        }

        public static int FPDFAvailIsDocAvail(global::PDFiumSharp.Native.FpdfAvailT avail, global::PDFiumSharp.Native.FX_DOWNLOADHINTS hints)
        {
            var __arg0 = avail is null ? __IntPtr.Zero : avail.__Instance;
            var __arg1 = hints is null ? __IntPtr.Zero : hints.__Instance;
            var __ret = __Internal.FPDFAvailIsDocAvail(__arg0, __arg1);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfDocumentT FPDFAvailGetDocument(global::PDFiumSharp.Native.FpdfAvailT avail, string password)
        {
            var __arg0 = avail is null ? __IntPtr.Zero : avail.__Instance;
            var __ret = __Internal.FPDFAvailGetDocument(__arg0, password);
            var __result0 = global::PDFiumSharp.Native.FpdfDocumentT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static int FPDFAvailGetFirstPageNum(global::PDFiumSharp.Native.FpdfDocumentT doc)
        {
            var __arg0 = doc is null ? __IntPtr.Zero : doc.__Instance;
            var __ret = __Internal.FPDFAvailGetFirstPageNum(__arg0);
            return __ret;
        }

        public static int FPDFAvailIsPageAvail(global::PDFiumSharp.Native.FpdfAvailT avail, int page_index, global::PDFiumSharp.Native.FX_DOWNLOADHINTS hints)
        {
            var __arg0 = avail is null ? __IntPtr.Zero : avail.__Instance;
            var __arg2 = hints is null ? __IntPtr.Zero : hints.__Instance;
            var __ret = __Internal.FPDFAvailIsPageAvail(__arg0, page_index, __arg2);
            return __ret;
        }

        public static int FPDFAvailIsFormAvail(global::PDFiumSharp.Native.FpdfAvailT avail, global::PDFiumSharp.Native.FX_DOWNLOADHINTS hints)
        {
            var __arg0 = avail is null ? __IntPtr.Zero : avail.__Instance;
            var __arg1 = hints is null ? __IntPtr.Zero : hints.__Instance;
            var __ret = __Internal.FPDFAvailIsFormAvail(__arg0, __arg1);
            return __ret;
        }

        public static int FPDFAvailIsLinearized(global::PDFiumSharp.Native.FpdfAvailT avail)
        {
            var __arg0 = avail is null ? __IntPtr.Zero : avail.__Instance;
            var __ret = __Internal.FPDFAvailIsLinearized(__arg0);
            return __ret;
        }
    }

    public unsafe partial class FPDF_IMAGEOBJ_METADATA : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 28)]
        public partial struct __Internal
        {
            internal uint width;
            internal uint height;
            internal float horizontal_dpi;
            internal float vertical_dpi;
            internal uint bits_per_pixel;
            internal int colorspace;
            internal int marked_content_id;

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FPDF_IMAGEOBJ_METADATA@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDF_IMAGEOBJ_METADATA> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDF_IMAGEOBJ_METADATA>();

        protected bool __ownsNativeInstance;

        internal static FPDF_IMAGEOBJ_METADATA __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDF_IMAGEOBJ_METADATA(native.ToPointer(), skipVTables);
        }

        internal static FPDF_IMAGEOBJ_METADATA __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDF_IMAGEOBJ_METADATA)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDF_IMAGEOBJ_METADATA __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDF_IMAGEOBJ_METADATA(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDF_IMAGEOBJ_METADATA(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDF_IMAGEOBJ_METADATA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDF_IMAGEOBJ_METADATA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDF_IMAGEOBJ_METADATA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDF_IMAGEOBJ_METADATA(global::PDFiumSharp.Native.FPDF_IMAGEOBJ_METADATA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDF_IMAGEOBJ_METADATA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDF_IMAGEOBJ_METADATA.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDF_IMAGEOBJ_METADATA.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Width
        {
            get
            {
                return ((__Internal*)__Instance)->width;
            }

            set
            {
                ((__Internal*)__Instance)->width = value;
            }
        }

        public uint Height
        {
            get
            {
                return ((__Internal*)__Instance)->height;
            }

            set
            {
                ((__Internal*)__Instance)->height = value;
            }
        }

        public float HorizontalDpi
        {
            get
            {
                return ((__Internal*)__Instance)->horizontal_dpi;
            }

            set
            {
                ((__Internal*)__Instance)->horizontal_dpi = value;
            }
        }

        public float VerticalDpi
        {
            get
            {
                return ((__Internal*)__Instance)->vertical_dpi;
            }

            set
            {
                ((__Internal*)__Instance)->vertical_dpi = value;
            }
        }

        public uint BitsPerPixel
        {
            get
            {
                return ((__Internal*)__Instance)->bits_per_pixel;
            }

            set
            {
                ((__Internal*)__Instance)->bits_per_pixel = value;
            }
        }

        public int Colorspace
        {
            get
            {
                return ((__Internal*)__Instance)->colorspace;
            }

            set
            {
                ((__Internal*)__Instance)->colorspace = value;
            }
        }

        public int MarkedContentId
        {
            get
            {
                return ((__Internal*)__Instance)->marked_content_id;
            }

            set
            {
                ((__Internal*)__Instance)->marked_content_id = value;
            }
        }
    }

    public unsafe partial class fpdf_edit
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_CreateNewDocument", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_CreateNewDocument();

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_New", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPageNew(__IntPtr document, int page_index, double width, double height);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_Delete", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPageDelete(__IntPtr document, int page_index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_GetRotation", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPageGetRotation(__IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_SetRotation", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPageSetRotation(__IntPtr page, int rotate);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_InsertObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPageInsertObject(__IntPtr page, __IntPtr page_obj);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_RemoveObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageRemoveObject(__IntPtr page, __IntPtr page_obj);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_CountObjects", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPageCountObjects(__IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_GetObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPageGetObject(__IntPtr page, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_HasTransparency", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageHasTransparency(__IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_GenerateContent", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageGenerateContent(__IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_Destroy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPageObjDestroy(__IntPtr page_obj);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_HasTransparency", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjHasTransparency(__IntPtr page_object);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_GetType", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPageObjGetType(__IntPtr page_object);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_Transform", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPageObjTransform(__IntPtr page_object, double a, double b, double c, double d, double e, double f);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_GetMatrix", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjGetMatrix(__IntPtr page_object, __IntPtr matrix);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_SetMatrix", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjSetMatrix(__IntPtr path, __IntPtr matrix);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_TransformAnnots", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPageTransformAnnots(__IntPtr page, double a, double b, double c, double d, double e, double f);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_NewImageObj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPageObjNewImageObj(__IntPtr document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_CountMarks", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPageObjCountMarks(__IntPtr page_object);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_GetMark", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPageObjGetMark(__IntPtr page_object, uint index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_AddMark", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPageObjAddMark(__IntPtr page_object, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string name);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_RemoveMark", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjRemoveMark(__IntPtr page_object, __IntPtr mark);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObjMark_GetName", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjMarkGetName(__IntPtr mark, __IntPtr buffer, uint buflen, uint* out_buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObjMark_CountParams", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPageObjMarkCountParams(__IntPtr mark);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObjMark_GetParamKey", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjMarkGetParamKey(__IntPtr mark, uint index, __IntPtr buffer, uint buflen, uint* out_buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObjMark_GetParamValueType", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPageObjMarkGetParamValueType(__IntPtr mark, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string key);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObjMark_GetParamIntValue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjMarkGetParamIntValue(__IntPtr mark, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string key, int* out_value);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObjMark_GetParamStringValue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjMarkGetParamStringValue(__IntPtr mark, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string key, __IntPtr buffer, uint buflen, uint* out_buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObjMark_GetParamBlobValue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjMarkGetParamBlobValue(__IntPtr mark, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string key, __IntPtr buffer, uint buflen, uint* out_buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObjMark_SetIntParam", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjMarkSetIntParam(__IntPtr document, __IntPtr page_object, __IntPtr mark, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string key, int value);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObjMark_SetStringParam", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjMarkSetStringParam(__IntPtr document, __IntPtr page_object, __IntPtr mark, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string key, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string value);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObjMark_SetBlobParam", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjMarkSetBlobParam(__IntPtr document, __IntPtr page_object, __IntPtr mark, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string key, __IntPtr value, uint value_len);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObjMark_RemoveParam", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjMarkRemoveParam(__IntPtr page_object, __IntPtr mark, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string key);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFImageObj_LoadJpegFile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFImageObjLoadJpegFile(__IntPtr pages, int count, __IntPtr image_object, __IntPtr file_access);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFImageObj_LoadJpegFileInline", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFImageObjLoadJpegFileInline(__IntPtr pages, int count, __IntPtr image_object, __IntPtr file_access);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFImageObj_SetMatrix", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFImageObjSetMatrix(__IntPtr image_object, double a, double b, double c, double d, double e, double f);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFImageObj_SetBitmap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFImageObjSetBitmap(__IntPtr pages, int count, __IntPtr image_object, __IntPtr bitmap);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFImageObj_GetBitmap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFImageObjGetBitmap(__IntPtr image_object);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFImageObj_GetRenderedBitmap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFImageObjGetRenderedBitmap(__IntPtr document, __IntPtr page, __IntPtr image_object);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFImageObj_GetImageDataDecoded", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFImageObjGetImageDataDecoded(__IntPtr image_object, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFImageObj_GetImageDataRaw", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFImageObjGetImageDataRaw(__IntPtr image_object, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFImageObj_GetImageFilterCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFImageObjGetImageFilterCount(__IntPtr image_object);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFImageObj_GetImageFilter", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFImageObjGetImageFilter(__IntPtr image_object, int index, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFImageObj_GetImageMetadata", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFImageObjGetImageMetadata(__IntPtr image_object, __IntPtr page, __IntPtr metadata);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_CreateNewPath", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPageObjCreateNewPath(float x, float y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_CreateNewRect", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPageObjCreateNewRect(float x, float y, float w, float h);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_GetBounds", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjGetBounds(__IntPtr page_object, float* left, float* bottom, float* right, float* top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_SetBlendMode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPageObjSetBlendMode(__IntPtr page_object, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string blend_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_SetStrokeColor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjSetStrokeColor(__IntPtr page_object, uint R, uint G, uint B, uint A);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_GetStrokeColor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjGetStrokeColor(__IntPtr page_object, uint* R, uint* G, uint* B, uint* A);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_SetStrokeWidth", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjSetStrokeWidth(__IntPtr page_object, float width);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_GetStrokeWidth", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjGetStrokeWidth(__IntPtr page_object, float* width);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_GetLineJoin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPageObjGetLineJoin(__IntPtr page_object);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_SetLineJoin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjSetLineJoin(__IntPtr page_object, int line_join);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_GetLineCap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPageObjGetLineCap(__IntPtr page_object);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_SetLineCap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjSetLineCap(__IntPtr page_object, int line_cap);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_SetFillColor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjSetFillColor(__IntPtr page_object, uint R, uint G, uint B, uint A);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_GetFillColor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjGetFillColor(__IntPtr page_object, uint* R, uint* G, uint* B, uint* A);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_GetDashPhase", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjGetDashPhase(__IntPtr page_object, float* phase);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_SetDashPhase", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjSetDashPhase(__IntPtr page_object, float phase);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_GetDashCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPageObjGetDashCount(__IntPtr page_object);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_GetDashArray", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjGetDashArray(__IntPtr page_object, float* dash_array, ulong dash_count);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_SetDashArray", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageObjSetDashArray(__IntPtr page_object, float* dash_array, ulong dash_count, float phase);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPath_CountSegments", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPathCountSegments(__IntPtr path);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPath_GetPathSegment", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPathGetPathSegment(__IntPtr path, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPathSegment_GetPoint", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPathSegmentGetPoint(__IntPtr segment, float* x, float* y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPathSegment_GetType", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPathSegmentGetType(__IntPtr segment);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPathSegment_GetClose", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPathSegmentGetClose(__IntPtr segment);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPath_MoveTo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPathMoveTo(__IntPtr path, float x, float y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPath_LineTo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPathLineTo(__IntPtr path, float x, float y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPath_BezierTo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPathBezierTo(__IntPtr path, float x1, float y1, float x2, float y2, float x3, float y3);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPath_Close", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPathClose(__IntPtr path);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPath_SetDrawMode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPathSetDrawMode(__IntPtr path, int fillmode, bool stroke);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPath_GetDrawMode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPathGetDrawMode(__IntPtr path, int* fillmode, bool* stroke);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_NewTextObj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPageObjNewTextObj(__IntPtr document, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string font, float font_size);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_SetText", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFTextSetText(__IntPtr text_object, [MarshalAs(UnmanagedType.LPWStr)] string text);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_SetCharcodes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFTextSetCharcodes(__IntPtr text_object, uint* charcodes, ulong count);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_LoadFont", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFTextLoadFont(__IntPtr document, byte* data, uint size, int font_type, bool cid);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_LoadStandardFont", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFTextLoadStandardFont(__IntPtr document, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string font);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFTextObj_GetFontSize", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFTextObjGetFontSize(__IntPtr text, float* size);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFFont_Close", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFFontClose(__IntPtr font);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_CreateTextObj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPageObjCreateTextObj(__IntPtr document, __IntPtr font, float font_size);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFTextObj_GetTextRenderMode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PDFiumSharp.Native.FPDF_TEXT_RENDERMODE FPDFTextObjGetTextRenderMode(__IntPtr text);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFTextObj_SetTextRenderMode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFTextObjSetTextRenderMode(__IntPtr text, global::PDFiumSharp.Native.FPDF_TEXT_RENDERMODE render_mode);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFTextObj_GetText", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFTextObjGetText(__IntPtr text_object, __IntPtr text_page, char* buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFTextObj_GetFont", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFTextObjGetFont(__IntPtr text);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFFont_GetFontName", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFFontGetFontName(__IntPtr font, sbyte* buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFFont_GetFlags", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFFontGetFlags(__IntPtr font);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFFont_GetWeight", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFFontGetWeight(__IntPtr font);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFFont_GetItalicAngle", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFFontGetItalicAngle(__IntPtr font, int* angle);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFFont_GetAscent", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFFontGetAscent(__IntPtr font, float font_size, float* ascent);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFFont_GetDescent", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFFontGetDescent(__IntPtr font, float font_size, float* descent);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFFont_GetGlyphWidth", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFFontGetGlyphWidth(__IntPtr font, uint glyph, float font_size, float* width);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFFont_GetGlyphPath", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFFontGetGlyphPath(__IntPtr font, uint glyph, float font_size);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFGlyphPath_CountGlyphSegments", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFGlyphPathCountGlyphSegments(__IntPtr glyphpath);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFGlyphPath_GetGlyphPathSegment", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFGlyphPathGetGlyphPathSegment(__IntPtr glyphpath, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFFormObj_CountObjects", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFFormObjCountObjects(__IntPtr form_object);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFFormObj_GetObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFFormObjGetObject(__IntPtr form_object, uint index);
        }

        public static global::PDFiumSharp.Native.FpdfDocumentT FPDF_CreateNewDocument()
        {
            var __ret = __Internal.FPDF_CreateNewDocument();
            var __result0 = global::PDFiumSharp.Native.FpdfDocumentT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static global::PDFiumSharp.Native.FpdfPageT FPDFPageNew(global::PDFiumSharp.Native.FpdfDocumentT document, int page_index, double width, double height)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDFPageNew(__arg0, page_index, width, height);
            var __result0 = global::PDFiumSharp.Native.FpdfPageT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static void FPDFPageDelete(global::PDFiumSharp.Native.FpdfDocumentT document, int page_index)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            __Internal.FPDFPageDelete(__arg0, page_index);
        }

        public static int FPDFPageGetRotation(global::PDFiumSharp.Native.FpdfPageT page)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDFPageGetRotation(__arg0);
            return __ret;
        }

        public static void FPDFPageSetRotation(global::PDFiumSharp.Native.FpdfPageT page, int rotate)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            __Internal.FPDFPageSetRotation(__arg0, rotate);
        }

        public static void FPDFPageInsertObject(global::PDFiumSharp.Native.FpdfPageT page, global::PDFiumSharp.Native.FpdfPageobjectT page_obj)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg1 = page_obj is null ? __IntPtr.Zero : page_obj.__Instance;
            __Internal.FPDFPageInsertObject(__arg0, __arg1);
        }

        public static bool FPDFPageRemoveObject(global::PDFiumSharp.Native.FpdfPageT page, global::PDFiumSharp.Native.FpdfPageobjectT page_obj)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg1 = page_obj is null ? __IntPtr.Zero : page_obj.__Instance;
            var __ret = __Internal.FPDFPageRemoveObject(__arg0, __arg1);
            return __ret;
        }

        public static int FPDFPageCountObjects(global::PDFiumSharp.Native.FpdfPageT page)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDFPageCountObjects(__arg0);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfPageobjectT FPDFPageGetObject(global::PDFiumSharp.Native.FpdfPageT page, int index)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDFPageGetObject(__arg0, index);
            var __result0 = global::PDFiumSharp.Native.FpdfPageobjectT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static bool FPDFPageHasTransparency(global::PDFiumSharp.Native.FpdfPageT page)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDFPageHasTransparency(__arg0);
            return __ret;
        }

        public static bool FPDFPageGenerateContent(global::PDFiumSharp.Native.FpdfPageT page)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDFPageGenerateContent(__arg0);
            return __ret;
        }

        public static void FPDFPageObjDestroy(global::PDFiumSharp.Native.FpdfPageobjectT page_obj)
        {
            var __arg0 = page_obj is null ? __IntPtr.Zero : page_obj.__Instance;
            __Internal.FPDFPageObjDestroy(__arg0);
        }

        public static bool FPDFPageObjHasTransparency(global::PDFiumSharp.Native.FpdfPageobjectT page_object)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __ret = __Internal.FPDFPageObjHasTransparency(__arg0);
            return __ret;
        }

        public static int FPDFPageObjGetType(global::PDFiumSharp.Native.FpdfPageobjectT page_object)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __ret = __Internal.FPDFPageObjGetType(__arg0);
            return __ret;
        }

        public static void FPDFPageObjTransform(global::PDFiumSharp.Native.FpdfPageobjectT page_object, double a, double b, double c, double d, double e, double f)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            __Internal.FPDFPageObjTransform(__arg0, a, b, c, d, e, f);
        }

        public static bool FPDFPageObjGetMatrix(global::PDFiumSharp.Native.FpdfPageobjectT page_object, global::PDFiumSharp.Native.FS_MATRIX_ matrix)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __arg1 = matrix is null ? __IntPtr.Zero : matrix.__Instance;
            var __ret = __Internal.FPDFPageObjGetMatrix(__arg0, __arg1);
            return __ret;
        }

        public static bool FPDFPageObjSetMatrix(global::PDFiumSharp.Native.FpdfPageobjectT path, global::PDFiumSharp.Native.FS_MATRIX_ matrix)
        {
            var __arg0 = path is null ? __IntPtr.Zero : path.__Instance;
            var __arg1 = matrix is null ? __IntPtr.Zero : matrix.__Instance;
            var __ret = __Internal.FPDFPageObjSetMatrix(__arg0, __arg1);
            return __ret;
        }

        public static void FPDFPageTransformAnnots(global::PDFiumSharp.Native.FpdfPageT page, double a, double b, double c, double d, double e, double f)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            __Internal.FPDFPageTransformAnnots(__arg0, a, b, c, d, e, f);
        }

        public static global::PDFiumSharp.Native.FpdfPageobjectT FPDFPageObjNewImageObj(global::PDFiumSharp.Native.FpdfDocumentT document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDFPageObjNewImageObj(__arg0);
            var __result0 = global::PDFiumSharp.Native.FpdfPageobjectT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static int FPDFPageObjCountMarks(global::PDFiumSharp.Native.FpdfPageobjectT page_object)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __ret = __Internal.FPDFPageObjCountMarks(__arg0);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfPageobjectmarkT FPDFPageObjGetMark(global::PDFiumSharp.Native.FpdfPageobjectT page_object, uint index)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __ret = __Internal.FPDFPageObjGetMark(__arg0, index);
            var __result0 = global::PDFiumSharp.Native.FpdfPageobjectmarkT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static global::PDFiumSharp.Native.FpdfPageobjectmarkT FPDFPageObjAddMark(global::PDFiumSharp.Native.FpdfPageobjectT page_object, string name)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __ret = __Internal.FPDFPageObjAddMark(__arg0, name);
            var __result0 = global::PDFiumSharp.Native.FpdfPageobjectmarkT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static bool FPDFPageObjRemoveMark(global::PDFiumSharp.Native.FpdfPageobjectT page_object, global::PDFiumSharp.Native.FpdfPageobjectmarkT mark)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __arg1 = mark is null ? __IntPtr.Zero : mark.__Instance;
            var __ret = __Internal.FPDFPageObjRemoveMark(__arg0, __arg1);
            return __ret;
        }

        public static bool FPDFPageObjMarkGetName(global::PDFiumSharp.Native.FpdfPageobjectmarkT mark, __IntPtr buffer, uint buflen, ref uint out_buflen)
        {
            var __arg0 = mark is null ? __IntPtr.Zero : mark.__Instance;
            fixed (uint* __out_buflen3 = &out_buflen)
            {
                var __arg3 = __out_buflen3;
                var __ret = __Internal.FPDFPageObjMarkGetName(__arg0, buffer, buflen, __arg3);
                return __ret;
            }
        }

        public static int FPDFPageObjMarkCountParams(global::PDFiumSharp.Native.FpdfPageobjectmarkT mark)
        {
            var __arg0 = mark is null ? __IntPtr.Zero : mark.__Instance;
            var __ret = __Internal.FPDFPageObjMarkCountParams(__arg0);
            return __ret;
        }

        public static bool FPDFPageObjMarkGetParamKey(global::PDFiumSharp.Native.FpdfPageobjectmarkT mark, uint index, __IntPtr buffer, uint buflen, ref uint out_buflen)
        {
            var __arg0 = mark is null ? __IntPtr.Zero : mark.__Instance;
            fixed (uint* __out_buflen4 = &out_buflen)
            {
                var __arg4 = __out_buflen4;
                var __ret = __Internal.FPDFPageObjMarkGetParamKey(__arg0, index, buffer, buflen, __arg4);
                return __ret;
            }
        }

        public static int FPDFPageObjMarkGetParamValueType(global::PDFiumSharp.Native.FpdfPageobjectmarkT mark, string key)
        {
            var __arg0 = mark is null ? __IntPtr.Zero : mark.__Instance;
            var __ret = __Internal.FPDFPageObjMarkGetParamValueType(__arg0, key);
            return __ret;
        }

        public static bool FPDFPageObjMarkGetParamIntValue(global::PDFiumSharp.Native.FpdfPageobjectmarkT mark, string key, ref int out_value)
        {
            var __arg0 = mark is null ? __IntPtr.Zero : mark.__Instance;
            fixed (int* __out_value2 = &out_value)
            {
                var __arg2 = __out_value2;
                var __ret = __Internal.FPDFPageObjMarkGetParamIntValue(__arg0, key, __arg2);
                return __ret;
            }
        }

        public static bool FPDFPageObjMarkGetParamStringValue(global::PDFiumSharp.Native.FpdfPageobjectmarkT mark, string key, __IntPtr buffer, uint buflen, ref uint out_buflen)
        {
            var __arg0 = mark is null ? __IntPtr.Zero : mark.__Instance;
            fixed (uint* __out_buflen4 = &out_buflen)
            {
                var __arg4 = __out_buflen4;
                var __ret = __Internal.FPDFPageObjMarkGetParamStringValue(__arg0, key, buffer, buflen, __arg4);
                return __ret;
            }
        }

        public static bool FPDFPageObjMarkGetParamBlobValue(global::PDFiumSharp.Native.FpdfPageobjectmarkT mark, string key, __IntPtr buffer, uint buflen, ref uint out_buflen)
        {
            var __arg0 = mark is null ? __IntPtr.Zero : mark.__Instance;
            fixed (uint* __out_buflen4 = &out_buflen)
            {
                var __arg4 = __out_buflen4;
                var __ret = __Internal.FPDFPageObjMarkGetParamBlobValue(__arg0, key, buffer, buflen, __arg4);
                return __ret;
            }
        }

        public static bool FPDFPageObjMarkSetIntParam(global::PDFiumSharp.Native.FpdfDocumentT document, global::PDFiumSharp.Native.FpdfPageobjectT page_object, global::PDFiumSharp.Native.FpdfPageobjectmarkT mark, string key, int value)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg1 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __arg2 = mark is null ? __IntPtr.Zero : mark.__Instance;
            var __ret = __Internal.FPDFPageObjMarkSetIntParam(__arg0, __arg1, __arg2, key, value);
            return __ret;
        }

        public static bool FPDFPageObjMarkSetStringParam(global::PDFiumSharp.Native.FpdfDocumentT document, global::PDFiumSharp.Native.FpdfPageobjectT page_object, global::PDFiumSharp.Native.FpdfPageobjectmarkT mark, string key, string value)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg1 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __arg2 = mark is null ? __IntPtr.Zero : mark.__Instance;
            var __ret = __Internal.FPDFPageObjMarkSetStringParam(__arg0, __arg1, __arg2, key, value);
            return __ret;
        }

        public static bool FPDFPageObjMarkSetBlobParam(global::PDFiumSharp.Native.FpdfDocumentT document, global::PDFiumSharp.Native.FpdfPageobjectT page_object, global::PDFiumSharp.Native.FpdfPageobjectmarkT mark, string key, __IntPtr value, uint value_len)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg1 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __arg2 = mark is null ? __IntPtr.Zero : mark.__Instance;
            var __ret = __Internal.FPDFPageObjMarkSetBlobParam(__arg0, __arg1, __arg2, key, value, value_len);
            return __ret;
        }

        public static bool FPDFPageObjMarkRemoveParam(global::PDFiumSharp.Native.FpdfPageobjectT page_object, global::PDFiumSharp.Native.FpdfPageobjectmarkT mark, string key)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __arg1 = mark is null ? __IntPtr.Zero : mark.__Instance;
            var __ret = __Internal.FPDFPageObjMarkRemoveParam(__arg0, __arg1, key);
            return __ret;
        }

        public static bool FPDFImageObjLoadJpegFile(global::PDFiumSharp.Native.FpdfPageT pages, int count, global::PDFiumSharp.Native.FpdfPageobjectT image_object, global::PDFiumSharp.Native.FPDF_FILEACCESS file_access)
        {
            var ____arg0 = pages is null ? __IntPtr.Zero : pages.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var __arg2 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            var __arg3 = file_access is null ? __IntPtr.Zero : file_access.__Instance;
            var __ret = __Internal.FPDFImageObjLoadJpegFile(__arg0, count, __arg2, __arg3);
            return __ret;
        }

        public static bool FPDFImageObjLoadJpegFileInline(global::PDFiumSharp.Native.FpdfPageT pages, int count, global::PDFiumSharp.Native.FpdfPageobjectT image_object, global::PDFiumSharp.Native.FPDF_FILEACCESS file_access)
        {
            var ____arg0 = pages is null ? __IntPtr.Zero : pages.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var __arg2 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            var __arg3 = file_access is null ? __IntPtr.Zero : file_access.__Instance;
            var __ret = __Internal.FPDFImageObjLoadJpegFileInline(__arg0, count, __arg2, __arg3);
            return __ret;
        }

        public static bool FPDFImageObjSetMatrix(global::PDFiumSharp.Native.FpdfPageobjectT image_object, double a, double b, double c, double d, double e, double f)
        {
            var __arg0 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            var __ret = __Internal.FPDFImageObjSetMatrix(__arg0, a, b, c, d, e, f);
            return __ret;
        }

        public static bool FPDFImageObjSetBitmap(global::PDFiumSharp.Native.FpdfPageT pages, int count, global::PDFiumSharp.Native.FpdfPageobjectT image_object, global::PDFiumSharp.Native.FpdfBitmapT bitmap)
        {
            var ____arg0 = pages is null ? __IntPtr.Zero : pages.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var __arg2 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            var __arg3 = bitmap is null ? __IntPtr.Zero : bitmap.__Instance;
            var __ret = __Internal.FPDFImageObjSetBitmap(__arg0, count, __arg2, __arg3);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfBitmapT FPDFImageObjGetBitmap(global::PDFiumSharp.Native.FpdfPageobjectT image_object)
        {
            var __arg0 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            var __ret = __Internal.FPDFImageObjGetBitmap(__arg0);
            var __result0 = global::PDFiumSharp.Native.FpdfBitmapT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static global::PDFiumSharp.Native.FpdfBitmapT FPDFImageObjGetRenderedBitmap(global::PDFiumSharp.Native.FpdfDocumentT document, global::PDFiumSharp.Native.FpdfPageT page, global::PDFiumSharp.Native.FpdfPageobjectT image_object)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg2 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            var __ret = __Internal.FPDFImageObjGetRenderedBitmap(__arg0, __arg1, __arg2);
            var __result0 = global::PDFiumSharp.Native.FpdfBitmapT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static uint FPDFImageObjGetImageDataDecoded(global::PDFiumSharp.Native.FpdfPageobjectT image_object, __IntPtr buffer, uint buflen)
        {
            var __arg0 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            var __ret = __Internal.FPDFImageObjGetImageDataDecoded(__arg0, buffer, buflen);
            return __ret;
        }

        public static uint FPDFImageObjGetImageDataRaw(global::PDFiumSharp.Native.FpdfPageobjectT image_object, __IntPtr buffer, uint buflen)
        {
            var __arg0 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            var __ret = __Internal.FPDFImageObjGetImageDataRaw(__arg0, buffer, buflen);
            return __ret;
        }

        public static int FPDFImageObjGetImageFilterCount(global::PDFiumSharp.Native.FpdfPageobjectT image_object)
        {
            var __arg0 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            var __ret = __Internal.FPDFImageObjGetImageFilterCount(__arg0);
            return __ret;
        }

        public static uint FPDFImageObjGetImageFilter(global::PDFiumSharp.Native.FpdfPageobjectT image_object, int index, __IntPtr buffer, uint buflen)
        {
            var __arg0 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            var __ret = __Internal.FPDFImageObjGetImageFilter(__arg0, index, buffer, buflen);
            return __ret;
        }

        public static bool FPDFImageObjGetImageMetadata(global::PDFiumSharp.Native.FpdfPageobjectT image_object, global::PDFiumSharp.Native.FpdfPageT page, global::PDFiumSharp.Native.FPDF_IMAGEOBJ_METADATA metadata)
        {
            var __arg0 = image_object is null ? __IntPtr.Zero : image_object.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg2 = metadata is null ? __IntPtr.Zero : metadata.__Instance;
            var __ret = __Internal.FPDFImageObjGetImageMetadata(__arg0, __arg1, __arg2);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfPageobjectT FPDFPageObjCreateNewPath(float x, float y)
        {
            var __ret = __Internal.FPDFPageObjCreateNewPath(x, y);
            var __result0 = global::PDFiumSharp.Native.FpdfPageobjectT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static global::PDFiumSharp.Native.FpdfPageobjectT FPDFPageObjCreateNewRect(float x, float y, float w, float h)
        {
            var __ret = __Internal.FPDFPageObjCreateNewRect(x, y, w, h);
            var __result0 = global::PDFiumSharp.Native.FpdfPageobjectT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static bool FPDFPageObjGetBounds(global::PDFiumSharp.Native.FpdfPageobjectT page_object, ref float left, ref float bottom, ref float right, ref float top)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            fixed (float* __left1 = &left)
            {
                var __arg1 = __left1;
                fixed (float* __bottom2 = &bottom)
                {
                    var __arg2 = __bottom2;
                    fixed (float* __right3 = &right)
                    {
                        var __arg3 = __right3;
                        fixed (float* __top4 = &top)
                        {
                            var __arg4 = __top4;
                            var __ret = __Internal.FPDFPageObjGetBounds(__arg0, __arg1, __arg2, __arg3, __arg4);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static void FPDFPageObjSetBlendMode(global::PDFiumSharp.Native.FpdfPageobjectT page_object, string blend_mode)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            __Internal.FPDFPageObjSetBlendMode(__arg0, blend_mode);
        }

        public static bool FPDFPageObjSetStrokeColor(global::PDFiumSharp.Native.FpdfPageobjectT page_object, uint R, uint G, uint B, uint A)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __ret = __Internal.FPDFPageObjSetStrokeColor(__arg0, R, G, B, A);
            return __ret;
        }

        public static bool FPDFPageObjGetStrokeColor(global::PDFiumSharp.Native.FpdfPageobjectT page_object, ref uint R, ref uint G, ref uint B, ref uint A)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            fixed (uint* __R1 = &R)
            {
                var __arg1 = __R1;
                fixed (uint* __G2 = &G)
                {
                    var __arg2 = __G2;
                    fixed (uint* __B3 = &B)
                    {
                        var __arg3 = __B3;
                        fixed (uint* __A4 = &A)
                        {
                            var __arg4 = __A4;
                            var __ret = __Internal.FPDFPageObjGetStrokeColor(__arg0, __arg1, __arg2, __arg3, __arg4);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static bool FPDFPageObjSetStrokeWidth(global::PDFiumSharp.Native.FpdfPageobjectT page_object, float width)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __ret = __Internal.FPDFPageObjSetStrokeWidth(__arg0, width);
            return __ret;
        }

        public static bool FPDFPageObjGetStrokeWidth(global::PDFiumSharp.Native.FpdfPageobjectT page_object, ref float width)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            fixed (float* __width1 = &width)
            {
                var __arg1 = __width1;
                var __ret = __Internal.FPDFPageObjGetStrokeWidth(__arg0, __arg1);
                return __ret;
            }
        }

        public static int FPDFPageObjGetLineJoin(global::PDFiumSharp.Native.FpdfPageobjectT page_object)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __ret = __Internal.FPDFPageObjGetLineJoin(__arg0);
            return __ret;
        }

        public static bool FPDFPageObjSetLineJoin(global::PDFiumSharp.Native.FpdfPageobjectT page_object, int line_join)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __ret = __Internal.FPDFPageObjSetLineJoin(__arg0, line_join);
            return __ret;
        }

        public static int FPDFPageObjGetLineCap(global::PDFiumSharp.Native.FpdfPageobjectT page_object)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __ret = __Internal.FPDFPageObjGetLineCap(__arg0);
            return __ret;
        }

        public static bool FPDFPageObjSetLineCap(global::PDFiumSharp.Native.FpdfPageobjectT page_object, int line_cap)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __ret = __Internal.FPDFPageObjSetLineCap(__arg0, line_cap);
            return __ret;
        }

        public static bool FPDFPageObjSetFillColor(global::PDFiumSharp.Native.FpdfPageobjectT page_object, uint R, uint G, uint B, uint A)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __ret = __Internal.FPDFPageObjSetFillColor(__arg0, R, G, B, A);
            return __ret;
        }

        public static bool FPDFPageObjGetFillColor(global::PDFiumSharp.Native.FpdfPageobjectT page_object, ref uint R, ref uint G, ref uint B, ref uint A)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            fixed (uint* __R1 = &R)
            {
                var __arg1 = __R1;
                fixed (uint* __G2 = &G)
                {
                    var __arg2 = __G2;
                    fixed (uint* __B3 = &B)
                    {
                        var __arg3 = __B3;
                        fixed (uint* __A4 = &A)
                        {
                            var __arg4 = __A4;
                            var __ret = __Internal.FPDFPageObjGetFillColor(__arg0, __arg1, __arg2, __arg3, __arg4);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static bool FPDFPageObjGetDashPhase(global::PDFiumSharp.Native.FpdfPageobjectT page_object, ref float phase)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            fixed (float* __phase1 = &phase)
            {
                var __arg1 = __phase1;
                var __ret = __Internal.FPDFPageObjGetDashPhase(__arg0, __arg1);
                return __ret;
            }
        }

        public static bool FPDFPageObjSetDashPhase(global::PDFiumSharp.Native.FpdfPageobjectT page_object, float phase)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __ret = __Internal.FPDFPageObjSetDashPhase(__arg0, phase);
            return __ret;
        }

        public static int FPDFPageObjGetDashCount(global::PDFiumSharp.Native.FpdfPageobjectT page_object)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __ret = __Internal.FPDFPageObjGetDashCount(__arg0);
            return __ret;
        }

        public static bool FPDFPageObjGetDashArray(global::PDFiumSharp.Native.FpdfPageobjectT page_object, ref float dash_array, ulong dash_count)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            fixed (float* __dash_array1 = &dash_array)
            {
                var __arg1 = __dash_array1;
                var __ret = __Internal.FPDFPageObjGetDashArray(__arg0, __arg1, dash_count);
                return __ret;
            }
        }

        public static bool FPDFPageObjSetDashArray(global::PDFiumSharp.Native.FpdfPageobjectT page_object, ref float dash_array, ulong dash_count, float phase)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            fixed (float* __dash_array1 = &dash_array)
            {
                var __arg1 = __dash_array1;
                var __ret = __Internal.FPDFPageObjSetDashArray(__arg0, __arg1, dash_count, phase);
                return __ret;
            }
        }

        public static int FPDFPathCountSegments(global::PDFiumSharp.Native.FpdfPageobjectT path)
        {
            var __arg0 = path is null ? __IntPtr.Zero : path.__Instance;
            var __ret = __Internal.FPDFPathCountSegments(__arg0);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfPathsegmentT FPDFPathGetPathSegment(global::PDFiumSharp.Native.FpdfPageobjectT path, int index)
        {
            var __arg0 = path is null ? __IntPtr.Zero : path.__Instance;
            var __ret = __Internal.FPDFPathGetPathSegment(__arg0, index);
            var __result0 = global::PDFiumSharp.Native.FpdfPathsegmentT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static bool FPDFPathSegmentGetPoint(global::PDFiumSharp.Native.FpdfPathsegmentT segment, ref float x, ref float y)
        {
            var __arg0 = segment is null ? __IntPtr.Zero : segment.__Instance;
            fixed (float* __x1 = &x)
            {
                var __arg1 = __x1;
                fixed (float* __y2 = &y)
                {
                    var __arg2 = __y2;
                    var __ret = __Internal.FPDFPathSegmentGetPoint(__arg0, __arg1, __arg2);
                    return __ret;
                }
            }
        }

        public static int FPDFPathSegmentGetType(global::PDFiumSharp.Native.FpdfPathsegmentT segment)
        {
            var __arg0 = segment is null ? __IntPtr.Zero : segment.__Instance;
            var __ret = __Internal.FPDFPathSegmentGetType(__arg0);
            return __ret;
        }

        public static bool FPDFPathSegmentGetClose(global::PDFiumSharp.Native.FpdfPathsegmentT segment)
        {
            var __arg0 = segment is null ? __IntPtr.Zero : segment.__Instance;
            var __ret = __Internal.FPDFPathSegmentGetClose(__arg0);
            return __ret;
        }

        public static bool FPDFPathMoveTo(global::PDFiumSharp.Native.FpdfPageobjectT path, float x, float y)
        {
            var __arg0 = path is null ? __IntPtr.Zero : path.__Instance;
            var __ret = __Internal.FPDFPathMoveTo(__arg0, x, y);
            return __ret;
        }

        public static bool FPDFPathLineTo(global::PDFiumSharp.Native.FpdfPageobjectT path, float x, float y)
        {
            var __arg0 = path is null ? __IntPtr.Zero : path.__Instance;
            var __ret = __Internal.FPDFPathLineTo(__arg0, x, y);
            return __ret;
        }

        public static bool FPDFPathBezierTo(global::PDFiumSharp.Native.FpdfPageobjectT path, float x1, float y1, float x2, float y2, float x3, float y3)
        {
            var __arg0 = path is null ? __IntPtr.Zero : path.__Instance;
            var __ret = __Internal.FPDFPathBezierTo(__arg0, x1, y1, x2, y2, x3, y3);
            return __ret;
        }

        public static bool FPDFPathClose(global::PDFiumSharp.Native.FpdfPageobjectT path)
        {
            var __arg0 = path is null ? __IntPtr.Zero : path.__Instance;
            var __ret = __Internal.FPDFPathClose(__arg0);
            return __ret;
        }

        public static bool FPDFPathSetDrawMode(global::PDFiumSharp.Native.FpdfPageobjectT path, int fillmode, bool stroke)
        {
            var __arg0 = path is null ? __IntPtr.Zero : path.__Instance;
            var __ret = __Internal.FPDFPathSetDrawMode(__arg0, fillmode, stroke);
            return __ret;
        }

        public static bool FPDFPathGetDrawMode(global::PDFiumSharp.Native.FpdfPageobjectT path, ref int fillmode, ref bool stroke)
        {
            var __arg0 = path is null ? __IntPtr.Zero : path.__Instance;
            fixed (int* __fillmode1 = &fillmode)
            {
                var __arg1 = __fillmode1;
                fixed (bool* __stroke2 = &stroke)
                {
                    var __arg2 = __stroke2;
                    var __ret = __Internal.FPDFPathGetDrawMode(__arg0, __arg1, __arg2);
                    return __ret;
                }
            }
        }

        public static global::PDFiumSharp.Native.FpdfPageobjectT FPDFPageObjNewTextObj(global::PDFiumSharp.Native.FpdfDocumentT document, string font, float font_size)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDFPageObjNewTextObj(__arg0, font, font_size);
            var __result0 = global::PDFiumSharp.Native.FpdfPageobjectT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static bool FPDFTextSetText(global::PDFiumSharp.Native.FpdfPageobjectT text_object, string text)
        {
            var __arg0 = text_object is null ? __IntPtr.Zero : text_object.__Instance;
            var __ret = __Internal.FPDFTextSetText(__arg0, text);
            return __ret;
        }

        public static bool FPDFTextSetCharcodes(global::PDFiumSharp.Native.FpdfPageobjectT text_object, ref uint charcodes, ulong count)
        {
            var __arg0 = text_object is null ? __IntPtr.Zero : text_object.__Instance;
            fixed (uint* __charcodes1 = &charcodes)
            {
                var __arg1 = __charcodes1;
                var __ret = __Internal.FPDFTextSetCharcodes(__arg0, __arg1, count);
                return __ret;
            }
        }

        public static global::PDFiumSharp.Native.FpdfFontT FPDFTextLoadFont(global::PDFiumSharp.Native.FpdfDocumentT document, byte* data, uint size, int font_type, bool cid)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDFTextLoadFont(__arg0, data, size, font_type, cid);
            var __result0 = global::PDFiumSharp.Native.FpdfFontT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static global::PDFiumSharp.Native.FpdfFontT FPDFTextLoadStandardFont(global::PDFiumSharp.Native.FpdfDocumentT document, string font)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDFTextLoadStandardFont(__arg0, font);
            var __result0 = global::PDFiumSharp.Native.FpdfFontT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static bool FPDFTextObjGetFontSize(global::PDFiumSharp.Native.FpdfPageobjectT text, ref float size)
        {
            var __arg0 = text is null ? __IntPtr.Zero : text.__Instance;
            fixed (float* __size1 = &size)
            {
                var __arg1 = __size1;
                var __ret = __Internal.FPDFTextObjGetFontSize(__arg0, __arg1);
                return __ret;
            }
        }

        public static void FPDFFontClose(global::PDFiumSharp.Native.FpdfFontT font)
        {
            var __arg0 = font is null ? __IntPtr.Zero : font.__Instance;
            __Internal.FPDFFontClose(__arg0);
        }

        public static global::PDFiumSharp.Native.FpdfPageobjectT FPDFPageObjCreateTextObj(global::PDFiumSharp.Native.FpdfDocumentT document, global::PDFiumSharp.Native.FpdfFontT font, float font_size)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg1 = font is null ? __IntPtr.Zero : font.__Instance;
            var __ret = __Internal.FPDFPageObjCreateTextObj(__arg0, __arg1, font_size);
            var __result0 = global::PDFiumSharp.Native.FpdfPageobjectT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static global::PDFiumSharp.Native.FPDF_TEXT_RENDERMODE FPDFTextObjGetTextRenderMode(global::PDFiumSharp.Native.FpdfPageobjectT text)
        {
            var __arg0 = text is null ? __IntPtr.Zero : text.__Instance;
            var __ret = __Internal.FPDFTextObjGetTextRenderMode(__arg0);
            return __ret;
        }

        public static bool FPDFTextObjSetTextRenderMode(global::PDFiumSharp.Native.FpdfPageobjectT text, global::PDFiumSharp.Native.FPDF_TEXT_RENDERMODE render_mode)
        {
            var __arg0 = text is null ? __IntPtr.Zero : text.__Instance;
            var __ret = __Internal.FPDFTextObjSetTextRenderMode(__arg0, render_mode);
            return __ret;
        }

        public static uint FPDFTextObjGetText(global::PDFiumSharp.Native.FpdfPageobjectT text_object, global::PDFiumSharp.Native.FpdfTextpageT text_page, char* buffer, uint length)
        {
            var __arg0 = text_object is null ? __IntPtr.Zero : text_object.__Instance;
            var __arg1 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            var __ret = __Internal.FPDFTextObjGetText(__arg0, __arg1, buffer, length);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfFontT FPDFTextObjGetFont(global::PDFiumSharp.Native.FpdfPageobjectT text)
        {
            var __arg0 = text is null ? __IntPtr.Zero : text.__Instance;
            var __ret = __Internal.FPDFTextObjGetFont(__arg0);
            var __result0 = global::PDFiumSharp.Native.FpdfFontT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static uint FPDFFontGetFontName(global::PDFiumSharp.Native.FpdfFontT font, sbyte* buffer, uint length)
        {
            var __arg0 = font is null ? __IntPtr.Zero : font.__Instance;
            var __ret = __Internal.FPDFFontGetFontName(__arg0, buffer, length);
            return __ret;
        }

        public static int FPDFFontGetFlags(global::PDFiumSharp.Native.FpdfFontT font)
        {
            var __arg0 = font is null ? __IntPtr.Zero : font.__Instance;
            var __ret = __Internal.FPDFFontGetFlags(__arg0);
            return __ret;
        }

        public static int FPDFFontGetWeight(global::PDFiumSharp.Native.FpdfFontT font)
        {
            var __arg0 = font is null ? __IntPtr.Zero : font.__Instance;
            var __ret = __Internal.FPDFFontGetWeight(__arg0);
            return __ret;
        }

        public static bool FPDFFontGetItalicAngle(global::PDFiumSharp.Native.FpdfFontT font, ref int angle)
        {
            var __arg0 = font is null ? __IntPtr.Zero : font.__Instance;
            fixed (int* __angle1 = &angle)
            {
                var __arg1 = __angle1;
                var __ret = __Internal.FPDFFontGetItalicAngle(__arg0, __arg1);
                return __ret;
            }
        }

        public static bool FPDFFontGetAscent(global::PDFiumSharp.Native.FpdfFontT font, float font_size, ref float ascent)
        {
            var __arg0 = font is null ? __IntPtr.Zero : font.__Instance;
            fixed (float* __ascent2 = &ascent)
            {
                var __arg2 = __ascent2;
                var __ret = __Internal.FPDFFontGetAscent(__arg0, font_size, __arg2);
                return __ret;
            }
        }

        public static bool FPDFFontGetDescent(global::PDFiumSharp.Native.FpdfFontT font, float font_size, ref float descent)
        {
            var __arg0 = font is null ? __IntPtr.Zero : font.__Instance;
            fixed (float* __descent2 = &descent)
            {
                var __arg2 = __descent2;
                var __ret = __Internal.FPDFFontGetDescent(__arg0, font_size, __arg2);
                return __ret;
            }
        }

        public static bool FPDFFontGetGlyphWidth(global::PDFiumSharp.Native.FpdfFontT font, uint glyph, float font_size, ref float width)
        {
            var __arg0 = font is null ? __IntPtr.Zero : font.__Instance;
            fixed (float* __width3 = &width)
            {
                var __arg3 = __width3;
                var __ret = __Internal.FPDFFontGetGlyphWidth(__arg0, glyph, font_size, __arg3);
                return __ret;
            }
        }

        public static global::PDFiumSharp.Native.FpdfGlyphpathT FPDFFontGetGlyphPath(global::PDFiumSharp.Native.FpdfFontT font, uint glyph, float font_size)
        {
            var __arg0 = font is null ? __IntPtr.Zero : font.__Instance;
            var __ret = __Internal.FPDFFontGetGlyphPath(__arg0, glyph, font_size);
            var __result0 = global::PDFiumSharp.Native.FpdfGlyphpathT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static int FPDFGlyphPathCountGlyphSegments(global::PDFiumSharp.Native.FpdfGlyphpathT glyphpath)
        {
            var __arg0 = glyphpath is null ? __IntPtr.Zero : glyphpath.__Instance;
            var __ret = __Internal.FPDFGlyphPathCountGlyphSegments(__arg0);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfPathsegmentT FPDFGlyphPathGetGlyphPathSegment(global::PDFiumSharp.Native.FpdfGlyphpathT glyphpath, int index)
        {
            var __arg0 = glyphpath is null ? __IntPtr.Zero : glyphpath.__Instance;
            var __ret = __Internal.FPDFGlyphPathGetGlyphPathSegment(__arg0, index);
            var __result0 = global::PDFiumSharp.Native.FpdfPathsegmentT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static int FPDFFormObjCountObjects(global::PDFiumSharp.Native.FpdfPageobjectT form_object)
        {
            var __arg0 = form_object is null ? __IntPtr.Zero : form_object.__Instance;
            var __ret = __Internal.FPDFFormObjCountObjects(__arg0);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfPageobjectT FPDFFormObjGetObject(global::PDFiumSharp.Native.FpdfPageobjectT form_object, uint index)
        {
            var __arg0 = form_object is null ? __IntPtr.Zero : form_object.__Instance;
            var __ret = __Internal.FPDFFormObjGetObject(__arg0, index);
            var __result0 = global::PDFiumSharp.Native.FpdfPageobjectT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }
    }

    public unsafe partial class UNSUPPORT_INFO : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal int version;
            internal __IntPtr FSDK_UnSupport_Handler;

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0_UNSUPPORT_INFO@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.UNSUPPORT_INFO> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.UNSUPPORT_INFO>();

        protected bool __ownsNativeInstance;

        internal static UNSUPPORT_INFO __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new UNSUPPORT_INFO(native.ToPointer(), skipVTables);
        }

        internal static UNSUPPORT_INFO __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (UNSUPPORT_INFO)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static UNSUPPORT_INFO __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new UNSUPPORT_INFO(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private UNSUPPORT_INFO(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected UNSUPPORT_INFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public UNSUPPORT_INFO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.UNSUPPORT_INFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public UNSUPPORT_INFO(global::PDFiumSharp.Native.UNSUPPORT_INFO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.UNSUPPORT_INFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.UNSUPPORT_INFO.__Internal*) __Instance) = *((global::PDFiumSharp.Native.UNSUPPORT_INFO.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Version
        {
            get
            {
                return ((__Internal*)__Instance)->version;
            }

            set
            {
                ((__Internal*)__Instance)->version = value;
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr_int FSDK_UnSupportHandler
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->FSDK_UnSupport_Handler;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr_int));
            }

            set
            {
                ((__Internal*)__Instance)->FSDK_UnSupport_Handler = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public unsafe partial class fpdf_ext
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FSDK_SetUnSpObjProcessHandler", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FSDK_SetUnSpObjProcessHandler(__IntPtr unsp_info);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FSDK_SetTimeFunction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FSDK_SetTimeFunction(__IntPtr func);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFDoc_GetPageMode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFDocGetPageMode(__IntPtr document);
        }

        public static bool FSDK_SetUnSpObjProcessHandler(global::PDFiumSharp.Native.UNSUPPORT_INFO unsp_info)
        {
            var __arg0 = unsp_info is null ? __IntPtr.Zero : unsp_info.__Instance;
            var __ret = __Internal.FSDK_SetUnSpObjProcessHandler(__arg0);
            return __ret;
        }

        public static void FSDK_SetTimeFunction(global::PDFiumSharp.Native.Delegates.Func_long func)
        {
            var __arg0 = func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(func);
            __Internal.FSDK_SetTimeFunction(__arg0);
        }

        public static int FPDFDocGetPageMode(global::PDFiumSharp.Native.FpdfDocumentT document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDFDocGetPageMode(__arg0);
            return __ret;
        }
    }

    public unsafe partial class fpdf_flatten
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_Flatten", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFPageFlatten(__IntPtr page, int nFlag);
        }

        public static int FPDFPageFlatten(global::PDFiumSharp.Native.FpdfPageT page, int nFlag)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDFPageFlatten(__arg0, nFlag);
            return __ret;
        }
    }

    [Flags]
    public enum FWL_EVENTFLAG
    {
        FWL_EVENTFLAG_ShiftKey = 1,
        FWL_EVENTFLAG_ControlKey = 2,
        FWL_EVENTFLAG_AltKey = 4,
        FWL_EVENTFLAG_MetaKey = 8,
        FWL_EVENTFLAG_KeyPad = 16,
        FWL_EVENTFLAG_AutoRepeat = 32,
        FWL_EVENTFLAG_LeftButtonDown = 64,
        FWL_EVENTFLAG_MiddleButtonDown = 128,
        FWL_EVENTFLAG_RightButtonDown = 256
    }

    public enum FWL_VKEYCODE
    {
        FWL_VKEY_Back = 8,
        FWL_VKEY_Tab = 9,
        FWL_VKEY_NewLine = 10,
        FWL_VKEY_Clear = 12,
        FWL_VKEY_Return = 13,
        FWL_VKEY_Shift = 16,
        FWL_VKEY_Control = 17,
        FWL_VKEY_Menu = 18,
        FWL_VKEY_Pause = 19,
        FWL_VKEY_Capital = 20,
        FWL_VKEY_Kana = 21,
        FWL_VKEY_Hangul = 21,
        FWL_VKEY_Junja = 23,
        FWL_VKEY_Final = 24,
        FWL_VKEY_Hanja = 25,
        FWL_VKEY_Kanji = 25,
        FWL_VKEY_Escape = 27,
        FWL_VKEY_Convert = 28,
        FWL_VKEY_NonConvert = 29,
        FWL_VKEY_Accept = 30,
        FWL_VKEY_ModeChange = 31,
        FWL_VKEY_Space = 32,
        FWL_VKEY_Prior = 33,
        FWL_VKEY_Next = 34,
        FWL_VKEY_End = 35,
        FWL_VKEY_Home = 36,
        FWL_VKEY_Left = 37,
        FWL_VKEY_Up = 38,
        FWL_VKEY_Right = 39,
        FWL_VKEY_Down = 40,
        FWL_VKEY_Select = 41,
        FWL_VKEY_Print = 42,
        FWL_VKEY_Execute = 43,
        FWL_VKEY_Snapshot = 44,
        FWL_VKEY_Insert = 45,
        FWL_VKEY_Delete = 46,
        FWL_VKEY_Help = 47,
        FWL_VKEY_0 = 48,
        FWL_VKEY_1 = 49,
        FWL_VKEY_2 = 50,
        FWL_VKEY_3 = 51,
        FWL_VKEY_4 = 52,
        FWL_VKEY_5 = 53,
        FWL_VKEY_6 = 54,
        FWL_VKEY_7 = 55,
        FWL_VKEY_8 = 56,
        FWL_VKEY_9 = 57,
        FWL_VKEY_A = 65,
        FWL_VKEY_B = 66,
        FWL_VKEY_C = 67,
        FWL_VKEY_D = 68,
        FWL_VKEY_E = 69,
        FWL_VKEY_F = 70,
        FWL_VKEY_G = 71,
        FWL_VKEY_H = 72,
        FWL_VKEY_I = 73,
        FWL_VKEY_J = 74,
        FWL_VKEY_K = 75,
        FWL_VKEY_L = 76,
        FWL_VKEY_M = 77,
        FWL_VKEY_N = 78,
        FWL_VKEY_O = 79,
        FWL_VKEY_P = 80,
        FWL_VKEY_Q = 81,
        FWL_VKEY_R = 82,
        FWL_VKEY_S = 83,
        FWL_VKEY_T = 84,
        FWL_VKEY_U = 85,
        FWL_VKEY_V = 86,
        FWL_VKEY_W = 87,
        FWL_VKEY_X = 88,
        FWL_VKEY_Y = 89,
        FWL_VKEY_Z = 90,
        FWL_VKEY_LWin = 91,
        FWL_VKEY_Command = 91,
        FWL_VKEY_RWin = 92,
        FWL_VKEY_Apps = 93,
        FWL_VKEY_Sleep = 95,
        FWL_VKEY_NumPad0 = 96,
        FWL_VKEY_NumPad1 = 97,
        FWL_VKEY_NumPad2 = 98,
        FWL_VKEY_NumPad3 = 99,
        FWL_VKEY_NumPad4 = 100,
        FWL_VKEY_NumPad5 = 101,
        FWL_VKEY_NumPad6 = 102,
        FWL_VKEY_NumPad7 = 103,
        FWL_VKEY_NumPad8 = 104,
        FWL_VKEY_NumPad9 = 105,
        FWL_VKEY_Multiply = 106,
        FWL_VKEY_Add = 107,
        FWL_VKEY_Separator = 108,
        FWL_VKEY_Subtract = 109,
        FWL_VKEY_Decimal = 110,
        FWL_VKEY_Divide = 111,
        FWL_VKEY_F1 = 112,
        FWL_VKEY_F2 = 113,
        FWL_VKEY_F3 = 114,
        FWL_VKEY_F4 = 115,
        FWL_VKEY_F5 = 116,
        FWL_VKEY_F6 = 117,
        FWL_VKEY_F7 = 118,
        FWL_VKEY_F8 = 119,
        FWL_VKEY_F9 = 120,
        FWL_VKEY_F10 = 121,
        FWL_VKEY_F11 = 122,
        FWL_VKEY_F12 = 123,
        FWL_VKEY_F13 = 124,
        FWL_VKEY_F14 = 125,
        FWL_VKEY_F15 = 126,
        FWL_VKEY_F16 = 127,
        FWL_VKEY_F17 = 128,
        FWL_VKEY_F18 = 129,
        FWL_VKEY_F19 = 130,
        FWL_VKEY_F20 = 131,
        FWL_VKEY_F21 = 132,
        FWL_VKEY_F22 = 133,
        FWL_VKEY_F23 = 134,
        FWL_VKEY_F24 = 135,
        FWL_VKEY_NunLock = 144,
        FWL_VKEY_Scroll = 145,
        FWL_VKEY_LShift = 160,
        FWL_VKEY_RShift = 161,
        FWL_VKEY_LControl = 162,
        FWL_VKEY_RControl = 163,
        FWL_VKEY_LMenu = 164,
        FWL_VKEY_RMenu = 165,
        FWL_VKEY_BROWSER_Back = 166,
        FWL_VKEY_BROWSER_Forward = 167,
        FWL_VKEY_BROWSER_Refresh = 168,
        FWL_VKEY_BROWSER_Stop = 169,
        FWL_VKEY_BROWSER_Search = 170,
        FWL_VKEY_BROWSER_Favorites = 171,
        FWL_VKEY_BROWSER_Home = 172,
        FWL_VKEY_VOLUME_Mute = 173,
        FWL_VKEY_VOLUME_Down = 174,
        FWL_VKEY_VOLUME_Up = 175,
        FWL_VKEY_MEDIA_NEXT_Track = 176,
        FWL_VKEY_MEDIA_PREV_Track = 177,
        FWL_VKEY_MEDIA_Stop = 178,
        FWL_VKEY_MEDIA_PLAY_Pause = 179,
        FWL_VKEY_MEDIA_LAUNCH_Mail = 180,
        FWL_VKEY_MEDIA_LAUNCH_MEDIA_Select = 181,
        FWL_VKEY_MEDIA_LAUNCH_APP1 = 182,
        FWL_VKEY_MEDIA_LAUNCH_APP2 = 183,
        FWL_VKEY_OEM_1 = 186,
        FWL_VKEY_OEM_Plus = 187,
        FWL_VKEY_OEM_Comma = 188,
        FWL_VKEY_OEM_Minus = 189,
        FWL_VKEY_OEM_Period = 190,
        FWL_VKEY_OEM_2 = 191,
        FWL_VKEY_OEM_3 = 192,
        FWL_VKEY_OEM_4 = 219,
        FWL_VKEY_OEM_5 = 220,
        FWL_VKEY_OEM_6 = 221,
        FWL_VKEY_OEM_7 = 222,
        FWL_VKEY_OEM_8 = 223,
        FWL_VKEY_OEM_102 = 226,
        FWL_VKEY_ProcessKey = 229,
        FWL_VKEY_Packet = 231,
        FWL_VKEY_Attn = 246,
        FWL_VKEY_Crsel = 247,
        FWL_VKEY_Exsel = 248,
        FWL_VKEY_Ereof = 249,
        FWL_VKEY_Play = 250,
        FWL_VKEY_Zoom = 251,
        FWL_VKEY_NoName = 252,
        FWL_VKEY_PA1 = 253,
        FWL_VKEY_OEM_Clear = 254,
        FWL_VKEY_Unknown = 0
    }

    public unsafe partial class fpdf_javascript
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFDoc_GetJavaScriptActionCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFDocGetJavaScriptActionCount(__IntPtr document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFDoc_GetJavaScriptAction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFDocGetJavaScriptAction(__IntPtr document, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFDoc_CloseJavaScriptAction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFDocCloseJavaScriptAction(__IntPtr javascript);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFJavaScriptAction_GetName", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFJavaScriptActionGetName(__IntPtr javascript, char* buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFJavaScriptAction_GetScript", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFJavaScriptActionGetScript(__IntPtr javascript, char* buffer, uint buflen);
        }

        public static int FPDFDocGetJavaScriptActionCount(global::PDFiumSharp.Native.FpdfDocumentT document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDFDocGetJavaScriptActionCount(__arg0);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfJavascriptActionT FPDFDocGetJavaScriptAction(global::PDFiumSharp.Native.FpdfDocumentT document, int index)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDFDocGetJavaScriptAction(__arg0, index);
            var __result0 = global::PDFiumSharp.Native.FpdfJavascriptActionT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static void FPDFDocCloseJavaScriptAction(global::PDFiumSharp.Native.FpdfJavascriptActionT javascript)
        {
            var __arg0 = javascript is null ? __IntPtr.Zero : javascript.__Instance;
            __Internal.FPDFDocCloseJavaScriptAction(__arg0);
        }

        public static uint FPDFJavaScriptActionGetName(global::PDFiumSharp.Native.FpdfJavascriptActionT javascript, char* buffer, uint buflen)
        {
            var __arg0 = javascript is null ? __IntPtr.Zero : javascript.__Instance;
            var __ret = __Internal.FPDFJavaScriptActionGetName(__arg0, buffer, buflen);
            return __ret;
        }

        public static uint FPDFJavaScriptActionGetScript(global::PDFiumSharp.Native.FpdfJavascriptActionT javascript, char* buffer, uint buflen)
        {
            var __arg0 = javascript is null ? __IntPtr.Zero : javascript.__Instance;
            var __ret = __Internal.FPDFJavaScriptActionGetScript(__arg0, buffer, buflen);
            return __ret;
        }
    }

    public unsafe partial class fpdf_ppo
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_ImportPagesByIndex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDF_ImportPagesByIndex(__IntPtr dest_doc, __IntPtr src_doc, int* page_indices, uint length, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_ImportPages", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDF_ImportPages(__IntPtr dest_doc, __IntPtr src_doc, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string pagerange, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_ImportNPagesToOne", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_ImportNPagesToOne(__IntPtr src_doc, float output_width, float output_height, ulong num_pages_on_x_axis, ulong num_pages_on_y_axis);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_NewXObjectFromPage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_NewXObjectFromPage(__IntPtr dest_doc, __IntPtr src_doc, int src_page_index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_CloseXObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_CloseXObject(__IntPtr xobject);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_NewFormObjectFromXObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_NewFormObjectFromXObject(__IntPtr xobject);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_CopyViewerPreferences", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDF_CopyViewerPreferences(__IntPtr dest_doc, __IntPtr src_doc);
        }

        public static bool FPDF_ImportPagesByIndex(global::PDFiumSharp.Native.FpdfDocumentT dest_doc, global::PDFiumSharp.Native.FpdfDocumentT src_doc, ref int page_indices, uint length, int index)
        {
            var __arg0 = dest_doc is null ? __IntPtr.Zero : dest_doc.__Instance;
            var __arg1 = src_doc is null ? __IntPtr.Zero : src_doc.__Instance;
            fixed (int* __page_indices2 = &page_indices)
            {
                var __arg2 = __page_indices2;
                var __ret = __Internal.FPDF_ImportPagesByIndex(__arg0, __arg1, __arg2, length, index);
                return __ret;
            }
        }

        public static bool FPDF_ImportPages(global::PDFiumSharp.Native.FpdfDocumentT dest_doc, global::PDFiumSharp.Native.FpdfDocumentT src_doc, string pagerange, int index)
        {
            var __arg0 = dest_doc is null ? __IntPtr.Zero : dest_doc.__Instance;
            var __arg1 = src_doc is null ? __IntPtr.Zero : src_doc.__Instance;
            var __ret = __Internal.FPDF_ImportPages(__arg0, __arg1, pagerange, index);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfDocumentT FPDF_ImportNPagesToOne(global::PDFiumSharp.Native.FpdfDocumentT src_doc, float output_width, float output_height, ulong num_pages_on_x_axis, ulong num_pages_on_y_axis)
        {
            var __arg0 = src_doc is null ? __IntPtr.Zero : src_doc.__Instance;
            var __ret = __Internal.FPDF_ImportNPagesToOne(__arg0, output_width, output_height, num_pages_on_x_axis, num_pages_on_y_axis);
            var __result0 = global::PDFiumSharp.Native.FpdfDocumentT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static global::PDFiumSharp.Native.FpdfXobjectT FPDF_NewXObjectFromPage(global::PDFiumSharp.Native.FpdfDocumentT dest_doc, global::PDFiumSharp.Native.FpdfDocumentT src_doc, int src_page_index)
        {
            var __arg0 = dest_doc is null ? __IntPtr.Zero : dest_doc.__Instance;
            var __arg1 = src_doc is null ? __IntPtr.Zero : src_doc.__Instance;
            var __ret = __Internal.FPDF_NewXObjectFromPage(__arg0, __arg1, src_page_index);
            var __result0 = global::PDFiumSharp.Native.FpdfXobjectT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static void FPDF_CloseXObject(global::PDFiumSharp.Native.FpdfXobjectT xobject)
        {
            var __arg0 = xobject is null ? __IntPtr.Zero : xobject.__Instance;
            __Internal.FPDF_CloseXObject(__arg0);
        }

        public static global::PDFiumSharp.Native.FpdfPageobjectT FPDF_NewFormObjectFromXObject(global::PDFiumSharp.Native.FpdfXobjectT xobject)
        {
            var __arg0 = xobject is null ? __IntPtr.Zero : xobject.__Instance;
            var __ret = __Internal.FPDF_NewFormObjectFromXObject(__arg0);
            var __result0 = global::PDFiumSharp.Native.FpdfPageobjectT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static bool FPDF_CopyViewerPreferences(global::PDFiumSharp.Native.FpdfDocumentT dest_doc, global::PDFiumSharp.Native.FpdfDocumentT src_doc)
        {
            var __arg0 = dest_doc is null ? __IntPtr.Zero : dest_doc.__Instance;
            var __arg1 = src_doc is null ? __IntPtr.Zero : src_doc.__Instance;
            var __ret = __Internal.FPDF_CopyViewerPreferences(__arg0, __arg1);
            return __ret;
        }
    }

    public unsafe partial class IFSDK_PAUSE : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal int version;
            internal __IntPtr NeedToPauseNow;
            internal __IntPtr user;

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0_IFSDK_PAUSE@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.IFSDK_PAUSE> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.IFSDK_PAUSE>();

        protected bool __ownsNativeInstance;

        internal static IFSDK_PAUSE __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new IFSDK_PAUSE(native.ToPointer(), skipVTables);
        }

        internal static IFSDK_PAUSE __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (IFSDK_PAUSE)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static IFSDK_PAUSE __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new IFSDK_PAUSE(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IFSDK_PAUSE(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IFSDK_PAUSE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public IFSDK_PAUSE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.IFSDK_PAUSE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public IFSDK_PAUSE(global::PDFiumSharp.Native.IFSDK_PAUSE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.IFSDK_PAUSE.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.IFSDK_PAUSE.__Internal*) __Instance) = *((global::PDFiumSharp.Native.IFSDK_PAUSE.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Version
        {
            get
            {
                return ((__Internal*)__Instance)->version;
            }

            set
            {
                ((__Internal*)__Instance)->version = value;
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_bool___IntPtr NeedToPauseNow
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->NeedToPauseNow;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_bool___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_bool___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->NeedToPauseNow = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public __IntPtr User
        {
            get
            {
                return ((__Internal*)__Instance)->user;
            }

            set
            {
                ((__Internal*)__Instance)->user = (__IntPtr) value;
            }
        }
    }

    public unsafe partial class fpdf_progressive
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_RenderPageBitmapWithColorScheme_Start", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDF_RenderPageBitmapWithColorSchemeStart(__IntPtr bitmap, __IntPtr page, int start_x, int start_y, int size_x, int size_y, int rotate, int flags, __IntPtr color_scheme, __IntPtr pause);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_RenderPageBitmap_Start", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDF_RenderPageBitmapStart(__IntPtr bitmap, __IntPtr page, int start_x, int start_y, int size_x, int size_y, int rotate, int flags, __IntPtr pause);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_RenderPage_Continue", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDF_RenderPageContinue(__IntPtr page, __IntPtr pause);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_RenderPage_Close", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_RenderPageClose(__IntPtr page);
        }

        public static int FPDF_RenderPageBitmapWithColorSchemeStart(global::PDFiumSharp.Native.FpdfBitmapT bitmap, global::PDFiumSharp.Native.FpdfPageT page, int start_x, int start_y, int size_x, int size_y, int rotate, int flags, global::PDFiumSharp.Native.FPDF_COLORSCHEME_ color_scheme, global::PDFiumSharp.Native.IFSDK_PAUSE pause)
        {
            var __arg0 = bitmap is null ? __IntPtr.Zero : bitmap.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg8 = color_scheme is null ? __IntPtr.Zero : color_scheme.__Instance;
            var __arg9 = pause is null ? __IntPtr.Zero : pause.__Instance;
            var __ret = __Internal.FPDF_RenderPageBitmapWithColorSchemeStart(__arg0, __arg1, start_x, start_y, size_x, size_y, rotate, flags, __arg8, __arg9);
            return __ret;
        }

        public static int FPDF_RenderPageBitmapStart(global::PDFiumSharp.Native.FpdfBitmapT bitmap, global::PDFiumSharp.Native.FpdfPageT page, int start_x, int start_y, int size_x, int size_y, int rotate, int flags, global::PDFiumSharp.Native.IFSDK_PAUSE pause)
        {
            var __arg0 = bitmap is null ? __IntPtr.Zero : bitmap.__Instance;
            var __arg1 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg8 = pause is null ? __IntPtr.Zero : pause.__Instance;
            var __ret = __Internal.FPDF_RenderPageBitmapStart(__arg0, __arg1, start_x, start_y, size_x, size_y, rotate, flags, __arg8);
            return __ret;
        }

        public static int FPDF_RenderPageContinue(global::PDFiumSharp.Native.FpdfPageT page, global::PDFiumSharp.Native.IFSDK_PAUSE pause)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg1 = pause is null ? __IntPtr.Zero : pause.__Instance;
            var __ret = __Internal.FPDF_RenderPageContinue(__arg0, __arg1);
            return __ret;
        }

        public static void FPDF_RenderPageClose(global::PDFiumSharp.Native.FpdfPageT page)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            __Internal.FPDF_RenderPageClose(__arg0);
        }
    }

    public unsafe partial class FPDF_FILEWRITE_ : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal int version;
            internal __IntPtr WriteBlock;

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FPDF_FILEWRITE_@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDF_FILEWRITE_> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDF_FILEWRITE_>();

        protected bool __ownsNativeInstance;

        internal static FPDF_FILEWRITE_ __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDF_FILEWRITE_(native.ToPointer(), skipVTables);
        }

        internal static FPDF_FILEWRITE_ __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDF_FILEWRITE_)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDF_FILEWRITE_ __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDF_FILEWRITE_(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDF_FILEWRITE_(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDF_FILEWRITE_(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDF_FILEWRITE_()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDF_FILEWRITE_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDF_FILEWRITE_(global::PDFiumSharp.Native.FPDF_FILEWRITE_ _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDF_FILEWRITE_.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDF_FILEWRITE_.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDF_FILEWRITE_.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Version
        {
            get
            {
                return ((__Internal*)__Instance)->version;
            }

            set
            {
                ((__Internal*)__Instance)->version = value;
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr_uint WriteBlock
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->WriteBlock;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr_uint) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr_uint));
            }

            set
            {
                ((__Internal*)__Instance)->WriteBlock = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public unsafe partial class fpdf_save
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_SaveAsCopy", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDF_SaveAsCopy(__IntPtr document, __IntPtr pFileWrite, uint flags);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_SaveWithVersion", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDF_SaveWithVersion(__IntPtr document, __IntPtr pFileWrite, uint flags, int fileVersion);
        }

        public static bool FPDF_SaveAsCopy(global::PDFiumSharp.Native.FpdfDocumentT document, global::PDFiumSharp.Native.FPDF_FILEWRITE_ pFileWrite, uint flags)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg1 = pFileWrite is null ? __IntPtr.Zero : pFileWrite.__Instance;
            var __ret = __Internal.FPDF_SaveAsCopy(__arg0, __arg1, flags);
            return __ret;
        }

        public static bool FPDF_SaveWithVersion(global::PDFiumSharp.Native.FpdfDocumentT document, global::PDFiumSharp.Native.FPDF_FILEWRITE_ pFileWrite, uint flags, int fileVersion)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __arg1 = pFileWrite is null ? __IntPtr.Zero : pFileWrite.__Instance;
            var __ret = __Internal.FPDF_SaveWithVersion(__arg0, __arg1, flags, fileVersion);
            return __ret;
        }
    }

    public unsafe partial class fpdf_searchex
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_GetCharIndexFromTextIndex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFTextGetCharIndexFromTextIndex(__IntPtr text_page, int nTextIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_GetTextIndexFromCharIndex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFTextGetTextIndexFromCharIndex(__IntPtr text_page, int nCharIndex);
        }

        public static int FPDFTextGetCharIndexFromTextIndex(global::PDFiumSharp.Native.FpdfTextpageT text_page, int nTextIndex)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            var __ret = __Internal.FPDFTextGetCharIndexFromTextIndex(__arg0, nTextIndex);
            return __ret;
        }

        public static int FPDFTextGetTextIndexFromCharIndex(global::PDFiumSharp.Native.FpdfTextpageT text_page, int nCharIndex)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            var __ret = __Internal.FPDFTextGetTextIndexFromCharIndex(__arg0, nCharIndex);
            return __ret;
        }
    }

    public unsafe partial class fpdf_signature
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetSignatureCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDF_GetSignatureCount(__IntPtr document);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetSignatureObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_GetSignatureObject(__IntPtr document, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFSignatureObj_GetContents", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFSignatureObjGetContents(__IntPtr signature, __IntPtr buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFSignatureObj_GetByteRange", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFSignatureObjGetByteRange(__IntPtr signature, int* buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFSignatureObj_GetSubFilter", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFSignatureObjGetSubFilter(__IntPtr signature, sbyte* buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFSignatureObj_GetReason", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFSignatureObjGetReason(__IntPtr signature, __IntPtr buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFSignatureObj_GetTime", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFSignatureObjGetTime(__IntPtr signature, sbyte* buffer, uint length);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFSignatureObj_GetDocMDPPermission", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFSignatureObjGetDocMDPPermission(__IntPtr signature);
        }

        public static int FPDF_GetSignatureCount(global::PDFiumSharp.Native.FpdfDocumentT document)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDF_GetSignatureCount(__arg0);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfSignatureT FPDF_GetSignatureObject(global::PDFiumSharp.Native.FpdfDocumentT document, int index)
        {
            var __arg0 = document is null ? __IntPtr.Zero : document.__Instance;
            var __ret = __Internal.FPDF_GetSignatureObject(__arg0, index);
            var __result0 = global::PDFiumSharp.Native.FpdfSignatureT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static uint FPDFSignatureObjGetContents(global::PDFiumSharp.Native.FpdfSignatureT signature, __IntPtr buffer, uint length)
        {
            var __arg0 = signature is null ? __IntPtr.Zero : signature.__Instance;
            var __ret = __Internal.FPDFSignatureObjGetContents(__arg0, buffer, length);
            return __ret;
        }

        public static uint FPDFSignatureObjGetByteRange(global::PDFiumSharp.Native.FpdfSignatureT signature, ref int buffer, uint length)
        {
            var __arg0 = signature is null ? __IntPtr.Zero : signature.__Instance;
            fixed (int* __buffer1 = &buffer)
            {
                var __arg1 = __buffer1;
                var __ret = __Internal.FPDFSignatureObjGetByteRange(__arg0, __arg1, length);
                return __ret;
            }
        }

        public static uint FPDFSignatureObjGetSubFilter(global::PDFiumSharp.Native.FpdfSignatureT signature, sbyte* buffer, uint length)
        {
            var __arg0 = signature is null ? __IntPtr.Zero : signature.__Instance;
            var __ret = __Internal.FPDFSignatureObjGetSubFilter(__arg0, buffer, length);
            return __ret;
        }

        public static uint FPDFSignatureObjGetReason(global::PDFiumSharp.Native.FpdfSignatureT signature, __IntPtr buffer, uint length)
        {
            var __arg0 = signature is null ? __IntPtr.Zero : signature.__Instance;
            var __ret = __Internal.FPDFSignatureObjGetReason(__arg0, buffer, length);
            return __ret;
        }

        public static uint FPDFSignatureObjGetTime(global::PDFiumSharp.Native.FpdfSignatureT signature, sbyte* buffer, uint length)
        {
            var __arg0 = signature is null ? __IntPtr.Zero : signature.__Instance;
            var __ret = __Internal.FPDFSignatureObjGetTime(__arg0, buffer, length);
            return __ret;
        }

        public static uint FPDFSignatureObjGetDocMDPPermission(global::PDFiumSharp.Native.FpdfSignatureT signature)
        {
            var __arg0 = signature is null ? __IntPtr.Zero : signature.__Instance;
            var __ret = __Internal.FPDFSignatureObjGetDocMDPPermission(__arg0);
            return __ret;
        }
    }

    public unsafe partial class fpdf_structtree
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_StructTree_GetForPage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_StructTreeGetForPage(__IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_StructTree_Close", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_StructTreeClose(__IntPtr struct_tree);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_StructTree_CountChildren", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDF_StructTreeCountChildren(__IntPtr struct_tree);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_StructTree_GetChildAtIndex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_StructTreeGetChildAtIndex(__IntPtr struct_tree, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_StructElement_GetAltText", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDF_StructElementGetAltText(__IntPtr struct_element, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_StructElement_GetID", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDF_StructElementGetID(__IntPtr struct_element, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_StructElement_GetLang", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDF_StructElementGetLang(__IntPtr struct_element, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_StructElement_GetStringAttribute", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDF_StructElementGetStringAttribute(__IntPtr struct_element, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string attr_name, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_StructElement_GetMarkedContentID", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDF_StructElementGetMarkedContentID(__IntPtr struct_element);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_StructElement_GetType", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDF_StructElementGetType(__IntPtr struct_element, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_StructElement_GetTitle", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDF_StructElementGetTitle(__IntPtr struct_element, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_StructElement_CountChildren", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDF_StructElementCountChildren(__IntPtr struct_element);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_StructElement_GetChildAtIndex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_StructElementGetChildAtIndex(__IntPtr struct_element, int index);
        }

        public static global::PDFiumSharp.Native.FpdfStructtreeT FPDF_StructTreeGetForPage(global::PDFiumSharp.Native.FpdfPageT page)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDF_StructTreeGetForPage(__arg0);
            var __result0 = global::PDFiumSharp.Native.FpdfStructtreeT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static void FPDF_StructTreeClose(global::PDFiumSharp.Native.FpdfStructtreeT struct_tree)
        {
            var __arg0 = struct_tree is null ? __IntPtr.Zero : struct_tree.__Instance;
            __Internal.FPDF_StructTreeClose(__arg0);
        }

        public static int FPDF_StructTreeCountChildren(global::PDFiumSharp.Native.FpdfStructtreeT struct_tree)
        {
            var __arg0 = struct_tree is null ? __IntPtr.Zero : struct_tree.__Instance;
            var __ret = __Internal.FPDF_StructTreeCountChildren(__arg0);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfStructelementT FPDF_StructTreeGetChildAtIndex(global::PDFiumSharp.Native.FpdfStructtreeT struct_tree, int index)
        {
            var __arg0 = struct_tree is null ? __IntPtr.Zero : struct_tree.__Instance;
            var __ret = __Internal.FPDF_StructTreeGetChildAtIndex(__arg0, index);
            var __result0 = global::PDFiumSharp.Native.FpdfStructelementT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static uint FPDF_StructElementGetAltText(global::PDFiumSharp.Native.FpdfStructelementT struct_element, __IntPtr buffer, uint buflen)
        {
            var __arg0 = struct_element is null ? __IntPtr.Zero : struct_element.__Instance;
            var __ret = __Internal.FPDF_StructElementGetAltText(__arg0, buffer, buflen);
            return __ret;
        }

        public static uint FPDF_StructElementGetID(global::PDFiumSharp.Native.FpdfStructelementT struct_element, __IntPtr buffer, uint buflen)
        {
            var __arg0 = struct_element is null ? __IntPtr.Zero : struct_element.__Instance;
            var __ret = __Internal.FPDF_StructElementGetID(__arg0, buffer, buflen);
            return __ret;
        }

        public static uint FPDF_StructElementGetLang(global::PDFiumSharp.Native.FpdfStructelementT struct_element, __IntPtr buffer, uint buflen)
        {
            var __arg0 = struct_element is null ? __IntPtr.Zero : struct_element.__Instance;
            var __ret = __Internal.FPDF_StructElementGetLang(__arg0, buffer, buflen);
            return __ret;
        }

        public static uint FPDF_StructElementGetStringAttribute(global::PDFiumSharp.Native.FpdfStructelementT struct_element, string attr_name, __IntPtr buffer, uint buflen)
        {
            var __arg0 = struct_element is null ? __IntPtr.Zero : struct_element.__Instance;
            var __ret = __Internal.FPDF_StructElementGetStringAttribute(__arg0, attr_name, buffer, buflen);
            return __ret;
        }

        public static int FPDF_StructElementGetMarkedContentID(global::PDFiumSharp.Native.FpdfStructelementT struct_element)
        {
            var __arg0 = struct_element is null ? __IntPtr.Zero : struct_element.__Instance;
            var __ret = __Internal.FPDF_StructElementGetMarkedContentID(__arg0);
            return __ret;
        }

        public static uint FPDF_StructElementGetType(global::PDFiumSharp.Native.FpdfStructelementT struct_element, __IntPtr buffer, uint buflen)
        {
            var __arg0 = struct_element is null ? __IntPtr.Zero : struct_element.__Instance;
            var __ret = __Internal.FPDF_StructElementGetType(__arg0, buffer, buflen);
            return __ret;
        }

        public static uint FPDF_StructElementGetTitle(global::PDFiumSharp.Native.FpdfStructelementT struct_element, __IntPtr buffer, uint buflen)
        {
            var __arg0 = struct_element is null ? __IntPtr.Zero : struct_element.__Instance;
            var __ret = __Internal.FPDF_StructElementGetTitle(__arg0, buffer, buflen);
            return __ret;
        }

        public static int FPDF_StructElementCountChildren(global::PDFiumSharp.Native.FpdfStructelementT struct_element)
        {
            var __arg0 = struct_element is null ? __IntPtr.Zero : struct_element.__Instance;
            var __ret = __Internal.FPDF_StructElementCountChildren(__arg0);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfStructelementT FPDF_StructElementGetChildAtIndex(global::PDFiumSharp.Native.FpdfStructelementT struct_element, int index)
        {
            var __arg0 = struct_element is null ? __IntPtr.Zero : struct_element.__Instance;
            var __ret = __Internal.FPDF_StructElementGetChildAtIndex(__arg0, index);
            var __result0 = global::PDFiumSharp.Native.FpdfStructelementT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }
    }

    public unsafe partial class FPDF_SYSFONTINFO : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 72)]
        public partial struct __Internal
        {
            internal int version;
            internal __IntPtr Release;
            internal __IntPtr EnumFontsA;
            internal __IntPtr MapFont;
            internal __IntPtr GetFont;
            internal __IntPtr GetFontData;
            internal __IntPtr GetFaceName;
            internal __IntPtr GetFontCharset;
            internal __IntPtr DeleteFont;

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0_FPDF_SYSFONTINFO@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDF_SYSFONTINFO> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDF_SYSFONTINFO>();

        protected bool __ownsNativeInstance;

        internal static FPDF_SYSFONTINFO __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDF_SYSFONTINFO(native.ToPointer(), skipVTables);
        }

        internal static FPDF_SYSFONTINFO __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDF_SYSFONTINFO)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDF_SYSFONTINFO __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDF_SYSFONTINFO(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDF_SYSFONTINFO(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDF_SYSFONTINFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDF_SYSFONTINFO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDF_SYSFONTINFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDF_SYSFONTINFO(global::PDFiumSharp.Native.FPDF_SYSFONTINFO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDF_SYSFONTINFO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDF_SYSFONTINFO.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDF_SYSFONTINFO.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Version
        {
            get
            {
                return ((__Internal*)__Instance)->version;
            }

            set
            {
                ((__Internal*)__Instance)->version = value;
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr Release
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->Release;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->Release = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr EnumFontsA
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->EnumFontsA;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->EnumFontsA = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func___IntPtr___IntPtr_int_bool_int_int__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string_boolPtr MapFont
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->MapFont;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func___IntPtr___IntPtr_int_bool_int_int__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string_boolPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func___IntPtr___IntPtr_int_bool_int_int__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string_boolPtr));
            }

            set
            {
                ((__Internal*)__Instance)->MapFont = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func___IntPtr___IntPtr__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string GetFont
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->GetFont;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func___IntPtr___IntPtr__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func___IntPtr___IntPtr__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string));
            }

            set
            {
                ((__Internal*)__Instance)->GetFont = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_uint___IntPtr___IntPtr_uint_bytePtr_uint GetFontData
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->GetFontData;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_uint___IntPtr___IntPtr_uint_bytePtr_uint) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_uint___IntPtr___IntPtr_uint_bytePtr_uint));
            }

            set
            {
                ((__Internal*)__Instance)->GetFontData = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_uint___IntPtr___IntPtr_sbytePtr_uint GetFaceName
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->GetFaceName;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_uint___IntPtr___IntPtr_sbytePtr_uint) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_uint___IntPtr___IntPtr_sbytePtr_uint));
            }

            set
            {
                ((__Internal*)__Instance)->GetFaceName = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr GetFontCharset
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->GetFontCharset;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Func_int___IntPtr___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->GetFontCharset = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr DeleteFont
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->DeleteFont;
                return __ptr0 == IntPtr.Zero? null : (global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::PDFiumSharp.Native.Delegates.Action___IntPtr___IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->DeleteFont = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public unsafe partial class FPDF_CharsetFontMap : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal int charset;
            internal __IntPtr fontname;

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FPDF_CharsetFontMap_@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDF_CharsetFontMap> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDF_CharsetFontMap>();

        protected bool __ownsNativeInstance;

        internal static FPDF_CharsetFontMap __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDF_CharsetFontMap(native.ToPointer(), skipVTables);
        }

        internal static FPDF_CharsetFontMap __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDF_CharsetFontMap)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDF_CharsetFontMap __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDF_CharsetFontMap(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDF_CharsetFontMap(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDF_CharsetFontMap(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDF_CharsetFontMap()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDF_CharsetFontMap.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDF_CharsetFontMap(global::PDFiumSharp.Native.FPDF_CharsetFontMap _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDF_CharsetFontMap.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDF_CharsetFontMap.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDF_CharsetFontMap.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Charset
        {
            get
            {
                return ((__Internal*)__Instance)->charset;
            }

            set
            {
                ((__Internal*)__Instance)->charset = value;
            }
        }

        public string Fontname
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->fontname);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((__Internal*)__Instance)->fontname = (__IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }
    }

    public unsafe partial class fpdf_sysfontinfo
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetDefaultTTFMap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_GetDefaultTTFMap();

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_AddInstalledFont", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_AddInstalledFont(__IntPtr mapper, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string face, int charset);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_SetSystemFontInfo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_SetSystemFontInfo(__IntPtr pFontInfo);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_GetDefaultSystemFontInfo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_GetDefaultSystemFontInfo();

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_FreeDefaultSystemFontInfo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_FreeDefaultSystemFontInfo(__IntPtr pFontInfo);
        }

        public static global::PDFiumSharp.Native.FPDF_CharsetFontMap FPDF_GetDefaultTTFMap()
        {
            var __ret = __Internal.FPDF_GetDefaultTTFMap();
            var __result0 = global::PDFiumSharp.Native.FPDF_CharsetFontMap.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static void FPDF_AddInstalledFont(__IntPtr mapper, string face, int charset)
        {
            __Internal.FPDF_AddInstalledFont(mapper, face, charset);
        }

        public static void FPDF_SetSystemFontInfo(global::PDFiumSharp.Native.FPDF_SYSFONTINFO pFontInfo)
        {
            var __arg0 = pFontInfo is null ? __IntPtr.Zero : pFontInfo.__Instance;
            __Internal.FPDF_SetSystemFontInfo(__arg0);
        }

        public static global::PDFiumSharp.Native.FPDF_SYSFONTINFO FPDF_GetDefaultSystemFontInfo()
        {
            var __ret = __Internal.FPDF_GetDefaultSystemFontInfo();
            var __result0 = global::PDFiumSharp.Native.FPDF_SYSFONTINFO.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static void FPDF_FreeDefaultSystemFontInfo(global::PDFiumSharp.Native.FPDF_SYSFONTINFO pFontInfo)
        {
            var __arg0 = pFontInfo is null ? __IntPtr.Zero : pFontInfo.__Instance;
            __Internal.FPDF_FreeDefaultSystemFontInfo(__arg0);
        }
    }

    public unsafe partial class fpdf_text
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_LoadPage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFTextLoadPage(__IntPtr page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_ClosePage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFTextClosePage(__IntPtr text_page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_CountChars", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFTextCountChars(__IntPtr text_page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_GetUnicode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFTextGetUnicode(__IntPtr text_page, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_GetFontSize", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double FPDFTextGetFontSize(__IntPtr text_page, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_GetFontInfo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFTextGetFontInfo(__IntPtr text_page, int index, __IntPtr buffer, uint buflen, int* flags);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_GetFontWeight", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFTextGetFontWeight(__IntPtr text_page, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_GetTextRenderMode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::PDFiumSharp.Native.FPDF_TEXT_RENDERMODE FPDFTextGetTextRenderMode(__IntPtr text_page, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_GetFillColor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFTextGetFillColor(__IntPtr text_page, int index, uint* R, uint* G, uint* B, uint* A);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_GetStrokeColor", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFTextGetStrokeColor(__IntPtr text_page, int index, uint* R, uint* G, uint* B, uint* A);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_GetCharAngle", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float FPDFTextGetCharAngle(__IntPtr text_page, int index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_GetCharBox", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFTextGetCharBox(__IntPtr text_page, int index, double* left, double* right, double* bottom, double* top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_GetLooseCharBox", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFTextGetLooseCharBox(__IntPtr text_page, int index, __IntPtr rect);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_GetMatrix", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFTextGetMatrix(__IntPtr text_page, int index, __IntPtr matrix);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_GetCharOrigin", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFTextGetCharOrigin(__IntPtr text_page, int index, double* x, double* y);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_GetCharIndexAtPos", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFTextGetCharIndexAtPos(__IntPtr text_page, double x, double y, double xTolerance, double yTolerance);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_GetText", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFTextGetText(__IntPtr text_page, int start_index, int count, ushort* result);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_CountRects", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFTextCountRects(__IntPtr text_page, int start_index, int count);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_GetRect", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFTextGetRect(__IntPtr text_page, int rect_index, double* left, double* top, double* right, double* bottom);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_GetBoundedText", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFTextGetBoundedText(__IntPtr text_page, double left, double top, double right, double bottom, ushort* buffer, int buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_FindStart", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFTextFindStart(__IntPtr text_page, [MarshalAs(UnmanagedType.LPWStr)] string findwhat, uint flags, int start_index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_FindNext", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFTextFindNext(__IntPtr handle);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_FindPrev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFTextFindPrev(__IntPtr handle);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_GetSchResultIndex", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFTextGetSchResultIndex(__IntPtr handle);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_GetSchCount", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFTextGetSchCount(__IntPtr handle);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFText_FindClose", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFTextFindClose(__IntPtr handle);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFLink_LoadWebLinks", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFLinkLoadWebLinks(__IntPtr text_page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFLink_CountWebLinks", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFLinkCountWebLinks(__IntPtr link_page);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFLink_GetURL", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFLinkGetURL(__IntPtr link_page, int link_index, ushort* buffer, int buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFLink_CountRects", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFLinkCountRects(__IntPtr link_page, int link_index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFLink_GetRect", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFLinkGetRect(__IntPtr link_page, int link_index, int rect_index, double* left, double* top, double* right, double* bottom);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFLink_GetTextRange", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFLinkGetTextRange(__IntPtr link_page, int link_index, int* start_char_index, int* char_count);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFLink_CloseWebLinks", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFLinkCloseWebLinks(__IntPtr link_page);
        }

        public static global::PDFiumSharp.Native.FpdfTextpageT FPDFTextLoadPage(global::PDFiumSharp.Native.FpdfPageT page)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDFTextLoadPage(__arg0);
            var __result0 = global::PDFiumSharp.Native.FpdfTextpageT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static void FPDFTextClosePage(global::PDFiumSharp.Native.FpdfTextpageT text_page)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            __Internal.FPDFTextClosePage(__arg0);
        }

        public static int FPDFTextCountChars(global::PDFiumSharp.Native.FpdfTextpageT text_page)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            var __ret = __Internal.FPDFTextCountChars(__arg0);
            return __ret;
        }

        public static uint FPDFTextGetUnicode(global::PDFiumSharp.Native.FpdfTextpageT text_page, int index)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            var __ret = __Internal.FPDFTextGetUnicode(__arg0, index);
            return __ret;
        }

        public static double FPDFTextGetFontSize(global::PDFiumSharp.Native.FpdfTextpageT text_page, int index)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            var __ret = __Internal.FPDFTextGetFontSize(__arg0, index);
            return __ret;
        }

        public static uint FPDFTextGetFontInfo(global::PDFiumSharp.Native.FpdfTextpageT text_page, int index, __IntPtr buffer, uint buflen, ref int flags)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            fixed (int* __flags4 = &flags)
            {
                var __arg4 = __flags4;
                var __ret = __Internal.FPDFTextGetFontInfo(__arg0, index, buffer, buflen, __arg4);
                return __ret;
            }
        }

        public static int FPDFTextGetFontWeight(global::PDFiumSharp.Native.FpdfTextpageT text_page, int index)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            var __ret = __Internal.FPDFTextGetFontWeight(__arg0, index);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FPDF_TEXT_RENDERMODE FPDFTextGetTextRenderMode(global::PDFiumSharp.Native.FpdfTextpageT text_page, int index)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            var __ret = __Internal.FPDFTextGetTextRenderMode(__arg0, index);
            return __ret;
        }

        public static bool FPDFTextGetFillColor(global::PDFiumSharp.Native.FpdfTextpageT text_page, int index, ref uint R, ref uint G, ref uint B, ref uint A)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            fixed (uint* __R2 = &R)
            {
                var __arg2 = __R2;
                fixed (uint* __G3 = &G)
                {
                    var __arg3 = __G3;
                    fixed (uint* __B4 = &B)
                    {
                        var __arg4 = __B4;
                        fixed (uint* __A5 = &A)
                        {
                            var __arg5 = __A5;
                            var __ret = __Internal.FPDFTextGetFillColor(__arg0, index, __arg2, __arg3, __arg4, __arg5);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static bool FPDFTextGetStrokeColor(global::PDFiumSharp.Native.FpdfTextpageT text_page, int index, ref uint R, ref uint G, ref uint B, ref uint A)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            fixed (uint* __R2 = &R)
            {
                var __arg2 = __R2;
                fixed (uint* __G3 = &G)
                {
                    var __arg3 = __G3;
                    fixed (uint* __B4 = &B)
                    {
                        var __arg4 = __B4;
                        fixed (uint* __A5 = &A)
                        {
                            var __arg5 = __A5;
                            var __ret = __Internal.FPDFTextGetStrokeColor(__arg0, index, __arg2, __arg3, __arg4, __arg5);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static float FPDFTextGetCharAngle(global::PDFiumSharp.Native.FpdfTextpageT text_page, int index)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            var __ret = __Internal.FPDFTextGetCharAngle(__arg0, index);
            return __ret;
        }

        public static bool FPDFTextGetCharBox(global::PDFiumSharp.Native.FpdfTextpageT text_page, int index, ref double left, ref double right, ref double bottom, ref double top)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            fixed (double* __left2 = &left)
            {
                var __arg2 = __left2;
                fixed (double* __right3 = &right)
                {
                    var __arg3 = __right3;
                    fixed (double* __bottom4 = &bottom)
                    {
                        var __arg4 = __bottom4;
                        fixed (double* __top5 = &top)
                        {
                            var __arg5 = __top5;
                            var __ret = __Internal.FPDFTextGetCharBox(__arg0, index, __arg2, __arg3, __arg4, __arg5);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static bool FPDFTextGetLooseCharBox(global::PDFiumSharp.Native.FpdfTextpageT text_page, int index, global::PDFiumSharp.Native.FS_RECTF_ rect)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            var __arg2 = rect is null ? __IntPtr.Zero : rect.__Instance;
            var __ret = __Internal.FPDFTextGetLooseCharBox(__arg0, index, __arg2);
            return __ret;
        }

        public static bool FPDFTextGetMatrix(global::PDFiumSharp.Native.FpdfTextpageT text_page, int index, global::PDFiumSharp.Native.FS_MATRIX_ matrix)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            var __arg2 = matrix is null ? __IntPtr.Zero : matrix.__Instance;
            var __ret = __Internal.FPDFTextGetMatrix(__arg0, index, __arg2);
            return __ret;
        }

        public static bool FPDFTextGetCharOrigin(global::PDFiumSharp.Native.FpdfTextpageT text_page, int index, ref double x, ref double y)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            fixed (double* __x2 = &x)
            {
                var __arg2 = __x2;
                fixed (double* __y3 = &y)
                {
                    var __arg3 = __y3;
                    var __ret = __Internal.FPDFTextGetCharOrigin(__arg0, index, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static int FPDFTextGetCharIndexAtPos(global::PDFiumSharp.Native.FpdfTextpageT text_page, double x, double y, double xTolerance, double yTolerance)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            var __ret = __Internal.FPDFTextGetCharIndexAtPos(__arg0, x, y, xTolerance, yTolerance);
            return __ret;
        }

        public static int FPDFTextGetText(global::PDFiumSharp.Native.FpdfTextpageT text_page, int start_index, int count, ref ushort result)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            fixed (ushort* __result3 = &result)
            {
                var __arg3 = __result3;
                var __ret = __Internal.FPDFTextGetText(__arg0, start_index, count, __arg3);
                return __ret;
            }
        }

        public static int FPDFTextCountRects(global::PDFiumSharp.Native.FpdfTextpageT text_page, int start_index, int count)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            var __ret = __Internal.FPDFTextCountRects(__arg0, start_index, count);
            return __ret;
        }

        public static bool FPDFTextGetRect(global::PDFiumSharp.Native.FpdfTextpageT text_page, int rect_index, ref double left, ref double top, ref double right, ref double bottom)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            fixed (double* __left2 = &left)
            {
                var __arg2 = __left2;
                fixed (double* __top3 = &top)
                {
                    var __arg3 = __top3;
                    fixed (double* __right4 = &right)
                    {
                        var __arg4 = __right4;
                        fixed (double* __bottom5 = &bottom)
                        {
                            var __arg5 = __bottom5;
                            var __ret = __Internal.FPDFTextGetRect(__arg0, rect_index, __arg2, __arg3, __arg4, __arg5);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static int FPDFTextGetBoundedText(global::PDFiumSharp.Native.FpdfTextpageT text_page, double left, double top, double right, double bottom, ref ushort buffer, int buflen)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            fixed (ushort* __buffer5 = &buffer)
            {
                var __arg5 = __buffer5;
                var __ret = __Internal.FPDFTextGetBoundedText(__arg0, left, top, right, bottom, __arg5, buflen);
                return __ret;
            }
        }

        public static global::PDFiumSharp.Native.FpdfSchhandleT FPDFTextFindStart(global::PDFiumSharp.Native.FpdfTextpageT text_page, string findwhat, uint flags, int start_index)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            var __ret = __Internal.FPDFTextFindStart(__arg0, findwhat, flags, start_index);
            var __result0 = global::PDFiumSharp.Native.FpdfSchhandleT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static bool FPDFTextFindNext(global::PDFiumSharp.Native.FpdfSchhandleT handle)
        {
            var __arg0 = handle is null ? __IntPtr.Zero : handle.__Instance;
            var __ret = __Internal.FPDFTextFindNext(__arg0);
            return __ret;
        }

        public static bool FPDFTextFindPrev(global::PDFiumSharp.Native.FpdfSchhandleT handle)
        {
            var __arg0 = handle is null ? __IntPtr.Zero : handle.__Instance;
            var __ret = __Internal.FPDFTextFindPrev(__arg0);
            return __ret;
        }

        public static int FPDFTextGetSchResultIndex(global::PDFiumSharp.Native.FpdfSchhandleT handle)
        {
            var __arg0 = handle is null ? __IntPtr.Zero : handle.__Instance;
            var __ret = __Internal.FPDFTextGetSchResultIndex(__arg0);
            return __ret;
        }

        public static int FPDFTextGetSchCount(global::PDFiumSharp.Native.FpdfSchhandleT handle)
        {
            var __arg0 = handle is null ? __IntPtr.Zero : handle.__Instance;
            var __ret = __Internal.FPDFTextGetSchCount(__arg0);
            return __ret;
        }

        public static void FPDFTextFindClose(global::PDFiumSharp.Native.FpdfSchhandleT handle)
        {
            var __arg0 = handle is null ? __IntPtr.Zero : handle.__Instance;
            __Internal.FPDFTextFindClose(__arg0);
        }

        public static global::PDFiumSharp.Native.FpdfPagelinkT FPDFLinkLoadWebLinks(global::PDFiumSharp.Native.FpdfTextpageT text_page)
        {
            var __arg0 = text_page is null ? __IntPtr.Zero : text_page.__Instance;
            var __ret = __Internal.FPDFLinkLoadWebLinks(__arg0);
            var __result0 = global::PDFiumSharp.Native.FpdfPagelinkT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static int FPDFLinkCountWebLinks(global::PDFiumSharp.Native.FpdfPagelinkT link_page)
        {
            var __arg0 = link_page is null ? __IntPtr.Zero : link_page.__Instance;
            var __ret = __Internal.FPDFLinkCountWebLinks(__arg0);
            return __ret;
        }

        public static int FPDFLinkGetURL(global::PDFiumSharp.Native.FpdfPagelinkT link_page, int link_index, ref ushort buffer, int buflen)
        {
            var __arg0 = link_page is null ? __IntPtr.Zero : link_page.__Instance;
            fixed (ushort* __buffer2 = &buffer)
            {
                var __arg2 = __buffer2;
                var __ret = __Internal.FPDFLinkGetURL(__arg0, link_index, __arg2, buflen);
                return __ret;
            }
        }

        public static int FPDFLinkCountRects(global::PDFiumSharp.Native.FpdfPagelinkT link_page, int link_index)
        {
            var __arg0 = link_page is null ? __IntPtr.Zero : link_page.__Instance;
            var __ret = __Internal.FPDFLinkCountRects(__arg0, link_index);
            return __ret;
        }

        public static bool FPDFLinkGetRect(global::PDFiumSharp.Native.FpdfPagelinkT link_page, int link_index, int rect_index, ref double left, ref double top, ref double right, ref double bottom)
        {
            var __arg0 = link_page is null ? __IntPtr.Zero : link_page.__Instance;
            fixed (double* __left3 = &left)
            {
                var __arg3 = __left3;
                fixed (double* __top4 = &top)
                {
                    var __arg4 = __top4;
                    fixed (double* __right5 = &right)
                    {
                        var __arg5 = __right5;
                        fixed (double* __bottom6 = &bottom)
                        {
                            var __arg6 = __bottom6;
                            var __ret = __Internal.FPDFLinkGetRect(__arg0, link_index, rect_index, __arg3, __arg4, __arg5, __arg6);
                            return __ret;
                        }
                    }
                }
            }
        }

        public static bool FPDFLinkGetTextRange(global::PDFiumSharp.Native.FpdfPagelinkT link_page, int link_index, ref int start_char_index, ref int char_count)
        {
            var __arg0 = link_page is null ? __IntPtr.Zero : link_page.__Instance;
            fixed (int* __start_char_index2 = &start_char_index)
            {
                var __arg2 = __start_char_index2;
                fixed (int* __char_count3 = &char_count)
                {
                    var __arg3 = __char_count3;
                    var __ret = __Internal.FPDFLinkGetTextRange(__arg0, link_index, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static void FPDFLinkCloseWebLinks(global::PDFiumSharp.Native.FpdfPagelinkT link_page)
        {
            var __arg0 = link_page is null ? __IntPtr.Zero : link_page.__Instance;
            __Internal.FPDFLinkCloseWebLinks(__arg0);
        }
    }

    public unsafe partial class fpdf_thumbnail
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_GetDecodedThumbnailData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFPageGetDecodedThumbnailData(__IntPtr page, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_GetRawThumbnailData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FPDFPageGetRawThumbnailData(__IntPtr page, __IntPtr buffer, uint buflen);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_GetThumbnailAsBitmap", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPageGetThumbnailAsBitmap(__IntPtr page);
        }

        public static uint FPDFPageGetDecodedThumbnailData(global::PDFiumSharp.Native.FpdfPageT page, __IntPtr buffer, uint buflen)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDFPageGetDecodedThumbnailData(__arg0, buffer, buflen);
            return __ret;
        }

        public static uint FPDFPageGetRawThumbnailData(global::PDFiumSharp.Native.FpdfPageT page, __IntPtr buffer, uint buflen)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDFPageGetRawThumbnailData(__arg0, buffer, buflen);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfBitmapT FPDFPageGetThumbnailAsBitmap(global::PDFiumSharp.Native.FpdfPageT page)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __ret = __Internal.FPDFPageGetThumbnailAsBitmap(__arg0);
            var __result0 = global::PDFiumSharp.Native.FpdfBitmapT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }
    }

    public unsafe partial class fpdf_transformpage
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_SetMediaBox", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPageSetMediaBox(__IntPtr page, float left, float bottom, float right, float top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_SetCropBox", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPageSetCropBox(__IntPtr page, float left, float bottom, float right, float top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_SetBleedBox", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPageSetBleedBox(__IntPtr page, float left, float bottom, float right, float top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_SetTrimBox", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPageSetTrimBox(__IntPtr page, float left, float bottom, float right, float top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_SetArtBox", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPageSetArtBox(__IntPtr page, float left, float bottom, float right, float top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_GetMediaBox", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageGetMediaBox(__IntPtr page, float* left, float* bottom, float* right, float* top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_GetCropBox", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageGetCropBox(__IntPtr page, float* left, float* bottom, float* right, float* top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_GetBleedBox", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageGetBleedBox(__IntPtr page, float* left, float* bottom, float* right, float* top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_GetTrimBox", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageGetTrimBox(__IntPtr page, float* left, float* bottom, float* right, float* top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_GetArtBox", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageGetArtBox(__IntPtr page, float* left, float* bottom, float* right, float* top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_TransFormWithClip", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern bool FPDFPageTransFormWithClip(__IntPtr page, __IntPtr matrix, __IntPtr clipRect);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_TransformClipPath", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPageObjTransformClipPath(__IntPtr page_object, double a, double b, double c, double d, double e, double f);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPageObj_GetClipPath", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFPageObjGetClipPath(__IntPtr page_object);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFClipPath_CountPaths", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFClipPathCountPaths(__IntPtr clip_path);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFClipPath_CountPathSegments", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FPDFClipPathCountPathSegments(__IntPtr clip_path, int path_index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFClipPath_GetPathSegment", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDFClipPathGetPathSegment(__IntPtr clip_path, int path_index, int segment_index);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_CreateClipPath", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FPDF_CreateClipPath(float left, float bottom, float right, float top);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDF_DestroyClipPath", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDF_DestroyClipPath(__IntPtr clipPath);

            [SuppressUnmanagedCodeSecurity, DllImport("pdfium.dll", EntryPoint = "FPDFPage_InsertClipPath", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FPDFPageInsertClipPath(__IntPtr page, __IntPtr clipPath);
        }

        /// <summary>Set &quot;MediaBox&quot; entry to the page dictionary.</summary>
        /// <remarks>
        /// <para>page   - Handle to a page.</para>
        /// <para>left   - The left of the rectangle.</para>
        /// <para>bottom - The bottom of the rectangle.</para>
        /// <para>right  - The right of the rectangle.</para>
        /// <para>top    - The top of the rectangle.</para>
        /// </remarks>
        public static void FPDFPageSetMediaBox(global::PDFiumSharp.Native.FpdfPageT page, float left, float bottom, float right, float top)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            __Internal.FPDFPageSetMediaBox(__arg0, left, bottom, right, top);
        }

        /// <summary>Set &quot;CropBox&quot; entry to the page dictionary.</summary>
        /// <remarks>
        /// <para>page   - Handle to a page.</para>
        /// <para>left   - The left of the rectangle.</para>
        /// <para>bottom - The bottom of the rectangle.</para>
        /// <para>right  - The right of the rectangle.</para>
        /// <para>top    - The top of the rectangle.</para>
        /// </remarks>
        public static void FPDFPageSetCropBox(global::PDFiumSharp.Native.FpdfPageT page, float left, float bottom, float right, float top)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            __Internal.FPDFPageSetCropBox(__arg0, left, bottom, right, top);
        }

        /// <summary>Set &quot;BleedBox&quot; entry to the page dictionary.</summary>
        /// <remarks>
        /// <para>page   - Handle to a page.</para>
        /// <para>left   - The left of the rectangle.</para>
        /// <para>bottom - The bottom of the rectangle.</para>
        /// <para>right  - The right of the rectangle.</para>
        /// <para>top    - The top of the rectangle.</para>
        /// </remarks>
        public static void FPDFPageSetBleedBox(global::PDFiumSharp.Native.FpdfPageT page, float left, float bottom, float right, float top)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            __Internal.FPDFPageSetBleedBox(__arg0, left, bottom, right, top);
        }

        /// <summary>Set &quot;TrimBox&quot; entry to the page dictionary.</summary>
        /// <remarks>
        /// <para>page   - Handle to a page.</para>
        /// <para>left   - The left of the rectangle.</para>
        /// <para>bottom - The bottom of the rectangle.</para>
        /// <para>right  - The right of the rectangle.</para>
        /// <para>top    - The top of the rectangle.</para>
        /// </remarks>
        public static void FPDFPageSetTrimBox(global::PDFiumSharp.Native.FpdfPageT page, float left, float bottom, float right, float top)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            __Internal.FPDFPageSetTrimBox(__arg0, left, bottom, right, top);
        }

        /// <summary>Set &quot;ArtBox&quot; entry to the page dictionary.</summary>
        /// <remarks>
        /// <para>page   - Handle to a page.</para>
        /// <para>left   - The left of the rectangle.</para>
        /// <para>bottom - The bottom of the rectangle.</para>
        /// <para>right  - The right of the rectangle.</para>
        /// <para>top    - The top of the rectangle.</para>
        /// </remarks>
        public static void FPDFPageSetArtBox(global::PDFiumSharp.Native.FpdfPageT page, float left, float bottom, float right, float top)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            __Internal.FPDFPageSetArtBox(__arg0, left, bottom, right, top);
        }

        /// <summary>Get &quot;MediaBox&quot; entry from the page dictionary.</summary>
        /// <remarks>
        /// <para>page   - Handle to a page.</para>
        /// <para>left   - Pointer to a float value receiving the left of the rectangle.</para>
        /// <para>bottom - Pointer to a float value receiving the bottom of the rectangle.</para>
        /// <para>right  - Pointer to a float value receiving the right of the rectangle.</para>
        /// <para>top    - Pointer to a float value receiving the top of the rectangle.</para>
        /// <para>On success, return true and write to the out parameters. Otherwise return</para>
        /// <para>false and leave the out parameters unmodified.</para>
        /// </remarks>
        public static bool FPDFPageGetMediaBox(global::PDFiumSharp.Native.FpdfPageT page, ref float left, ref float bottom, ref float right, ref float top)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            fixed (float* __left1 = &left)
            {
                var __arg1 = __left1;
                fixed (float* __bottom2 = &bottom)
                {
                    var __arg2 = __bottom2;
                    fixed (float* __right3 = &right)
                    {
                        var __arg3 = __right3;
                        fixed (float* __top4 = &top)
                        {
                            var __arg4 = __top4;
                            var __ret = __Internal.FPDFPageGetMediaBox(__arg0, __arg1, __arg2, __arg3, __arg4);
                            return __ret;
                        }
                    }
                }
            }
        }

        /// <summary>Get &quot;CropBox&quot; entry from the page dictionary.</summary>
        /// <remarks>
        /// <para>page   - Handle to a page.</para>
        /// <para>left   - Pointer to a float value receiving the left of the rectangle.</para>
        /// <para>bottom - Pointer to a float value receiving the bottom of the rectangle.</para>
        /// <para>right  - Pointer to a float value receiving the right of the rectangle.</para>
        /// <para>top    - Pointer to a float value receiving the top of the rectangle.</para>
        /// <para>On success, return true and write to the out parameters. Otherwise return</para>
        /// <para>false and leave the out parameters unmodified.</para>
        /// </remarks>
        public static bool FPDFPageGetCropBox(global::PDFiumSharp.Native.FpdfPageT page, ref float left, ref float bottom, ref float right, ref float top)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            fixed (float* __left1 = &left)
            {
                var __arg1 = __left1;
                fixed (float* __bottom2 = &bottom)
                {
                    var __arg2 = __bottom2;
                    fixed (float* __right3 = &right)
                    {
                        var __arg3 = __right3;
                        fixed (float* __top4 = &top)
                        {
                            var __arg4 = __top4;
                            var __ret = __Internal.FPDFPageGetCropBox(__arg0, __arg1, __arg2, __arg3, __arg4);
                            return __ret;
                        }
                    }
                }
            }
        }

        /// <summary>Get &quot;BleedBox&quot; entry from the page dictionary.</summary>
        /// <remarks>
        /// <para>page   - Handle to a page.</para>
        /// <para>left   - Pointer to a float value receiving the left of the rectangle.</para>
        /// <para>bottom - Pointer to a float value receiving the bottom of the rectangle.</para>
        /// <para>right  - Pointer to a float value receiving the right of the rectangle.</para>
        /// <para>top    - Pointer to a float value receiving the top of the rectangle.</para>
        /// <para>On success, return true and write to the out parameters. Otherwise return</para>
        /// <para>false and leave the out parameters unmodified.</para>
        /// </remarks>
        public static bool FPDFPageGetBleedBox(global::PDFiumSharp.Native.FpdfPageT page, ref float left, ref float bottom, ref float right, ref float top)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            fixed (float* __left1 = &left)
            {
                var __arg1 = __left1;
                fixed (float* __bottom2 = &bottom)
                {
                    var __arg2 = __bottom2;
                    fixed (float* __right3 = &right)
                    {
                        var __arg3 = __right3;
                        fixed (float* __top4 = &top)
                        {
                            var __arg4 = __top4;
                            var __ret = __Internal.FPDFPageGetBleedBox(__arg0, __arg1, __arg2, __arg3, __arg4);
                            return __ret;
                        }
                    }
                }
            }
        }

        /// <summary>Get &quot;TrimBox&quot; entry from the page dictionary.</summary>
        /// <remarks>
        /// <para>page   - Handle to a page.</para>
        /// <para>left   - Pointer to a float value receiving the left of the rectangle.</para>
        /// <para>bottom - Pointer to a float value receiving the bottom of the rectangle.</para>
        /// <para>right  - Pointer to a float value receiving the right of the rectangle.</para>
        /// <para>top    - Pointer to a float value receiving the top of the rectangle.</para>
        /// <para>On success, return true and write to the out parameters. Otherwise return</para>
        /// <para>false and leave the out parameters unmodified.</para>
        /// </remarks>
        public static bool FPDFPageGetTrimBox(global::PDFiumSharp.Native.FpdfPageT page, ref float left, ref float bottom, ref float right, ref float top)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            fixed (float* __left1 = &left)
            {
                var __arg1 = __left1;
                fixed (float* __bottom2 = &bottom)
                {
                    var __arg2 = __bottom2;
                    fixed (float* __right3 = &right)
                    {
                        var __arg3 = __right3;
                        fixed (float* __top4 = &top)
                        {
                            var __arg4 = __top4;
                            var __ret = __Internal.FPDFPageGetTrimBox(__arg0, __arg1, __arg2, __arg3, __arg4);
                            return __ret;
                        }
                    }
                }
            }
        }

        /// <summary>Get &quot;ArtBox&quot; entry from the page dictionary.</summary>
        /// <remarks>
        /// <para>page   - Handle to a page.</para>
        /// <para>left   - Pointer to a float value receiving the left of the rectangle.</para>
        /// <para>bottom - Pointer to a float value receiving the bottom of the rectangle.</para>
        /// <para>right  - Pointer to a float value receiving the right of the rectangle.</para>
        /// <para>top    - Pointer to a float value receiving the top of the rectangle.</para>
        /// <para>On success, return true and write to the out parameters. Otherwise return</para>
        /// <para>false and leave the out parameters unmodified.</para>
        /// </remarks>
        public static bool FPDFPageGetArtBox(global::PDFiumSharp.Native.FpdfPageT page, ref float left, ref float bottom, ref float right, ref float top)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            fixed (float* __left1 = &left)
            {
                var __arg1 = __left1;
                fixed (float* __bottom2 = &bottom)
                {
                    var __arg2 = __bottom2;
                    fixed (float* __right3 = &right)
                    {
                        var __arg3 = __right3;
                        fixed (float* __top4 = &top)
                        {
                            var __arg4 = __top4;
                            var __ret = __Internal.FPDFPageGetArtBox(__arg0, __arg1, __arg2, __arg3, __arg4);
                            return __ret;
                        }
                    }
                }
            }
        }

        /// <summary>Apply transforms to |page|.</summary>
        /// <remarks>
        /// <para>If |matrix| is provided it will be applied to transform the page.</para>
        /// <para>If |clipRect| is provided it will be used to clip the resulting page.</para>
        /// <para>If neither |matrix| or |clipRect| are provided this method returns |false|.</para>
        /// <para>Returns |true| if transforms are applied.</para>
        /// <para>This function will transform the whole page, and would take effect to all the</para>
        /// <para>objects in the page.</para>
        /// <para>page        - Page handle.</para>
        /// <para>matrix      - Transform matrix.</para>
        /// <para>clipRect    - Clipping rectangle.</para>
        /// </remarks>
        public static bool FPDFPageTransFormWithClip(global::PDFiumSharp.Native.FpdfPageT page, global::PDFiumSharp.Native.FS_MATRIX_ matrix, global::PDFiumSharp.Native.FS_RECTF_ clipRect)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg1 = matrix is null ? __IntPtr.Zero : matrix.__Instance;
            var __arg2 = clipRect is null ? __IntPtr.Zero : clipRect.__Instance;
            var __ret = __Internal.FPDFPageTransFormWithClip(__arg0, __arg1, __arg2);
            return __ret;
        }

        /// <summary>
        /// <para>Transform (scale, rotate, shear, move) the clip path of page object.</para>
        /// <para>page_object - Handle to a page object. Returned by</para>
        /// <para>FPDFPageObj_NewImageObj().</para>
        /// </summary>
        /// <remarks>
        /// <para>a  - The coefficient &quot;a&quot; of the matrix.</para>
        /// <para>b  - The coefficient &quot;b&quot; of the matrix.</para>
        /// <para>c  - The coefficient &quot;c&quot; of the matrix.</para>
        /// <para>d  - The coefficient &quot;d&quot; of the matrix.</para>
        /// <para>e  - The coefficient &quot;e&quot; of the matrix.</para>
        /// <para>f  - The coefficient &quot;f&quot; of the matrix.</para>
        /// </remarks>
        public static void FPDFPageObjTransformClipPath(global::PDFiumSharp.Native.FpdfPageobjectT page_object, double a, double b, double c, double d, double e, double f)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            __Internal.FPDFPageObjTransformClipPath(__arg0, a, b, c, d, e, f);
        }

        public static global::PDFiumSharp.Native.FpdfClippathT FPDFPageObjGetClipPath(global::PDFiumSharp.Native.FpdfPageobjectT page_object)
        {
            var __arg0 = page_object is null ? __IntPtr.Zero : page_object.__Instance;
            var __ret = __Internal.FPDFPageObjGetClipPath(__arg0);
            var __result0 = global::PDFiumSharp.Native.FpdfClippathT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public static int FPDFClipPathCountPaths(global::PDFiumSharp.Native.FpdfClippathT clip_path)
        {
            var __arg0 = clip_path is null ? __IntPtr.Zero : clip_path.__Instance;
            var __ret = __Internal.FPDFClipPathCountPaths(__arg0);
            return __ret;
        }

        public static int FPDFClipPathCountPathSegments(global::PDFiumSharp.Native.FpdfClippathT clip_path, int path_index)
        {
            var __arg0 = clip_path is null ? __IntPtr.Zero : clip_path.__Instance;
            var __ret = __Internal.FPDFClipPathCountPathSegments(__arg0, path_index);
            return __ret;
        }

        public static global::PDFiumSharp.Native.FpdfPathsegmentT FPDFClipPathGetPathSegment(global::PDFiumSharp.Native.FpdfClippathT clip_path, int path_index, int segment_index)
        {
            var __arg0 = clip_path is null ? __IntPtr.Zero : clip_path.__Instance;
            var __ret = __Internal.FPDFClipPathGetPathSegment(__arg0, path_index, segment_index);
            var __result0 = global::PDFiumSharp.Native.FpdfPathsegmentT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        /// <summary>Create a new clip path, with a rectangle inserted.</summary>
        /// <remarks>
        /// <para>Caller takes ownership of the returned FPDF_CLIPPATH. It should be freed with</para>
        /// <para>FPDF_DestroyClipPath().</para>
        /// <para>left   - The left of the clip box.</para>
        /// <para>bottom - The bottom of the clip box.</para>
        /// <para>right  - The right of the clip box.</para>
        /// <para>top    - The top of the clip box.</para>
        /// </remarks>
        public static global::PDFiumSharp.Native.FpdfClippathT FPDF_CreateClipPath(float left, float bottom, float right, float top)
        {
            var __ret = __Internal.FPDF_CreateClipPath(left, bottom, right, top);
            var __result0 = global::PDFiumSharp.Native.FpdfClippathT.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        /// <summary>Destroy the clip path.</summary>
        /// <remarks>clipPath - A handle to the clip path. It will be invalid after this call.</remarks>
        public static void FPDF_DestroyClipPath(global::PDFiumSharp.Native.FpdfClippathT clipPath)
        {
            var __arg0 = clipPath is null ? __IntPtr.Zero : clipPath.__Instance;
            __Internal.FPDF_DestroyClipPath(__arg0);
        }

        /// <summary>
        /// <para>Clip the page content, the page content that outside the clipping region</para>
        /// <para>become invisible.</para>
        /// </summary>
        /// <remarks>
        /// <para>A clip path will be inserted before the page content stream or content array.</para>
        /// <para>In this way, the page content will be clipped by this clip path.</para>
        /// <para>page        - A page handle.</para>
        /// <para>clipPath    - A handle to the clip path. (Does not take ownership.)</para>
        /// </remarks>
        public static void FPDFPageInsertClipPath(global::PDFiumSharp.Native.FpdfPageT page, global::PDFiumSharp.Native.FpdfClippathT clipPath)
        {
            var __arg0 = page is null ? __IntPtr.Zero : page.__Instance;
            var __arg1 = clipPath is null ? __IntPtr.Zero : clipPath.__Instance;
            __Internal.FPDFPageInsertClipPath(__arg0, __arg1);
        }
    }

    public unsafe partial class FPDFAnnotationDeleter : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FPDFAnnotationDeleter@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFAnnotationDeleter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFAnnotationDeleter>();

        protected bool __ownsNativeInstance;

        internal static FPDFAnnotationDeleter __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDFAnnotationDeleter(native.ToPointer(), skipVTables);
        }

        internal static FPDFAnnotationDeleter __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDFAnnotationDeleter)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDFAnnotationDeleter __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDFAnnotationDeleter(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDFAnnotationDeleter(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDFAnnotationDeleter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDFAnnotationDeleter()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFAnnotationDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDFAnnotationDeleter(global::PDFiumSharp.Native.FPDFAnnotationDeleter _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFAnnotationDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDFAnnotationDeleter.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDFAnnotationDeleter.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class FPDFAvailDeleter : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FPDFAvailDeleter@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFAvailDeleter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFAvailDeleter>();

        protected bool __ownsNativeInstance;

        internal static FPDFAvailDeleter __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDFAvailDeleter(native.ToPointer(), skipVTables);
        }

        internal static FPDFAvailDeleter __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDFAvailDeleter)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDFAvailDeleter __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDFAvailDeleter(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDFAvailDeleter(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDFAvailDeleter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDFAvailDeleter()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFAvailDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDFAvailDeleter(global::PDFiumSharp.Native.FPDFAvailDeleter _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFAvailDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDFAvailDeleter.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDFAvailDeleter.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class FPDFBitmapDeleter : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FPDFBitmapDeleter@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFBitmapDeleter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFBitmapDeleter>();

        protected bool __ownsNativeInstance;

        internal static FPDFBitmapDeleter __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDFBitmapDeleter(native.ToPointer(), skipVTables);
        }

        internal static FPDFBitmapDeleter __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDFBitmapDeleter)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDFBitmapDeleter __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDFBitmapDeleter(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDFBitmapDeleter(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDFBitmapDeleter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDFBitmapDeleter()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFBitmapDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDFBitmapDeleter(global::PDFiumSharp.Native.FPDFBitmapDeleter _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFBitmapDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDFBitmapDeleter.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDFBitmapDeleter.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class FPDFClipPathDeleter : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FPDFClipPathDeleter@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFClipPathDeleter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFClipPathDeleter>();

        protected bool __ownsNativeInstance;

        internal static FPDFClipPathDeleter __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDFClipPathDeleter(native.ToPointer(), skipVTables);
        }

        internal static FPDFClipPathDeleter __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDFClipPathDeleter)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDFClipPathDeleter __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDFClipPathDeleter(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDFClipPathDeleter(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDFClipPathDeleter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDFClipPathDeleter()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFClipPathDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDFClipPathDeleter(global::PDFiumSharp.Native.FPDFClipPathDeleter _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFClipPathDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDFClipPathDeleter.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDFClipPathDeleter.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class FPDFDocumentDeleter : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FPDFDocumentDeleter@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFDocumentDeleter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFDocumentDeleter>();

        protected bool __ownsNativeInstance;

        internal static FPDFDocumentDeleter __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDFDocumentDeleter(native.ToPointer(), skipVTables);
        }

        internal static FPDFDocumentDeleter __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDFDocumentDeleter)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDFDocumentDeleter __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDFDocumentDeleter(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDFDocumentDeleter(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDFDocumentDeleter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDFDocumentDeleter()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFDocumentDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDFDocumentDeleter(global::PDFiumSharp.Native.FPDFDocumentDeleter _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFDocumentDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDFDocumentDeleter.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDFDocumentDeleter.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class FPDFFontDeleter : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FPDFFontDeleter@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFFontDeleter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFFontDeleter>();

        protected bool __ownsNativeInstance;

        internal static FPDFFontDeleter __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDFFontDeleter(native.ToPointer(), skipVTables);
        }

        internal static FPDFFontDeleter __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDFFontDeleter)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDFFontDeleter __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDFFontDeleter(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDFFontDeleter(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDFFontDeleter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDFFontDeleter()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFFontDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDFFontDeleter(global::PDFiumSharp.Native.FPDFFontDeleter _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFFontDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDFFontDeleter.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDFFontDeleter.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class FPDFFormHandleDeleter : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FPDFFormHandleDeleter@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFFormHandleDeleter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFFormHandleDeleter>();

        protected bool __ownsNativeInstance;

        internal static FPDFFormHandleDeleter __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDFFormHandleDeleter(native.ToPointer(), skipVTables);
        }

        internal static FPDFFormHandleDeleter __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDFFormHandleDeleter)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDFFormHandleDeleter __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDFFormHandleDeleter(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDFFormHandleDeleter(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDFFormHandleDeleter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDFFormHandleDeleter()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFFormHandleDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDFFormHandleDeleter(global::PDFiumSharp.Native.FPDFFormHandleDeleter _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFFormHandleDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDFFormHandleDeleter.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDFFormHandleDeleter.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class FPDFJavaScriptActionDeleter : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FPDFJavaScriptActionDeleter@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFJavaScriptActionDeleter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFJavaScriptActionDeleter>();

        protected bool __ownsNativeInstance;

        internal static FPDFJavaScriptActionDeleter __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDFJavaScriptActionDeleter(native.ToPointer(), skipVTables);
        }

        internal static FPDFJavaScriptActionDeleter __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDFJavaScriptActionDeleter)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDFJavaScriptActionDeleter __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDFJavaScriptActionDeleter(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDFJavaScriptActionDeleter(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDFJavaScriptActionDeleter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDFJavaScriptActionDeleter()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFJavaScriptActionDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDFJavaScriptActionDeleter(global::PDFiumSharp.Native.FPDFJavaScriptActionDeleter _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFJavaScriptActionDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDFJavaScriptActionDeleter.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDFJavaScriptActionDeleter.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class FPDFPageDeleter : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FPDFPageDeleter@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFPageDeleter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFPageDeleter>();

        protected bool __ownsNativeInstance;

        internal static FPDFPageDeleter __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDFPageDeleter(native.ToPointer(), skipVTables);
        }

        internal static FPDFPageDeleter __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDFPageDeleter)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDFPageDeleter __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDFPageDeleter(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDFPageDeleter(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDFPageDeleter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDFPageDeleter()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFPageDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDFPageDeleter(global::PDFiumSharp.Native.FPDFPageDeleter _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFPageDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDFPageDeleter.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDFPageDeleter.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class FPDFPageLinkDeleter : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FPDFPageLinkDeleter@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFPageLinkDeleter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFPageLinkDeleter>();

        protected bool __ownsNativeInstance;

        internal static FPDFPageLinkDeleter __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDFPageLinkDeleter(native.ToPointer(), skipVTables);
        }

        internal static FPDFPageLinkDeleter __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDFPageLinkDeleter)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDFPageLinkDeleter __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDFPageLinkDeleter(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDFPageLinkDeleter(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDFPageLinkDeleter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDFPageLinkDeleter()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFPageLinkDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDFPageLinkDeleter(global::PDFiumSharp.Native.FPDFPageLinkDeleter _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFPageLinkDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDFPageLinkDeleter.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDFPageLinkDeleter.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class FPDFPageObjectDeleter : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FPDFPageObjectDeleter@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFPageObjectDeleter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFPageObjectDeleter>();

        protected bool __ownsNativeInstance;

        internal static FPDFPageObjectDeleter __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDFPageObjectDeleter(native.ToPointer(), skipVTables);
        }

        internal static FPDFPageObjectDeleter __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDFPageObjectDeleter)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDFPageObjectDeleter __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDFPageObjectDeleter(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDFPageObjectDeleter(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDFPageObjectDeleter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDFPageObjectDeleter()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFPageObjectDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDFPageObjectDeleter(global::PDFiumSharp.Native.FPDFPageObjectDeleter _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFPageObjectDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDFPageObjectDeleter.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDFPageObjectDeleter.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class FPDFStructTreeDeleter : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FPDFStructTreeDeleter@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFStructTreeDeleter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFStructTreeDeleter>();

        protected bool __ownsNativeInstance;

        internal static FPDFStructTreeDeleter __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDFStructTreeDeleter(native.ToPointer(), skipVTables);
        }

        internal static FPDFStructTreeDeleter __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDFStructTreeDeleter)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDFStructTreeDeleter __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDFStructTreeDeleter(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDFStructTreeDeleter(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDFStructTreeDeleter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDFStructTreeDeleter()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFStructTreeDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDFStructTreeDeleter(global::PDFiumSharp.Native.FPDFStructTreeDeleter _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFStructTreeDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDFStructTreeDeleter.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDFStructTreeDeleter.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class FPDFTextFindDeleter : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FPDFTextFindDeleter@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFTextFindDeleter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFTextFindDeleter>();

        protected bool __ownsNativeInstance;

        internal static FPDFTextFindDeleter __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDFTextFindDeleter(native.ToPointer(), skipVTables);
        }

        internal static FPDFTextFindDeleter __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDFTextFindDeleter)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDFTextFindDeleter __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDFTextFindDeleter(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDFTextFindDeleter(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDFTextFindDeleter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDFTextFindDeleter()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFTextFindDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDFTextFindDeleter(global::PDFiumSharp.Native.FPDFTextFindDeleter _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFTextFindDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDFTextFindDeleter.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDFTextFindDeleter.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    public unsafe partial class FPDFTextPageDeleter : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 1)]
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("pdfium", EntryPoint = "??0FPDFTextPageDeleter@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFTextPageDeleter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::PDFiumSharp.Native.FPDFTextPageDeleter>();

        protected bool __ownsNativeInstance;

        internal static FPDFTextPageDeleter __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new FPDFTextPageDeleter(native.ToPointer(), skipVTables);
        }

        internal static FPDFTextPageDeleter __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (FPDFTextPageDeleter)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static FPDFTextPageDeleter __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new FPDFTextPageDeleter(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private FPDFTextPageDeleter(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected FPDFTextPageDeleter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public FPDFTextPageDeleter()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFTextPageDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public FPDFTextPageDeleter(global::PDFiumSharp.Native.FPDFTextPageDeleter _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::PDFiumSharp.Native.FPDFTextPageDeleter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::PDFiumSharp.Native.FPDFTextPageDeleter.__Internal*) __Instance) = *((global::PDFiumSharp.Native.FPDFTextPageDeleter.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }
    }

    namespace Delegates
    {
        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate int Func_int___IntPtr_uint_bytePtr_uint(__IntPtr param, uint position, byte* pBuf, uint size);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action___IntPtr(__IntPtr clientData);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate uint Func_uint___IntPtr(__IntPtr clientData);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate int Func_int___IntPtr_uint___IntPtr_uint(__IntPtr clientData, uint offset, __IntPtr buffer, uint size);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate int Func_int___IntPtr(__IntPtr clientData);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate int Func_int___IntPtr_uint(__IntPtr clientData, uint size);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate int Func_int___IntPtr_string_string_int_int(__IntPtr pThis, [MarshalAs(UnmanagedType.LPWStr)] string Msg, [MarshalAs(UnmanagedType.LPWStr)] string Title, int Type, int Icon);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action___IntPtr_int(__IntPtr pThis, int nType);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate int Func_int___IntPtr_string_string_string_string_bool___IntPtr_int(__IntPtr pThis, [MarshalAs(UnmanagedType.LPWStr)] string Question, [MarshalAs(UnmanagedType.LPWStr)] string Title, [MarshalAs(UnmanagedType.LPWStr)] string Default, [MarshalAs(UnmanagedType.LPWStr)] string cLabel, bool bPassword, __IntPtr response, int length);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate int Func_int___IntPtr___IntPtr_int(__IntPtr pThis, __IntPtr filePath, int length);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action___IntPtr___IntPtr_int_bool_string_string_string_string_string(__IntPtr pThis, __IntPtr mailData, int length, bool bUI, [MarshalAs(UnmanagedType.LPWStr)] string To, [MarshalAs(UnmanagedType.LPWStr)] string Subject, [MarshalAs(UnmanagedType.LPWStr)] string CC, [MarshalAs(UnmanagedType.LPWStr)] string BCC, [MarshalAs(UnmanagedType.LPWStr)] string Msg);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action___IntPtr_bool_int_int_bool_bool_bool_bool_bool(__IntPtr pThis, bool bUI, int nStart, int nEnd, bool bSilent, bool bShrinkToFit, bool bPrintAsImage, bool bReverse, bool bAnnotations);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action___IntPtr___IntPtr_int_string(__IntPtr pThis, __IntPtr formData, int length, [MarshalAs(UnmanagedType.LPWStr)] string URL);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action___IntPtr___IntPtr_double_double_double_double(__IntPtr pThis, __IntPtr page, double left, double top, double right, double bottom);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate int Func_int___IntPtr_int_PDFiumSharp_Native_TimerCallback(__IntPtr pThis, int uElapse, global::PDFiumSharp.Native.TimerCallback lpTimerFunc);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate global::PDFiumSharp.Native.FPDF_SYSTEMTIME.__Internal Func_PDFiumSharp_Native__FPDF_SYSTEMTIME___Internal___IntPtr(__IntPtr pThis);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate __IntPtr Func___IntPtr___IntPtr___IntPtr_int(__IntPtr pThis, __IntPtr document, int nPageIndex);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate __IntPtr Func___IntPtr___IntPtr___IntPtr(__IntPtr pThis, __IntPtr document);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate int Func_int___IntPtr___IntPtr(__IntPtr pThis, __IntPtr page);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action___IntPtr__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string(__IntPtr pThis, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string namedAction);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action___IntPtr_string_uint_bool(__IntPtr pThis, [MarshalAs(UnmanagedType.LPWStr)] string value, uint valueLen, bool is_focus);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action___IntPtr_int_int_floatPtr_int(__IntPtr pThis, int nPageIndex, int zoomMode, float* fPosArray, int sizeofArray);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action___IntPtr___IntPtr_bool_double_double_double_double(__IntPtr pThis, __IntPtr page, bool bVisible, double left, double top, double right, double bottom);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action___IntPtr___IntPtr_int(__IntPtr pThis, __IntPtr document, int iCurPage);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action___IntPtr___IntPtr_string(__IntPtr pThis, __IntPtr document, [MarshalAs(UnmanagedType.LPWStr)] string wsURL);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action___IntPtr___IntPtr_doublePtr_doublePtr_doublePtr_doublePtr(__IntPtr pThis, __IntPtr page, double* left, double* top, double* right, double* bottom);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action___IntPtr_int_uint(__IntPtr pThis, int page_count, uint event_type);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate bool Func_bool___IntPtr___IntPtr___IntPtr_int_float_float(__IntPtr pThis, __IntPtr page, __IntPtr hWidget, int menuFlag, float x, float y);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate __IntPtr Func___IntPtr___IntPtr_int_string__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string(__IntPtr pThis, int fileFlag, [MarshalAs(UnmanagedType.LPWStr)] string wsURL, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string mode);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action___IntPtr___IntPtr_string_string_string_string_string(__IntPtr pThis, __IntPtr fileHandler, [MarshalAs(UnmanagedType.LPWStr)] string pTo, [MarshalAs(UnmanagedType.LPWStr)] string pSubject, [MarshalAs(UnmanagedType.LPWStr)] string pCC, [MarshalAs(UnmanagedType.LPWStr)] string pBcc, [MarshalAs(UnmanagedType.LPWStr)] string pMsg);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate __IntPtr Func___IntPtr___IntPtr_string(__IntPtr pThis, [MarshalAs(UnmanagedType.LPWStr)] string URL);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate bool Func_bool___IntPtr_string_string_string_string_string___IntPtr(__IntPtr pThis, [MarshalAs(UnmanagedType.LPWStr)] string wsURL, [MarshalAs(UnmanagedType.LPWStr)] string wsData, [MarshalAs(UnmanagedType.LPWStr)] string wsContentType, [MarshalAs(UnmanagedType.LPWStr)] string wsEncode, [MarshalAs(UnmanagedType.LPWStr)] string wsHeader, __IntPtr response);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate bool Func_bool___IntPtr_string_string_string(__IntPtr pThis, [MarshalAs(UnmanagedType.LPWStr)] string wsURL, [MarshalAs(UnmanagedType.LPWStr)] string wsData, [MarshalAs(UnmanagedType.LPWStr)] string wsEncode);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action___IntPtr__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string_int(__IntPtr param, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string uri, int modifiers);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate bool Func_bool___IntPtr_ulong_ulong(__IntPtr pThis, ulong offset, ulong size);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action___IntPtr_ulong_ulong(__IntPtr pThis, ulong offset, ulong size);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate long Func_long();

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate bool Func_bool___IntPtr(__IntPtr pThis);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate int Func_int___IntPtr___IntPtr_uint(__IntPtr pThis, __IntPtr pData, uint size);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate void Action___IntPtr___IntPtr(__IntPtr pThis, __IntPtr pMapper);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate __IntPtr Func___IntPtr___IntPtr_int_bool_int_int__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string_boolPtr(__IntPtr pThis, int weight, bool bItalic, int charset, int pitch_family, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string face, bool* bExact);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate __IntPtr Func___IntPtr___IntPtr__MarshalAs_UnmanagedType_CustomMarshaler__MarshalTypeRef___typeof_CppSharp_Runtime_UTF8Marshaller____string(__IntPtr pThis, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string face);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate uint Func_uint___IntPtr___IntPtr_uint_bytePtr_uint(__IntPtr pThis, __IntPtr hFont, uint table, byte* buffer, uint buf_size);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
        public unsafe delegate uint Func_uint___IntPtr___IntPtr_sbytePtr_uint(__IntPtr pThis, __IntPtr hFont, sbyte* buffer, uint buf_size);
    }
}
